---
import Layout from '~/layouts/PageLayout.astro';
import HeroCustomAB from '~/components/widgets/HeroCustomAB.astro';
import Content from '~/components/widgets/Content.astro';
import { Icon } from 'astro-icon/components';

// Import AB testing logic. 
// getVariant is used SSR. The side-effect import ensures abTester.ts client-side code runs.
import { getVariant, type ABVariant } from '~/lib/abTester';
import '~/lib/abTester'; 

import imgHeroMain from '~/assets/images/jj2.png';

const metadata = {
  title: 'A/B Test Page | JJ Roberts',
  description: "Testing A/B variations.",
};

// --- Hero Section A/B Test ---
const HERO_EXPERIMENT_NAME = 'Hero Headline AB Test 1'; 
const chosenHeroContent: ABVariant = await getVariant(HERO_EXPERIMENT_NAME);
console.log(`[Index Page SSR] Assigned Hero variant for experiment "${HERO_EXPERIMENT_NAME}":`, JSON.stringify(chosenHeroContent, null, 2));
console.log(`[Index Page SSR] HERO_EXPERIMENT_NAME to be passed to HeroCustomAB: "${HERO_EXPERIMENT_NAME}"`);
console.log(`[Index Page SSR] chosenHeroContent.id to be passed as abTestVariantKey: "${chosenHeroContent.id}"`);


// --- Quiz A/B Test (determines which quiz path to link to) ---
const QUIZ_EXPERIMENT_NAME = 'Lovelab Quiz 1 or 2 pages';
let quizVariant: ABVariant;

try {
  quizVariant = await getVariant(QUIZ_EXPERIMENT_NAME);
  console.log(`[Index Page SSR] Assigned Quiz variant for experiment "${QUIZ_EXPERIMENT_NAME}" (for path selection):`, JSON.stringify(quizVariant, null, 2));
  
  // Server-side impression logging for quiz variant exposure on this page is commented out.
  // Client-side logging via window.logClientImpression is preferred for consistency.
  // If you need to log an impression for quizVariant exposure on *this page load*, 
  // add a client-side script similar to the hero impression logger below,
  // passing the quizVariant data.
  // Example: await trackImpression(QUIZ_EXPERIMENT_NAME, quizVariant.id); // Old call
  
} catch (error) {
  console.error(`[Index Page SSR] Error getting quiz variant for "${QUIZ_EXPERIMENT_NAME}":`, error.message);
  quizVariant = {
    id: 'fallback_quiz_variant_id_err', 
    name: 'Fallback Quiz Path DueToError',      
    experiment_id: 'fallback_quiz_experiment_id_err', 
    headline: '', 
    subheadline: '', 
    raw_config_json: {
      quiz_path: '/quiz', 
      quiz_name: 'Default Quiz (Error Fallback)'
    }
  };
  console.log('[Index Page SSR] Using fallback quiz variant due to error:', quizVariant);
}

// Prepare quizVariantInfo for client-side script (to be stored in localStorage)
const quizVariantInfo = {
  experiment: QUIZ_EXPERIMENT_NAME,        
  experimentId: quizVariant.experiment_id, 
  variantId: quizVariant.id,               
  variantName: quizVariant.name,           
  quizPath: quizVariant.raw_config_json?.quiz_path as string || '/quiz',
  quizName: quizVariant.raw_config_json?.quiz_name as string || (quizVariant.name || 'Quiz')
};
console.log('[Index Page SSR] quizVariantInfo prepared for client localStorage:', JSON.stringify(quizVariantInfo, null, 2));


const heroImageForWidget = { 
  src: imgHeroMain,
  alt: 'JJ Roberts - Relationship Expert'
} as const;

const finalCtaTagline = "Your Next Step to a Better Love Life";
const finalCtaTitle = "Unlock Your Relationship Blueprint";
const finalCtaImage = { src: imgHeroMain, alt: 'Abstract graphic representing a blueprint or pathway' };
const finalCtaDescription = `
  Ready to understand what's *really* going on in your relationships and how to make lasting positive changes?
  Our quick, insightful quiz will help you identify key patterns and provide a starting point for your personal transformation.
  Plus, you'll get exclusive free chapters from "Sex 3.0: A Sexual Revolution Manual" to guide you further!
`;

const quizUrl = quizVariantInfo.quizPath; 
console.log('[Index Page SSR] Final Quiz URL for button:', quizUrl);

const finalCtaButton = {
    text: 'Enter The Love Lab',
    href: quizUrl,
    icon: 'tabler:flask'
};
---

<Layout metadata={metadata}>
  <main>
    <HeroCustomAB 
      headline={chosenHeroContent.headline}
      subheadline={chosenHeroContent.subheadline}
      image={heroImageForWidget}
      abTestVariantKey={chosenHeroContent.id} 
      experimentName={HERO_EXPERIMENT_NAME}
    />

    {Astro.cookies.has('astro_developer_toolbar') && (
      <div class="fixed bottom-0 right-0 bg-yellow-300 text-black p-2 m-4 rounded shadow-lg text-xs z-50">
        <p><strong>A/B Test Active (Hero)</strong></p>
        <p>Experiment Name: {HERO_EXPERIMENT_NAME}</p>
        <p>Variant ID: {chosenHeroContent.id}</p>
        <p>Variant Name: {chosenHeroContent.name}</p>
        <p>Headline: {chosenHeroContent.headline}</p>
        <hr class="my-1 border-black" />
        <p><strong>Quiz Path Test Active</strong></p>
        <p>Experiment Name: {QUIZ_EXPERIMENT_NAME}</p>
        <p>Experiment ID (UUID): {quizVariant.experiment_id}</p>
        <p>Variant ID: {quizVariant.id}</p>
        <p>Variant Name: {quizVariant.name}</p>
        <p>Selected Path: {quizUrl}</p>
      </div>
    )}

    {/* --- ISOLATION TEST DIV (Uncomment this and comment out HeroCustomAB and Content below if CTA is still missing) --- */}
    {/*
    <div style="margin: 40px; padding: 40px; border: 5px dashed red; background-color: lightyellow; font-size: 28px; text-align: center;">
      IS THIS TEST DIV VISIBLE? (CTA SECTION TEST)
    </div>
    */}

   <Content
     id="final-cta-quiz-section"
     isReversed={false}
     tagline={finalCtaTagline}
     title={finalCtaTitle}
     image={finalCtaImage}
     classes={{
       container: 'py-16 md:py-24 bg-brand-orange/5 dark:bg-brand-orange/5', // Example class
       panel: 'gap-8 md:gap-12 lg:gap-16 items-center',
       content: 'prose prose-lg dark:prose-invert max-w-none text-center md:text-left',
       image: 'max-w-md lg:max-lg mx-auto md:mx-0 rounded-lg shadow-xl order-first md:order-last',
     }}
   >
     <Fragment slot="content">
       <div class="space-y-4" set:html={finalCtaDescription} />
       <div class="mt-8 flex justify-center md:justify-start">
         <a
           href={finalCtaButton.href}
           class="inline-flex items-center justify-center gap-2 px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-orange-700 dark:focus-visible:ring-offset-slate-900"
           target={finalCtaButton.href.startsWith('http') ? '_blank' : '_self'}
           rel={finalCtaButton.href.startsWith('http') ? 'noopener noreferrer' : ''}
         >
           {finalCtaButton.icon && <Icon name={finalCtaButton.icon} class="w-5 h-5 md:w-6 md:h-6" />}
           <span>{finalCtaButton.text}</span>
         </a>
       </div>
     </Fragment>
   </Content>
  </main>

  <script is:inline define:vars={{ quizVariantInfoToStore: quizVariantInfo }}>
    try {
      sessionStorage.setItem('quizVariant', JSON.stringify(quizVariantInfoToStore));
      localStorage.setItem('quizVariant', JSON.stringify(quizVariantInfoToStore));
      console.log('[Index Page Client Script] Stored quizVariantInfo in localStorage:', quizVariantInfoToStore);
    } catch (e) {
      console.error('[Index Page Client Script] Error storing quizVariantInfo:', e);
    }
  </script>

  <script>
    // Direct import of abTester module
    import('~/lib/abTester').then(() => {
      console.log('[Index Page Client Script] abTester module imported successfully');
      
      // Verify functions are available
      if (typeof window.logClientImpression === 'function') {
        console.log('[Index Page Client Script] ✅ window.logClientImpression available');
      } else {
        console.error('[Index Page Client Script] ❌ window.logClientImpression not available');
      }
    }).catch(error => {
      console.error('[Index Page Client Script] Failed to import abTester module:', error);
    });
  </script>
</Layout>

<script define:vars={{ 
  heroVariantForImpression: chosenHeroContent, 
  heroExperimentNameForImpression: HERO_EXPERIMENT_NAME 
}}>
  // Simplified impression logging without fallback
  function attemptHeroImpressionLog() {
    if (!heroVariantForImpression?.id || !heroVariantForImpression?.experiment_id) {
      console.log('[Index Page Hero Impression] Skipping: Invalid variant data');
      return true;
    }

    if (typeof window.logClientImpression === 'function') {
      console.log('[Index Page Hero Impression] Logging impression for variant:', heroVariantForImpression.id);
      window.logClientImpression(heroVariantForImpression, heroExperimentNameForImpression)
        .then(() => console.log('[Index Page Hero Impression] ✅ Successfully logged'))
        .catch(err => console.error('[Index Page Hero Impression] ❌ Error:', err));
      return true;
    } else {
      console.log('[Index Page Hero Impression] window.logClientImpression not available yet');
      return false;
    }
  }

  // Retry mechanism for impression logging
  function scheduleImpressionLog() {
    if (!attemptHeroImpressionLog()) {
      let attempts = 0;
      const maxAttempts = 10;
      const interval = setInterval(() => {
        attempts++;
        console.log(`[Index Page Hero Impression] Retry ${attempts}/${maxAttempts}`);
        if (attemptHeroImpressionLog() || attempts >= maxAttempts) {
          clearInterval(interval);
          if (attempts >= maxAttempts) {
            console.error('[Index Page Hero Impression] Max attempts reached. Impression not logged.');
          }
        }
      }, 1000);
    }
  }

  // Start impression logging when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', scheduleImpressionLog);
  } else {
    scheduleImpressionLog();
  }
</script>
