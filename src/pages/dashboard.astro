---
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabaseClient';
import type { Session } from '@supabase/supabase-js';
import ABTestManager from '~/components/widgets/ABTestManager.astro';
import ConfirmationModal from '~/components/widgets/ConfirmationModal.astro';
import type { UserProfile, Experiment, Variant, VariantConfig } from '~/types';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import DbVisualizer from '~/components/widgets/DbVisualizer.tsx';
import DbVisualizerClient from '~/components/widgets/DbVisualizerClient.tsx';

// Determine the active tab on the server to prevent content flashing
const { hash } = Astro.url;
let activeTab = 'analytics'; // Default tab

const validTabs = ['analytics', 'campaign-performance', 'ab-testing', 'users', 'user-journey', 'db'];
if (hash) {
  const tabFromHash = hash.substring(1).replace('-panel', '');
  if (validTabs.includes(tabFromHash)) {
    activeTab = tabFromHash;
  }
}
console.log(`Initial active tab determined on server: ${activeTab}`);

const metadata = {
  title: 'Admin Dashboard', // Updated title
  description: 'Manage A/B Tests and view user profiles.', // Updated description
};

let _userProfiles: UserProfile[] | null = null;
let pageError: string | null = null; // Renamed global error to avoid conflict with component prop name
let session: Session | null = null;
let experiments: Experiment[] | null = null;
let abTestError: string | null = null;
let generalMessage: string | null = null; // For general messages like login success

// Helper function to fetch experiments with their stats
async function fetchExperimentsWithStats(openExperimentIdFromUrl?: string | null) {
  const { data: experimentsData, error: experimentsError } = await supabase
    .from('experiments')
    .select(`
      id,
      name,
      description,
      is_active,
      created_at,
      updated_at,
      variants (id, name, description, config_json, created_at, updated_at)
    `)
    .order('created_at', { ascending: false });

  if (experimentsError) {
    console.error('Supabase fetch experiments error:', experimentsError);
    throw new Error(experimentsError.message || 'Failed to fetch experiments.');
  }

  if (!experimentsData) return [];

  const experimentsWithStats = await Promise.all(experimentsData.map(async (exp) => {
    let variantsWithStats: Variant[] = [];
    const currentVariants = exp.variants as Variant[] | undefined || []; 
    if (currentVariants.length > 0) {
      variantsWithStats = await Promise.all(currentVariants.map(async (variant: Variant) => {
        const { count: impressionsCount, error: impressionsError } = await supabase
          .from('impressions')
          .select('*' , { count: 'exact', head: true })
          .eq('variant_id', variant.id);

        const { count: conversionsCount, error: conversionsError } = await supabase
          .from('conversions')
          .select('*' , { count: 'exact', head: true })
          .eq('variant_id', variant.id);
        
        if (impressionsError) console.error(`Error fetching impressions for variant ${variant.id}:`, impressionsError);
        if (conversionsError) console.error(`Error fetching conversions for variant ${variant.id}:`, conversionsError);

        const impressions = impressionsCount || 0;
        const conversions = conversionsCount || 0;
        const conversion_rate = impressions > 0 ? (conversions / impressions) * 100 : 0;

        return {
          ...variant,
          impressions_count: impressions,
          conversions_count: conversions,
          conversion_rate: conversion_rate
        };
      }));
    }
    return {
      ...exp,
      variants: variantsWithStats.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()), // Sort variants by creation date
      managingVariants: openExperimentIdFromUrl === exp.id, // Set based on URL param
      variantsJsonString: JSON.stringify(variantsWithStats.map(v => ({ // Pre-stringify for chart
        name: v.name,
        rate: v.conversion_rate,
        impressions: v.impressions_count,
        conversions: v.conversions_count
      })))
    };
  }));
  return experimentsWithStats;
}

// Server-side code
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('_action')?.toString();

  // Ensure session is fresh for POST actions
  const { data: { session: freshSessionOnPost } } = await supabase.auth.getSession();
  session = freshSessionOnPost;

  if (action === 'login') {
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();
    if (email && password) {
      const { data, error: loginError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (loginError) {
        pageError = loginError.message;
      } else if (data.session) {
        session = data.session;
        // Set a success message and redirect to clear form data and refresh state
        Astro.cookies.set('auth_message', 'Login successful!', { path: '/', maxAge: 5 }); // expires in 5s
        return Astro.redirect(Astro.url.pathname + '#user-profiles-panel', 303);
      }
    } else {
      pageError = 'Email and password are required.';
    }
  } else if (action === 'logout') {
    const { error: logoutError } = await supabase.auth.signOut();
    if (logoutError) {
      pageError = logoutError.message;
    } else {
      session = null;
      Astro.cookies.set('auth_message', 'Logout successful!', { path: '/', maxAge: 5 });
      return Astro.redirect(Astro.url.pathname, 303);
    }
  } 
  // A/B Test Actions require session
  else if (action?.startsWith('create_') || action?.startsWith('update_') || action?.startsWith('delete_')) {
    if (!session) {
      abTestError = "Authentication required. Please log in again to manage A/B tests.";
    } else {
      try {
        // Consolidate A/B test action handling here for clarity
        if (action === 'create_experiment') {
          const name = formData.get('experiment_name')?.toString();
          const description = formData.get('experiment_description')?.toString();
          const is_active = formData.get('experiment_is_active') === 'on';
          if (!name || name.trim() === '') throw new Error('Experiment name is required.');
          const { error: createExpError } = await supabase.from('experiments').insert([{ name, description, is_active }]);
          if (createExpError) throw createExpError;
          return Astro.redirect(Astro.url.pathname + '#ab-testing-panel', 303);
        }
        else if (action === 'create_variant') {
          const experimentId = formData.get('experiment_id')?.toString();
          const name = formData.get('variant_name')?.toString();
          const description = formData.get('variant_description')?.toString();
          const configJsonString = formData.get('variant_config_json')?.toString();
          if (!experimentId || !name || name.trim() === '') throw new Error('Experiment ID and Variant Name are required.');
          let config_json: VariantConfig | null = null;
          if (configJsonString && configJsonString.trim() !== '') {
            try { config_json = JSON.parse(configJsonString); } 
            catch { throw new Error('Invalid JSON for Variant Config.'); }
          }
          const { error: createVarError } = await supabase.from('variants').insert([{ experiment_id: experimentId, name, description, config_json }]);
          if (createVarError) throw createVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        }
        else if (action === 'update_experiment') {
          const experimentId = formData.get('experiment_id')?.toString();
          const name = formData.get('experiment_name')?.toString();
          const description = formData.get('experiment_description')?.toString();
          const is_active = formData.get('experiment_is_active') === 'on';
          if (!experimentId || !name || name.trim() === '') throw new Error('Experiment ID and Name required for update.');
          const { error: updateExpError } = await supabase.from('experiments').update({ name, description, is_active, updated_at: new Date().toISOString() }).eq('id', experimentId);
          if (updateExpError) throw updateExpError;
          return Astro.redirect(Astro.url.pathname + `#experiment-${experimentId}`, 303); // Go to specific experiment
        }
        else if (action === 'update_variant') {
          const experimentId = formData.get('experiment_id')?.toString(); // For redirect
          const variantId = formData.get('variant_id')?.toString();
          const name = formData.get('variant_name')?.toString();
          const description = formData.get('variant_description')?.toString();
          const configJsonString = formData.get('variant_config_json')?.toString();
          if (!variantId || !name || name.trim() === '') throw new Error('Variant ID and Name required for update.');

          const { count: impressionsCount } = await supabase.from('impressions').select('*' , { count: 'exact', head: true }).eq('variant_id', variantId);
          let newConfigJson: VariantConfig | null = null;
          if (configJsonString && configJsonString.trim() !== '') {
            try { newConfigJson = JSON.parse(configJsonString); } 
            catch { throw new Error('Invalid JSON for Variant Config.'); }
          }
          if ((impressionsCount || 0) > 0) {
            const { data: existingVariant } = await supabase.from('variants').select('config_json').eq('id', variantId).single();
            if (JSON.stringify(existingVariant?.config_json) !== JSON.stringify(newConfigJson)) {
              throw new Error('Cannot change config of variant with impressions.');
            }
          }
          const { error: updateVarError } = await supabase.from('variants').update({ name, description, config_json: newConfigJson, updated_at: new Date().toISOString() }).eq('id', variantId);
          if (updateVarError) throw updateVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        }
        else if (action === 'delete_experiment') {
          const experimentId = formData.get('experiment_id')?.toString();
          if (!experimentId) throw new Error('Experiment ID is required for deletion.');
          
          // With ON DELETE CASCADE from experiments.id to variants.experiment_id,
          // and from variants.id to impressions/conversions variant_id,
          // deleting the experiment will automatically cascade to variants, impressions, and conversions.
          // The explicit deletion of variants is no longer needed here.
          
          const { error: deleteExpError } = await supabase.from('experiments').delete().eq('id', experimentId);
          if (deleteExpError) {
            console.error('Error deleting experiment:', deleteExpError);
            // Consider how to surface this error to the user, e.g., setting abTestError
            // For now, re-throwing to be caught by the outer try-catch block.
            throw new Error(`Failed to delete experiment: ${deleteExpError.message}`);
          }
          
          return Astro.redirect(Astro.url.pathname + '#ab-testing-panel', 303);
        }
        else if (action === 'delete_variant') {
          const experimentId = formData.get('experiment_id')?.toString(); // For redirect
          const variantId = formData.get('variant_id')?.toString();
          if (!variantId) throw new Error('Variant ID is required for deletion.');
          const { count: impressionsCount } = await supabase.from('impressions').select('*' , { count: 'exact', head: true }).eq('variant_id', variantId);
          if ((impressionsCount || 0) > 0) throw new Error('Cannot delete variant with existing impressions.');
          const { error: deleteVarError } = await supabase.from('variants').delete().eq('id', variantId);
          if (deleteVarError) throw deleteVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        }
        else if (action === 'delete_user') {
            const userId = formData.get('user_id')?.toString();
            if (!userId) throw new Error('User ID is required for deletion.');
            
            // It's good practice to ensure cascades are set up in the DB
            // or handle related data manually if needed.
            const { error: deleteUserError } = await supabase.from('user_profiles').delete().eq('id', userId);
            
            if (deleteUserError) {
                console.error('Error deleting user:', deleteUserError);
                throw new Error(`Failed to delete user: ${deleteUserError.message}`);
            }
            
            return Astro.redirect(Astro.url.pathname + '#users-panel', 303);
        }
      } catch (e: unknown) {
        if (e instanceof Error) {
          abTestError = e.message;
        } else {
          abTestError = 'An unexpected error occurred during A/B test action.';
        }
        console.error('A/B Test Action Error:', e);
      }
    }
  }
}

// Fetch data on GET requests or after POST redirect
if (Astro.request.method === 'GET') {
  const { data: { session: currentSession } } = await supabase.auth.getSession();
  session = currentSession;

  const authMessage = Astro.cookies.get('auth_message');
  if (authMessage) {
    generalMessage = authMessage.value;
    Astro.cookies.delete('auth_message', { path: '/' });
  }

  if (session) {
    try {
      const { data, error: profileError } = await supabase
        .from('user_profiles')
        .select('id, email, created_at, updated_at'); // Removed last_sign_in_at
      if (profileError) throw profileError;
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _userProfiles = data;
    } catch (e: unknown) {
      if (e instanceof Error) {
        pageError = e.message;
      } else {
        pageError = 'Failed to fetch user profiles due to an unexpected error.';
      }
      console.error('Fetch user profiles error:', e);
    }

    // Fetch experiments only when authenticated
    try {
      const openExperimentId = new URL(Astro.request.url).searchParams.get('openExperiment');
      experiments = await fetchExperimentsWithStats(openExperimentId);
    } catch (e: unknown) {
      if (e instanceof Error) {
        abTestError = e.message;
      } else {
        abTestError = 'Failed to fetch experiments due to an unexpected error.';
      }
      console.error('Fetch experiments error:', e);
    }
  }
}

---
<Layout metadata={metadata}>
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-slate-800 dark:text-white">Admin Dashboard</h1>
      {session && (
        <div class="flex items-center">
          <p class="text-sm text-slate-600 dark:text-slate-300 mr-3">
            Logged in as: <span class="font-semibold">{session.user.email}</span>
          </p>
          <form method="POST" action={Astro.url.pathname + '#user-profiles-panel'}> 
            <input type="hidden" name="_action" value="logout" />
            <button 
              type="submit" 
              class="px-4 py-2 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-red-500 rounded-md hover:bg-red-600 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
            >
              Logout
            </button>
          </form>
        </div>
      )}
    </div>

    {/* Global Error Display - for errors not specific to a tab component, or general page errors */}
    {pageError && (
      <div class="mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg shadow-sm" role="alert">
        <p class="font-bold text-lg">Error:</p>
        <p>{pageError}</p>
      </div>
    )}
    {/* General Message Display - for login/logout success etc */}
    {generalMessage && (
      <div class="mb-6 p-4 bg-green-100 dark:bg-green-800/30 border border-green-400 dark:border-green-600 text-green-700 dark:text-green-300 rounded-lg shadow-sm" role="alert">
        <p>{generalMessage}</p>
      </div>
    )}

    {/* Show tabs only when authenticated */}
    {session && (
      <div class="mb-8">
        <div class="sm:hidden">
          <label for="tabs" class="sr-only">Select a tab</label>
          <select id="tabs" name="tabs" class="block w-full rounded-md border-gray-300 focus:border-blue-500 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white">
            <option>Analytics</option>
            <option>Campaign Performance</option>
            <option selected>A/B Testing</option>
            <option>Users</option>
            <option>User Journey</option>
            <option>DB</option>
          </select>
        </div>
        <div class="hidden sm:block">
          <div class="border-b border-slate-200 dark:border-slate-700">
            <nav class="-mb-px flex space-x-4" aria-label="Tabs">
              <a href="#analytics-panel" id="analytics-tab" 
                 class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center"
                 aria-current="false">
                <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" /><path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" /></svg>
                <span>Analytics</span>
              </a>
              <a href="#campaign-performance-panel" id="campaign-performance-tab" 
                 class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center"
                 aria-current="false">
                <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>
                <span>Campaign Performance</span>
              </a>
              <a href="#ab-testing-panel" id="ab-testing-tab" 
                 class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center"
                 aria-current="false">
                <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M7.5 5a2.5 2.5 0 00-4.995.088A2.5 2.5 0 002.5 7.5v5A2.5 2.5 0 005 15h10a2.5 2.5 0 002.5-2.5v-5A2.5 2.5 0 0015 5H7.5zM5 7.5a.5.5 0 01.5-.5h1.086A.5.5 0 017 7.5v5a.5.5 0 01-.5.5H5.5a.5.5 0 01-.5-.5v-5zm9.5 0a.5.5 0 00-.5-.5H13A.5.5 0 0012.5 7.5v5a.5.5 0 00.5.5h1.086A.5.5 0 00.414-.75L13.5 9.5l1.414-2.75A.5.5 0 0014.5 7.5z" clip-rule="evenodd" /></svg>
                <span>A/B Testing</span>
              </a>
              <a href="#users-panel" id="users-tab"
                 class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center"
                 aria-current="false">
                <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0115 17h2c.552 0 1-.448 1-1v-1a3 3 0 00-3-3h-2.14a6.96 6.96 0 00-1.33 1.94 5.02 5.02 0 01-4.9 0A6.96 6.96 0 005.14 11H3a3 3 0 00-3 3v1c0 .552.448 1 1 1h2a5 5 0 013.93-4.93 6.97 6.97 0 00-1.5 4.33c0 .34.024.673.07 1h3.86z"/></svg>
                <span>Users</span>
              </a>
              <a href="#user-journey-panel" id="user-journey-tab"
                 class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center"
                 aria-current="false">
                <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z" clip-rule="evenodd" /></svg>
                <span>User Journey</span>
              </a>
              <a href="#db-panel" id="db-tab" class="tab-button group whitespace-nowrap py-3 px-3 border-b-2 font-medium text-sm flex items-center" aria-current="false">
                  <svg class="-ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path d="M3 4.25A2.25 2.25 0 015.25 2h9.5A2.25 2.25 0 0117 4.25v2.5A2.25 2.25 0 0114.75 9h-9.5A2.25 2.25 0 013 6.75v-2.5z" />
                      <path d="M3 10.75A2.25 2.25 0 015.25 8.5h9.5A2.25 2.25 0 0117 10.75v2.5A2.25 2.25 0 0114.75 16h-9.5A2.25 2.25 0 013 13.25v-2.5z" />
                  </svg>
                  <span>DB</span>
              </a>
            </nav>
          </div>
        </div>
      </div>
    )}
    
    {/* Content: Login form for unauthenticated, dashboard for authenticated */}
    {!session ? (
      /* Show login form when not authenticated */
      <div class="max-w-md mx-auto mt-12 bg-white dark:bg-slate-800 shadow-xl rounded-lg p-8">
        <h3 class="text-2xl font-semibold text-center text-slate-700 dark:text-slate-200 mb-6">Admin Login Required</h3>
        <p class="text-center text-slate-600 dark:text-slate-400 mb-6">
          Please log in to access the admin dashboard and manage A/B tests.
        </p>
        <form method="POST" action={Astro.url.pathname} class="space-y-6">
          <input type="hidden" name="_action" value="login" />
          <div>
            <label for="email" class="block text-sm font-medium text-slate-700 dark:text-slate-300">Email Address</label>
            <input
              id="email"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="mt-1 block w-full shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
            />
          </div>
          <div>
            <label for="password" class="block text-sm font-medium text-slate-700 dark:text-slate-300">Password</label>
            <input
              id="password"
              name="password"
              type="password"
              autocomplete="current-password"
              required
              class="mt-1 block w-full shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
            />
          </div>
          <button
            type="submit"
            class="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-slate-900 focus:ring-blue-500 transition duration-150 ease-in-out"
          >
            Sign In
          </button>
        </form>
      </div>
    ) : (
      /* Show admin dashboard when authenticated */
      <>
        {/* Tab Panels */}
        <div id="analytics-panel" role="tabpanel" class="tab-panel pt-6 hidden">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">Analytics Overview</h2>
            <p class="text-slate-600 dark:text-slate-400">Comprehensive insights into your A/B testing performance and user engagement.</p>
          </div>

          <div id="analytics-loading" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-slate-600 dark:text-slate-400">Loading analytics data...</p>
          </div>

          <div id="analytics-error" class="hidden mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg">
            <p class="font-bold">Error loading analytics:</p>
            <p id="analytics-error-message"></p>
          </div>

          <div id="analytics-content" class="hidden space-y-6">
            <!-- Performance Overview Card -->
            <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Performance Overview</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Total Impressions:</span>
                  <span id="total-impressions" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Total Conversions:</span>
                  <span id="total-conversions" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Conversion Rate:</span>
                  <span id="conversion-rate" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Avg. Time on Page:</span>
                  <span id="avg-time-on-page" class="font-bold">-</span>
                </div>
              </div>
            </div>

            <!-- Geographic Insights Card -->
            <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Geographic Insights</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Top Country:</span>
                  <span id="top-country" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Country Count:</span>
                  <span id="country-count" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Best Converting:</span>
                  <span id="best-converting-country" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Best Rate:</span>
                  <span id="best-converting-rate" class="font-bold">-</span>
                </div>
              </div>
            </div>

            <!-- Device & Browser Card -->
            <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Device & Browser</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Top Device:</span>
                  <span id="top-device" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Top Browser:</span>
                  <span id="top-browser" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Mobile %:</span>
                  <span id="mobile-percentage" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Platform Diversity:</span>
                  <span id="platform-diversity" class="font-bold text-blue-200">Good</span>
                </div>
              </div>
            </div>

            <!-- Engagement Metrics Card -->
            <div class="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Engagement Metrics</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Avg. Scroll Depth:</span>
                  <span id="avg-scroll-depth" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Bounce Rate:</span>
                  <span id="bounce-rate" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Return Visitors:</span>
                  <span id="return-visitors" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Engagement Score:</span>
                  <span id="engagement-score" class="font-bold text-yellow-200">Good</span>
                </div>
              </div>
            </div>

            <!-- Campaign Tracking Card -->
            <div class="bg-gradient-to-br from-red-500 to-red-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Campaign Tracking</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Top UTM Source:</span>
                  <span id="top-utm-source" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Top Campaign:</span>
                  <span id="top-utm-campaign" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Direct Traffic:</span>
                  <span id="direct-traffic-percentage" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Channel Mix:</span>
                  <span id="channel-mix" class="font-bold text-pink-200">Diverse</span>
                </div>
              </div>
            </div>

            <!-- Statistical Significance Card -->
            <div class="bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-xl p-6 text-white shadow-lg">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold">Statistical Significance</h3>
                <svg class="w-6 h-6 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <div class="flex justify-between">
                  <span class="opacity-90">Confidence Level:</span>
                  <span id="confidence-level" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Sample Size:</span>
                  <span id="sample-size" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Is Significant:</span>
                  <span id="is-significant" class="font-bold">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="opacity-90">Reliability:</span>
                  <span id="reliability" class="font-bold text-cyan-200">High</span>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-8 text-center">
            <button 
              id="refresh-analytics" 
              class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
            >
              Refresh Analytics
            </button>
          </div>
        </div>

        <div id="campaign-performance-panel" role="tabpanel" class="tab-panel pt-6 hidden">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">Campaign Performance</h2>
            <p class="text-slate-600 dark:text-slate-400">Comprehensive UTM tracking, attribution analysis, ROI metrics, and funnel insights.</p>
          </div>

          <div id="campaign-loading" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-slate-600 dark:text-slate-400">Loading campaign performance data...</p>
          </div>

          <div id="campaign-error" class="hidden mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg">
            <p class="font-bold">Error loading campaign data:</p>
            <p id="campaign-error-message"></p>
          </div>

          <div id="campaign-content" class="hidden space-y-8">
            <!-- Attribution Summary -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Attribution Summary</h3>
              <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
                <div class="text-center">
                  <div class="text-2xl font-bold text-blue-600" id="total-attributed-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Total Attributed</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-gray-600" id="direct-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Direct</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-green-600" id="organic-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Organic</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-orange-600" id="paid-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Paid</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-purple-600" id="social-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Social</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-red-600" id="email-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Email</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-indigo-600" id="referral-conversions">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Referral</div>
                </div>
              </div>
            </div>

            <!-- UTM Sources Performance -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Top Traffic Sources</h3>
                <div id="sources-table" class="space-y-3">
                  <!-- Dynamic content will be populated here -->
                </div>
              </div>

              <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Top Mediums</h3>
                <div id="mediums-table" class="space-y-3">
                  <!-- Dynamic content will be populated here -->
                </div>
              </div>
            </div>

            <!-- Campaign Funnel Analysis -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Campaign Funnel Analysis</h3>
              <div class="mb-4">
                <div class="flex justify-between text-sm text-slate-600 dark:text-slate-400 mb-2">
                  <span>Overall Conversion Rate: <span id="overall-funnel-rate" class="font-semibold">-</span></span>
                  <span>Biggest Drop-off: <span id="biggest-dropoff" class="font-semibold">-</span></span>
                </div>
              </div>
              <div id="funnel-stages" class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <!-- Dynamic funnel stages will be populated here -->
              </div>
            </div>

            <!-- Top Campaigns Performance -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Top Campaigns</h3>
              <div class="overflow-x-auto">
                <table class="w-full text-sm">
                  <thead>
                    <tr class="border-b border-slate-200 dark:border-slate-700">
                      <th class="text-left py-3 text-slate-700 dark:text-slate-300">Campaign</th>
                      <th class="text-left py-3 text-slate-700 dark:text-slate-300">Source</th>
                      <th class="text-left py-3 text-slate-700 dark:text-slate-300">Medium</th>
                      <th class="text-right py-3 text-slate-700 dark:text-slate-300">Impressions</th>
                      <th class="text-right py-3 text-slate-700 dark:text-slate-300">Conversions</th>
                      <th class="text-right py-3 text-slate-700 dark:text-slate-300">Rate</th>
                      <th class="text-right py-3 text-slate-700 dark:text-slate-300">ROI</th>
                    </tr>
                  </thead>
                  <tbody id="campaigns-table">
                    <!-- Dynamic content will be populated here -->
                  </tbody>
                </table>
              </div>
            </div>

            <!-- Performance Trends -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Performance Trends (Last 30 Days)</h3>
              <div class="h-64">
                <canvas id="campaign-trends-chart"></canvas>
              </div>
            </div>
          </div>

          <div class="mt-8 text-center">
            <button 
              id="refresh-campaign-performance" 
              class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
            >
              Refresh Campaign Data
            </button>
          </div>
        </div>

        <div id="ab-testing-panel" role="tabpanel" class="tab-panel pt-6 hidden">
          <ABTestManager experiments={experiments} abTestError={abTestError} />
        </div>

        <div id="users-panel" role="tabpanel" aria-labelledby="users-tab" class="p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md mt-4 hidden">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">User Management</h2>
            <p class="text-slate-600 dark:text-slate-400">View user data from the database and ConvertKit.</p>
          </div>
        
          <div id="users-loading" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-slate-600 dark:text-slate-400">Loading user data...</p>
          </div>
        
          <div id="users-error" class="hidden mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg">
            <p class="font-bold">Error loading user data:</p>
            <p id="users-error-message"></p>
          </div>
        
          <div id="users-content" class="hidden space-y-8">
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <!-- Card 1: Total Users -->
                <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-blue-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.653-.122-1.28-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.653.122-1.28.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" /></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-slate-500 dark:text-slate-400">Total Users</p>
                            <p id="total-users" class="text-2xl font-bold text-slate-800 dark:text-white">-</p>
                        </div>
                    </div>
                </div>
                <!-- Card 2: Confirmed Users -->
                <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-green-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-slate-500 dark:text-slate-400">Confirmed</p>
                            <p id="confirmed-users" class="text-2xl font-bold text-slate-800 dark:text-white">-</p>
                        </div>
                    </div>
                </div>
                <!-- Card 3: Unconfirmed Users -->
                <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-yellow-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-slate-500 dark:text-slate-400">Unconfirmed</p>
                            <p id="unconfirmed-users" class="text-2xl font-bold text-slate-800 dark:text-white">-</p>
                        </div>
                    </div>
                </div>
                <!-- Card 4: Cancelled Users -->
                <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-red-500 rounded-md p-3">
                            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" /></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-slate-500 dark:text-slate-400">Cancelled</p>
                            <p id="cancelled-users" class="text-2xl font-bold text-slate-800 dark:text-white">-</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Table -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <div class="flex justify-between items-center mb-4">
                  <h3 class="text-xl font-bold text-slate-800 dark:text-white">User List</h3>
                  <div>
                      <select id="user-filter" name="user-filter" class="block w-full rounded-md border-gray-300 dark:border-slate-600 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm dark:bg-slate-700 dark:text-white">
                          <option value="confirmed" selected>Confirmed Users</option>
                          <option value="all">All Users</option>
                          <option value="unconfirmed">Unconfirmed Users</option>
                          <option value="cancelled">Cancelled Users</option>
                          <option value="complained">Complained Users</option>
                          <option value="bounced">Bounced Users</option>
                          <option value="blocked">Blocked Users</option>
                          <option value="cold">Cold Users</option>
                      </select>
                  </div>
              </div>
        
              <div class="overflow-x-auto">
                <table class="w-full text-sm">
                  <thead>
                    <tr class="border-b border-slate-200 dark:border-slate-700">
                      <th class="text-left py-3 px-2 text-slate-700 dark:text-slate-300">Email</th>
                      <th class="text-left py-3 px-2 text-slate-700 dark:text-slate-300">Kit Status</th>
                      <th class="text-left py-3 px-2 text-slate-700 dark:text-slate-300">DB Status</th>
                      <th class="text-left py-3 px-2 text-slate-700 dark:text-slate-300">Created At</th>
                      <th class="text-left py-3 px-2 text-slate-700 dark:text-slate-300">Last Seen</th>
                      <th class="text-right py-3 px-2 text-slate-700 dark:text-slate-300">Actions</th>
                    </tr>
                  </thead>
                  <tbody id="users-table-body">
                    <tr><td colspan="5" class="text-center py-4">Select a filter to view users.</td></tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
          <div class="mt-8 text-center">
            <button 
              id="refresh-users" 
              class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
            >
              Refresh User Data
            </button>
          </div>
        </div>



        <div id="user-journey-panel" role="tabpanel" class="tab-panel pt-6 hidden">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">User Journey Analytics</h2>
            <p class="text-slate-600 dark:text-slate-400">Comprehensive analysis of user sessions, engagement patterns, bounce rates, and device performance impact.</p>
          </div>

          <div id="user-journey-loading" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-slate-600 dark:text-slate-400">Loading user journey data...</p>
          </div>

          <div id="user-journey-error" class="hidden mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg">
            <p class="font-bold">Error loading user journey data:</p>
            <p id="user-journey-error-message"></p>
          </div>

          <div id="user-journey-content" class="hidden space-y-8">
            <!-- Session Flow Analysis -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Session Flow Analysis</h3>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div class="text-center">
                  <div class="text-2xl font-bold text-blue-600" id="session-count">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Total Sessions</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-green-600" id="avg-session-duration">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Avg Duration (s)</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-purple-600" id="avg-pages-per-session">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Pages/Session</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-orange-600" id="returning-user-rate">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Returning Users %</div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Top Entry Pages</h4>
                  <div id="entry-pages-list" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Top Exit Pages</h4>
                  <div id="exit-pages-list" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Engagement Metrics -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Engagement Metrics</h3>
              <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
                <div class="text-center">
                  <div class="text-2xl font-bold text-blue-600" id="avg-time-on-page-journey">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Avg Time on Page (s)</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-green-600" id="avg-scroll-depth-journey">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Avg Scroll Depth %</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-purple-600" id="engagement-rate-journey">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Engagement Rate %</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-orange-600" id="interaction-rate-journey">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Interaction Rate %</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-red-600" id="content-consumption-score">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Content Score</div>
                </div>
              </div>
              
              <div>
                <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Page Engagement Analysis</h4>
                <div id="page-engagement-list" class="space-y-2">
                  <!-- Dynamic content -->
                </div>
              </div>
            </div>

            <!-- Bounce Rate Analysis -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Bounce Rate Analysis</h3>
              <div class="mb-4">
                <div class="text-center">
                  <div class="text-3xl font-bold text-red-600" id="overall-bounce-rate">-</div>
                  <div class="text-sm text-slate-600 dark:text-slate-400">Overall Bounce Rate</div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Bounce Rate by Page</h4>
                  <div id="bounce-rate-by-page" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Bounce Rate by Source</h4>
                  <div id="bounce-rate-by-source" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Bounce Rate by Device</h4>
                  <div id="bounce-rate-by-device" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Device & Connection Impact -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Device & Connection Impact</h3>
              
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Performance by Device Type</h4>
                  <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                      <thead>
                        <tr class="border-b border-slate-200 dark:border-slate-700">
                          <th class="text-left py-2 text-slate-700 dark:text-slate-300">Device</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Sessions</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Load Time</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Conv %</th>
                        </tr>
                      </thead>
                      <tbody id="device-performance-table">
                        <!-- Dynamic content -->
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Connection Type Analysis</h4>
                  <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                      <thead>
                        <tr class="border-b border-slate-200 dark:border-slate-700">
                          <th class="text-left py-2 text-slate-700 dark:text-slate-300">Connection</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Sessions</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Load Time</th>
                          <th class="text-right py-2 text-slate-700 dark:text-slate-300">Engagement</th>
                        </tr>
                      </thead>
                      <tbody id="connection-analysis-table">
                        <!-- Dynamic content -->
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>

              <div>
                <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Screen Resolution Impact</h4>
                <div class="overflow-x-auto">
                  <table class="w-full text-sm">
                    <thead>
                      <tr class="border-b border-slate-200 dark:border-slate-700">
                        <th class="text-left py-2 text-slate-700 dark:text-slate-300">Resolution</th>
                        <th class="text-right py-2 text-slate-700 dark:text-slate-300">Sessions</th>
                        <th class="text-right py-2 text-slate-700 dark:text-slate-300">Scroll Depth %</th>
                        <th class="text-right py-2 text-slate-700 dark:text-slate-300">Time on Page</th>
                        <th class="text-right py-2 text-slate-700 dark:text-slate-300">Conv Rate %</th>
                      </tr>
                    </thead>
                    <tbody id="resolution-impact-table">
                      <!-- Dynamic content -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <!-- User Behavior Patterns -->
            <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
              <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">User Behavior Patterns</h3>
              
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">New vs Returning Users</h4>
                  <div class="space-y-3">
                    <div class="p-3 bg-slate-50 dark:bg-slate-700 rounded-lg">
                      <div class="flex justify-between">
                        <span class="font-medium">New Users:</span>
                        <span id="new-users-count" class="font-bold">-</span>
                      </div>
                      <div class="text-sm text-slate-600 dark:text-slate-400">
                        Engagement: <span id="new-users-engagement">-</span>% | Conv: <span id="new-users-conversion">-</span>%
                      </div>
                    </div>
                    <div class="p-3 bg-slate-50 dark:bg-slate-700 rounded-lg">
                      <div class="flex justify-between">
                        <span class="font-medium">Returning Users:</span>
                        <span id="returning-users-count" class="font-bold">-</span>
                      </div>
                      <div class="text-sm text-slate-600 dark:text-slate-400">
                        Engagement: <span id="returning-users-engagement">-</span>% | Conv: <span id="returning-users-conversion">-</span>%
                      </div>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Session Frequency</h4>
                  <div id="session-frequency-list" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
                
                <div>
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-3">Engagement Segments</h4>
                  <div id="engagement-segments-list" class="space-y-2">
                    <!-- Dynamic content -->
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-8 text-center">
            <button 
              id="refresh-user-journey" 
              class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
            >
              Refresh User Journey Data
            </button>
          </div>
        </div>

        <!-- DB Visualizer Panel -->
        <div id="db-panel" class="hidden tab-panel p-4 rounded-lg bg-gray-50 dark:bg-gray-800" role="tabpanel" aria-labelledby="db-tab">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white">Database Schema Visualizer</h2>
            <button id="scan-db-btn" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 focus:outline-none dark:focus:ring-blue-800">
              Scan DB
            </button>
          </div>
          <div id="db-visualizer-container" class="relative border border-gray-200 dark:border-gray-700 rounded-lg" style="height: 800px;">
            <DbVisualizerClient client:load />
          </div>
        </div>
        <!-- Settings Panel -->
        <div id="settings-panel" class="hidden tab-panel p-4" role="tabpanel" aria-labelledby="settings-tab">
          <!-- Add your settings content here -->
        </div>
      </>
    )}
    
  </div> {/* End of container div with mx-auto etc. */}

</Layout>

<ConfirmationModal
  id="delete-user-modal"
  title="Delete User"
  message="Are you sure you want to delete this user? All of their associated data will be removed. This action is permanent and cannot be undone."
  confirmButtonText="Yes, Delete User"
/>

<form method="POST" action="#users-panel" id="delete-user-form" class="hidden">
  <input type="hidden" name="_action" value="delete_user" />
  <input type="hidden" name="user_id" id="user-id-to-delete" value="" />
</form>

<style>
  .tab-button {
    @apply border-transparent text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300 hover:border-slate-300 dark:hover:border-slate-500;
  }
  .tab-button.active-tab {
    @apply border-blue-500 text-blue-600 dark:text-blue-400 dark:border-blue-400;
  }
  .tab-button svg {
    @apply text-slate-400 group-hover:text-slate-500 dark:text-slate-500 dark:group-hover:text-slate-400;
  }
  .tab-button.active-tab svg {
    @apply text-blue-500 dark:text-blue-400;
  }
  /* .tab-panel no longer needs border/shadow/rounded if tabs are underlined style */
</style>

<script>
  // Client-side script for tab navigation
  let currentActiveTab: string | null = null; // Store the currently active tab to prevent double initialization
  
  function initializeTabs() {
    const tabs = document.querySelectorAll('.tab-button');
    const panels = document.querySelectorAll('.tab-panel');
    
    // Only initialize tabs if they exist (i.e., user is authenticated)
    if (tabs.length === 0 || panels.length === 0) {
      console.log("Dashboard: No tabs found, skipping tab initialization (user likely not authenticated)");
      return;
    }

    // Determine initial tab with improved logic
    let initialTabId = window.location.hash;
    const params = new URLSearchParams(window.location.search);
    
    console.log(`Tab initialization called. Current hash: "${initialTabId}", Current active: "${currentActiveTab}"`);
    
    // Priority 1: If we already have an active tab and hash is empty, preserve it
    if (currentActiveTab && (!initialTabId || initialTabId === '')) {
        console.log(`Preserving current active tab: ${currentActiveTab}`);
        initialTabId = currentActiveTab;
    }
    // Priority 2: If we have openExperiment param, force A/B testing tab
    else if (params.has('openExperiment')) {
        console.log("Found openExperiment param, forcing A/B testing tab");
        initialTabId = '#ab-testing-panel';
    }
    // Priority 3: Use URL hash if it's a valid tab
    else if (initialTabId && (initialTabId === '#analytics-panel' || initialTabId === '#campaign-performance-panel' || initialTabId === '#ab-testing-panel' || initialTabId === '#users-panel' || initialTabId === '#user-journey-panel' || initialTabId === '#db-panel')) {
        console.log(`Using URL hash tab: ${initialTabId}`);
        // Keep the initialTabId as is
    }
    // Priority 4: Default to Analytics if no valid hash or param
    else {
        console.log("No valid tab found, defaulting to Analytics");
        initialTabId = '#analytics-panel';
    }
    
    // Only proceed if the tab has actually changed
    if (currentActiveTab === initialTabId) {
        console.log(`Tab ${initialTabId} already active, skipping re-initialization`);
        // return; // COMMENTED OUT - was preventing tab display
    }

    const setActiveTab = (targetId: string) => {
      console.log(`Setting active tab to: ${targetId}`);
      currentActiveTab = targetId; // Store the current active tab
      
      tabs.forEach(tab => {
        const tabElement = tab as HTMLAnchorElement;
        if (tabElement.hash === targetId) {
          tabElement.classList.add('active-tab', 'border-blue-500', 'text-blue-600');
          tabElement.classList.remove('border-transparent', 'text-slate-500', 'hover:text-slate-700', 'hover:border-slate-300');
          tabElement.setAttribute('aria-current', 'page');
        } else {
          tabElement.classList.remove('active-tab', 'border-blue-500', 'text-blue-600');
          tabElement.classList.add('border-transparent', 'text-slate-500', 'hover:text-slate-700', 'hover:border-slate-300');
          tabElement.setAttribute('aria-current', 'false');
        }
      });
      
      panels.forEach(panel => {
        if (panel.id === targetId.slice(1)) {
          panel.classList.remove('hidden');
        } else {
          panel.classList.add('hidden');
        }
      });
    };

    tabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = (e.currentTarget as HTMLAnchorElement).hash;
        setActiveTab(targetId);
        
        // If A/B testing tab is now active, and an experiment was opened, clear the openExperiment query param
        // to avoid it persisting if user navigates away and back to this tab manually.
        if (targetId === '#ab-testing-panel') {
            const currentUrl = new URL(window.location.href);
            if (currentUrl.searchParams.has('openExperiment')) {
                currentUrl.searchParams.delete('openExperiment');
                window.history.replaceState({ path: currentUrl.href }, '', currentUrl.pathname + currentUrl.search + currentUrl.hash);
            }
        }
      });
    });

    // Set the active tab
    setActiveTab(initialTabId);
    
    console.log(`Tab initialization complete. Active tab: ${initialTabId}`);
  }

  // Analytics functionality
  async function loadAnalytics() {
    const loadingEl = document.getElementById('analytics-loading');
    const errorEl = document.getElementById('analytics-error');
    const contentEl = document.getElementById('analytics-content');
    const errorMessageEl = document.getElementById('analytics-error-message');

    if (!loadingEl || !errorEl || !contentEl || !errorMessageEl) {
      console.error('Analytics UI elements not found');
      return;
    }

    try {
      // Show loading, hide others
      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      contentEl.classList.add('hidden');

      console.log('Fetching analytics data...');
      const response = await fetch('/api/analytics');
      
      if (!response.ok) {
        throw new Error(`Analytics API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('Analytics data received:', data);

      // Update Performance Overview
      const totalImpressionsEl = document.getElementById('total-impressions');
      const totalConversionsEl = document.getElementById('total-conversions');
      const conversionRateEl = document.getElementById('conversion-rate');
      const avgTimeOnPageEl = document.getElementById('avg-time-on-page');
      
      if (totalImpressionsEl) totalImpressionsEl.textContent = data.performance.totalImpressions.toLocaleString();
      if (totalConversionsEl) totalConversionsEl.textContent = data.performance.totalConversions.toLocaleString();
      if (conversionRateEl) conversionRateEl.textContent = `${data.performance.conversionRate}%`;
      if (avgTimeOnPageEl) avgTimeOnPageEl.textContent = `${data.performance.avgTimeOnPage}s`;

      // Update Geographic Insights
      const topCountryEl = document.getElementById('top-country');
      const countryCountEl = document.getElementById('country-count');
      const bestConvertingCountryEl = document.getElementById('best-converting-country');
      const bestConvertingRateEl = document.getElementById('best-converting-rate');
      
      if (topCountryEl) topCountryEl.textContent = data.geographic.topCountry;
      if (countryCountEl) countryCountEl.textContent = data.geographic.countryCount.toString();
      if (bestConvertingCountryEl) bestConvertingCountryEl.textContent = data.geographic.bestConvertingCountry;
      if (bestConvertingRateEl) bestConvertingRateEl.textContent = `${data.geographic.bestConvertingRate}%`;

      // Update Device & Browser
      const topDeviceEl = document.getElementById('top-device');
      const topBrowserEl = document.getElementById('top-browser');
      const mobilePercentageEl = document.getElementById('mobile-percentage');
      
      if (topDeviceEl) topDeviceEl.textContent = data.device.topDevice;
      if (topBrowserEl) topBrowserEl.textContent = data.device.topBrowser;
      if (mobilePercentageEl) mobilePercentageEl.textContent = `${data.device.mobilePercentage}%`;

      // Update Engagement Metrics
      const avgScrollDepthEl = document.getElementById('avg-scroll-depth');
      const bounceRateEl = document.getElementById('bounce-rate');
      const returnVisitorsEl = document.getElementById('return-visitors');
      
      if (avgScrollDepthEl) avgScrollDepthEl.textContent = `${data.engagement.avgScrollDepth}%`;
      if (bounceRateEl) bounceRateEl.textContent = `${data.engagement.bounceRate}%`;
      if (returnVisitorsEl) returnVisitorsEl.textContent = data.engagement.returnVisitors.toString();

      // Update Campaign Tracking
      const topUtmSourceEl = document.getElementById('top-utm-source');
      const topUtmCampaignEl = document.getElementById('top-utm-campaign');
      const directTrafficPercentageEl = document.getElementById('direct-traffic-percentage');
      
      if (topUtmSourceEl) topUtmSourceEl.textContent = data.campaign.topUtmSource;
      if (topUtmCampaignEl) topUtmCampaignEl.textContent = data.campaign.topUtmCampaign;
      if (directTrafficPercentageEl) directTrafficPercentageEl.textContent = `${data.campaign.directTrafficPercentage}%`;

      // Update Statistical Significance
      const confidenceLevelEl = document.getElementById('confidence-level');
      const sampleSizeEl = document.getElementById('sample-size');
      const isSignificantEl = document.getElementById('is-significant');
      
      if (confidenceLevelEl) confidenceLevelEl.textContent = `${Math.round(data.statistical.confidenceLevel * 100)}%`;
      if (sampleSizeEl) sampleSizeEl.textContent = data.statistical.sampleSize.toLocaleString();
      if (isSignificantEl) isSignificantEl.textContent = data.statistical.isSignificant ? 'Yes' : 'No';

      // Color-code some metrics
      if (conversionRateEl) {
        if (data.performance.conversionRate > 5) {
          conversionRateEl.classList.add('text-green-200');
        } else if (data.performance.conversionRate < 2) {
          conversionRateEl.classList.add('text-red-200');
        }
      }

      if (bounceRateEl) {
        if (data.engagement.bounceRate < 30) {
          bounceRateEl.classList.add('text-green-200');
        } else if (data.engagement.bounceRate > 70) {
          bounceRateEl.classList.add('text-red-200');
        }
      }

      if (isSignificantEl) {
        if (data.statistical.isSignificant) {
          isSignificantEl.classList.add('text-green-200');
        } else {
          isSignificantEl.classList.add('text-red-200');
        }
      }

      // Show content, hide loading
      loadingEl.classList.add('hidden');
      contentEl.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading analytics:', error);
      
      // Show error, hide loading
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
      errorMessageEl.textContent = error.message || 'Failed to load analytics data';
    }
  }

  // Campaign Performance functionality
  async function loadCampaignPerformance() {
    const loadingEl = document.getElementById('campaign-loading');
    const errorEl = document.getElementById('campaign-error');
    const contentEl = document.getElementById('campaign-content');
    const errorMessageEl = document.getElementById('campaign-error-message');

    if (!loadingEl || !errorEl || !contentEl || !errorMessageEl) {
      console.error('Campaign performance UI elements not found');
      return;
    }

    try {
      // Show loading, hide others
      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      contentEl.classList.add('hidden');

      console.log('Fetching campaign performance data...');
      const response = await fetch('/api/campaign-performance');
      
      if (!response.ok) {
        throw new Error(`Campaign Performance API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('Campaign performance data received:', data);

      // Update Attribution Summary
      const totalAttributedConversionsEl = document.getElementById('total-attributed-conversions');
      const directConversionsEl = document.getElementById('direct-conversions');
      const organicConversionsEl = document.getElementById('organic-conversions');
      const paidConversionsEl = document.getElementById('paid-conversions');
      const socialConversionsEl = document.getElementById('social-conversions');
      const emailConversionsEl = document.getElementById('email-conversions');
      const referralConversionsEl = document.getElementById('referral-conversions');
      
      if (totalAttributedConversionsEl) totalAttributedConversionsEl.textContent = data.attributionSummary.totalAttributedConversions.toString();
      if (directConversionsEl) directConversionsEl.textContent = data.attributionSummary.directConversions.toString();
      if (organicConversionsEl) organicConversionsEl.textContent = data.attributionSummary.organicConversions.toString();
      if (paidConversionsEl) paidConversionsEl.textContent = data.attributionSummary.paidConversions.toString();
      if (socialConversionsEl) socialConversionsEl.textContent = data.attributionSummary.socialConversions.toString();
      if (emailConversionsEl) emailConversionsEl.textContent = data.attributionSummary.emailConversions.toString();
      if (referralConversionsEl) referralConversionsEl.textContent = data.attributionSummary.referralConversions.toString();

      // Update Sources Table
      const sourcesTable = document.getElementById('sources-table');
      if (sourcesTable) {
        sourcesTable.innerHTML = data.sources.map(source => `
          <div class="flex justify-between items-center p-3 bg-slate-50 dark:bg-slate-700 rounded-lg">
            <div>
              <div class="font-semibold text-slate-800 dark:text-white">${source.source}</div>
              <div class="text-sm text-slate-600 dark:text-slate-400">ROI: $${source.roi}</div>
            </div>
            <div class="text-right">
              <div class="font-semibold text-slate-800 dark:text-white">${source.conversions}/${source.impressions}</div>
              <div class="text-sm ${source.conversionRate > 3 ? 'text-green-600' : source.conversionRate < 1 ? 'text-red-600' : 'text-slate-600'}">${source.conversionRate}%</div>
            </div>
          </div>
        `).join('');
      }

      // Update Mediums Table
      const mediumsTable = document.getElementById('mediums-table');
      if (mediumsTable) {
        mediumsTable.innerHTML = data.mediums.map(medium => `
          <div class="flex justify-between items-center p-3 bg-slate-50 dark:bg-slate-700 rounded-lg">
            <div>
              <div class="font-semibold text-slate-800 dark:text-white">${medium.medium}</div>
              <div class="text-sm text-slate-600 dark:text-slate-400">Avg Time: ${medium.averageTimeOnPage}s</div>
            </div>
            <div class="text-right">
              <div class="font-semibold text-slate-800 dark:text-white">${medium.conversions}/${medium.impressions}</div>
              <div class="text-sm ${medium.conversionRate > 3 ? 'text-green-600' : medium.conversionRate < 1 ? 'text-red-600' : 'text-slate-600'}">${medium.conversionRate}%</div>
            </div>
          </div>
        `).join('');
      }

      // Update Funnel Analysis
      const overallFunnelRateEl = document.getElementById('overall-funnel-rate');
      const biggestDropoffEl = document.getElementById('biggest-dropoff');
      
      if (overallFunnelRateEl) overallFunnelRateEl.textContent = `${data.funnelAnalysis.overallFunnelConversionRate}%`;
      if (biggestDropoffEl) biggestDropoffEl.textContent = data.funnelAnalysis.biggestDropOff;

      const funnelStages = document.getElementById('funnel-stages');
      if (funnelStages) {
        funnelStages.innerHTML = data.funnelAnalysis.stages.map(stage => `
          <div class="text-center p-4 bg-slate-50 dark:bg-slate-700 rounded-lg">
            <div class="text-2xl font-bold text-slate-800 dark:text-white">${stage.users.toLocaleString()}</div>
            <div class="text-sm font-semibold text-slate-600 dark:text-slate-400">${stage.stage}</div>
            <div class="text-xs text-slate-500 dark:text-slate-500">${stage.conversionRate.toFixed(1)}% rate</div>
            ${stage.dropOffRate > 0 ? `<div class="text-xs text-red-500">${stage.dropOffRate.toFixed(1)}% drop-off</div>` : ''}
          </div>
        `).join('');
      }

      // Update Campaigns Table
      const campaignsTable = document.getElementById('campaigns-table');
      if (campaignsTable) {
        campaignsTable.innerHTML = data.campaigns.map(campaign => `
          <tr class="border-b border-slate-100 dark:border-slate-700">
            <td class="py-3 text-slate-800 dark:text-white">${campaign.campaign}</td>
            <td class="py-3 text-slate-600 dark:text-slate-400">${campaign.source}</td>
            <td class="py-3 text-slate-600 dark:text-slate-400">${campaign.medium}</td>
            <td class="py-3 text-right text-slate-800 dark:text-white">${campaign.impressions.toLocaleString()}</td>
            <td class="py-3 text-right text-slate-800 dark:text-white">${campaign.conversions}</td>
            <td class="py-3 text-right ${campaign.conversionRate > 3 ? 'text-green-600' : campaign.conversionRate < 1 ? 'text-red-600' : 'text-slate-800 dark:text-white'}">${campaign.conversionRate}%</td>
            <td class="py-3 text-right text-slate-800 dark:text-white">$${campaign.roi}</td>
          </tr>
        `).join('');
      }

      // Show content, hide loading
      loadingEl.classList.add('hidden');
      contentEl.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading campaign performance:', error);
      
      // Show error, hide loading
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
      errorMessageEl.textContent = error.message || 'Failed to load campaign performance data';
    }
  }

  // Initialize tabs on initial page load and after Astro view transitions
  document.addEventListener('astro:page-load', () => {
    console.log("Dashboard astro:page-load: Initializing tabs...");
    initializeTabs();
    
    // Load content for the currently active tab (determined by initializeTabs)
    // Get the hash AFTER tabs are initialized since initializeTabs may set it
    const currentHash = window.location.hash;
    console.log(`Loading content for active tab: ${currentHash}`);
    
    if (currentHash === '#analytics-panel') {
      console.log('Loading analytics for analytics panel...');
      loadAnalytics();
    } else if (currentHash === '#campaign-performance-panel') {
      console.log('Loading campaign performance...');
      loadCampaignPerformance();
    } else if (currentHash === '#users-panel') {
      console.log('Loading users...');
      loadUsers();
    } else if (currentHash === '#user-journey-panel') {
      console.log('Loading user journey...');
      loadUserJourney();
    } else if (currentHash === '#db-panel') {
      console.log('Loading DB visualizer...');
      initializeDbTab();
    } else {
      // Fallback: if no hash or unknown hash, and we default to analytics, load it
      console.log('No specific hash found, checking if analytics tab is active...');
      const analyticsTab = document.querySelector('#analytics-panel');
      if (analyticsTab && !analyticsTab.classList.contains('hidden')) {
        console.log('Analytics panel is visible, loading analytics...');
        loadAnalytics();
      }
    }
    // Note: A/B testing content is handled by ABTestManager component
    
    // Add refresh button event listeners
    const refreshBtn = document.getElementById('refresh-analytics');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', loadAnalytics);
    }

    const refreshCampaignBtn = document.getElementById('refresh-campaign-performance');
    if (refreshCampaignBtn) {
      refreshCampaignBtn.addEventListener('click', loadCampaignPerformance);
    }

    const refreshUserJourneyBtn = document.getElementById('refresh-user-journey');
    if (refreshUserJourneyBtn) {
      refreshUserJourneyBtn.addEventListener('click', loadUserJourney);
    }

    const refreshUsersBtn = document.getElementById('refresh-users');
    if (refreshUsersBtn) {
        refreshUsersBtn.addEventListener('click', () => {
            allUsersData = null; // Clear cache
            loadUsers();
        });
    }

    initializeDeleteUserModal(); // Initialize modal logic

    // Load campaign performance when campaign performance tab is clicked
    const campaignPerformanceTab = document.getElementById('campaign-performance-tab');
    if (campaignPerformanceTab) {
      campaignPerformanceTab.addEventListener('click', () => {
        setTimeout(loadCampaignPerformance, 100); // Small delay to ensure tab switch completes
      });
    }

    // Load analytics when analytics tab is clicked
    const analyticsTab = document.getElementById('analytics-tab');
    if (analyticsTab) {
      analyticsTab.addEventListener('click', () => {
        setTimeout(loadAnalytics, 100); // Small delay to ensure tab switch completes
      });
    }

    // Load user journey when user journey tab is clicked
    const userJourneyTab = document.getElementById('user-journey-tab');
    if (userJourneyTab) {
      userJourneyTab.addEventListener('click', () => {
        setTimeout(loadUserJourney, 100); // Small delay to ensure tab switch completes
      });
    }

    // Load users when users tab is clicked
    const usersTab = document.getElementById('users-tab');
    if (usersTab) {
        usersTab.addEventListener('click', () => {
            setTimeout(loadUsers, 100);
        });
    }

    // Load DB visualizer when DB tab is clicked
    const dbTab = document.getElementById('db-tab');
    if (dbTab) {
      dbTab.addEventListener('click', () => {
        setTimeout(initializeDbTab, 100); // Small delay to ensure tab switch completes
      });
    }
  });

  // Handle popstate for browser back/forward for tabs
  window.addEventListener('popstate', () => {
    // Only handle tab navigation if tabs exist (user is authenticated)
    const tabs = document.querySelectorAll('.tab-button');
    if (tabs.length === 0) {
      console.log("Dashboard: No tabs found on popstate, skipping tab navigation");
      return;
    }
    
    let hash = window.location.hash;
    if (!hash || (hash !== '#analytics-panel' && hash !== '#campaign-performance-panel' && hash !== '#ab-testing-panel' && hash !== '#users-panel' && hash !== '#user-journey-panel' && hash !== '#db-panel')) {
      hash = '#analytics-panel'; // Default to Analytics tab
    }
    // initializeTabs() already contains setActiveTab which reads the hash.
    // So, re-initializing tabs should correctly set the active tab based on the new hash.
    initializeTabs();
    
    // Load analytics if analytics tab becomes active
    if (hash === '#analytics-panel') {
      loadAnalytics();
    }

    // Load campaign performance if campaign performance tab becomes active
    if (hash === '#campaign-performance-panel') {
      loadCampaignPerformance();
    }

    // Load user journey if user journey tab becomes active
    if (hash === '#user-journey-panel') {
      loadUserJourney();
    }

    // Load users if users tab becomes active
    if (hash === '#users-panel') {
        loadUsers();
    }

    // Load DB visualizer if DB tab becomes active
    if (hash === '#db-panel') {
      initializeDbTab();
    }
  });

  // User Journey functionality
  async function loadUserJourney() {
    const loadingEl = document.getElementById('user-journey-loading');
    const errorEl = document.getElementById('user-journey-error');
    const contentEl = document.getElementById('user-journey-content');
    const errorMessageEl = document.getElementById('user-journey-error-message');

    if (!loadingEl || !errorEl || !contentEl || !errorMessageEl) {
      console.error('User Journey UI elements not found');
      return;
    }

    try {
      // Show loading, hide others
      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      contentEl.classList.add('hidden');

      console.log('Fetching user journey data...');
      const response = await fetch('/api/user-journey');
      
      if (!response.ok) {
        throw new Error(`User Journey API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('User journey data received:', data);

      // Update Session Flow Analysis
      const sessionCountEl = document.getElementById('session-count');
      const avgSessionDurationEl = document.getElementById('avg-session-duration');
      const avgPagesPerSessionEl = document.getElementById('avg-pages-per-session');
      const returningUserRateEl = document.getElementById('returning-user-rate');
      
      if (sessionCountEl) sessionCountEl.textContent = data.sessionFlowAnalysis.sessionCount.toLocaleString();
      if (avgSessionDurationEl) avgSessionDurationEl.textContent = data.sessionFlowAnalysis.averageSessionDuration.toString();
      if (avgPagesPerSessionEl) avgPagesPerSessionEl.textContent = data.sessionFlowAnalysis.averagePagesPerSession.toFixed(1);
      if (returningUserRateEl) returningUserRateEl.textContent = `${data.sessionFlowAnalysis.returningUserRate}%`;

      // Update Entry Pages
      const entryPagesList = document.getElementById('entry-pages-list');
      if (entryPagesList) {
        entryPagesList.innerHTML = data.sessionFlowAnalysis.topEntryPages.map(page => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${page.page}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${page.sessions} sessions • ${page.bounceRate.toFixed(1)}% bounce • ${page.avgTimeOnPage.toFixed(1)}s avg
            </div>
          </div>
        `).join('');
      }

      // Update Exit Pages
      const exitPagesList = document.getElementById('exit-pages-list');
      if (exitPagesList) {
        exitPagesList.innerHTML = data.sessionFlowAnalysis.topExitPages.map(page => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${page.page}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${page.exits} exits • ${page.exitRate.toFixed(1)}% exit rate
            </div>
          </div>
        `).join('');
      }

      // Update Engagement Metrics
      const avgTimeOnPageJourneyEl = document.getElementById('avg-time-on-page-journey');
      const avgScrollDepthJourneyEl = document.getElementById('avg-scroll-depth-journey');
      const engagementRateJourneyEl = document.getElementById('engagement-rate-journey');
      const interactionRateJourneyEl = document.getElementById('interaction-rate-journey');
      const contentConsumptionScoreEl = document.getElementById('content-consumption-score');
      
      if (avgTimeOnPageJourneyEl) avgTimeOnPageJourneyEl.textContent = data.engagementMetrics.averageTimeOnPage.toString();
      if (avgScrollDepthJourneyEl) avgScrollDepthJourneyEl.textContent = `${data.engagementMetrics.averageScrollDepth}%`;
      if (engagementRateJourneyEl) engagementRateJourneyEl.textContent = `${data.engagementMetrics.engagementRate}%`;
      if (interactionRateJourneyEl) interactionRateJourneyEl.textContent = `${data.engagementMetrics.interactionRate}%`;
      if (contentConsumptionScoreEl) contentConsumptionScoreEl.textContent = data.engagementMetrics.contentConsumptionScore.toString();

      // Update Page Engagement
      const pageEngagementList = document.getElementById('page-engagement-list');
      if (pageEngagementList) {
        pageEngagementList.innerHTML = data.engagementMetrics.engagementByPage.map(page => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${page.page}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${page.avgTimeOnPage}s • ${page.avgScrollDepth}% scroll • Score: ${page.engagementScore} • ${page.interactions} interactions
            </div>
          </div>
        `).join('');
      }

      // Update Bounce Rate Analysis
      const overallBounceRateEl = document.getElementById('overall-bounce-rate');
      if (overallBounceRateEl) overallBounceRateEl.textContent = `${data.bounceRateAnalysis.overallBounceRate}%`;

      // Bounce Rate by Page
      const bounceRateByPageEl = document.getElementById('bounce-rate-by-page');
      if (bounceRateByPageEl) {
        bounceRateByPageEl.innerHTML = data.bounceRateAnalysis.bounceRateByPage.map(page => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${page.page}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${page.bounceRate.toFixed(1)}% bounce (${page.sessions} sessions)
            </div>
          </div>
        `).join('');
      }

      // Bounce Rate by Source
      const bounceRateBySourceEl = document.getElementById('bounce-rate-by-source');
      if (bounceRateBySourceEl) {
        bounceRateBySourceEl.innerHTML = data.bounceRateAnalysis.bounceRateBySource.map(source => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${source.source}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${source.bounceRate.toFixed(1)}% bounce (${source.sessions} sessions)
            </div>
          </div>
        `).join('');
      }

      // Bounce Rate by Device
      const bounceRateByDeviceEl = document.getElementById('bounce-rate-by-device');
      if (bounceRateByDeviceEl) {
        bounceRateByDeviceEl.innerHTML = data.bounceRateAnalysis.bounceRateFactors.deviceType.map(device => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${device.device}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${device.bounceRate.toFixed(1)}% bounce rate
            </div>
          </div>
        `).join('');
      }

      // Device Performance Table
      const devicePerformanceTable = document.getElementById('device-performance-table');
      if (devicePerformanceTable) {
        devicePerformanceTable.innerHTML = data.deviceConnectionImpact.performanceByDevice.map(device => `
          <tr class="border-b border-slate-100 dark:border-slate-700">
            <td class="py-2 text-slate-800 dark:text-white">${device.deviceType}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${device.sessions}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${device.avgLoadTime}s</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${device.conversionRate}%</td>
          </tr>
        `).join('');
      }

      // Connection Analysis Table
      const connectionAnalysisTable = document.getElementById('connection-analysis-table');
      if (connectionAnalysisTable) {
        connectionAnalysisTable.innerHTML = data.deviceConnectionImpact.connectionTypeAnalysis.map(conn => `
          <tr class="border-b border-slate-100 dark:border-slate-700">
            <td class="py-2 text-slate-800 dark:text-white">${conn.connectionType}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${conn.sessions}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${conn.avgLoadTime}s</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${conn.engagementScore}</td>
          </tr>
        `).join('');
      }

      // Resolution Impact Table
      const resolutionImpactTable = document.getElementById('resolution-impact-table');
      if (resolutionImpactTable) {
        resolutionImpactTable.innerHTML = data.deviceConnectionImpact.screenResolutionImpact.map(res => `
          <tr class="border-b border-slate-100 dark:border-slate-700">
            <td class="py-2 text-slate-800 dark:text-white">${res.resolution}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${res.sessions}</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${res.scrollDepth.toFixed(1)}%</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${res.timeOnPage.toFixed(1)}s</td>
            <td class="py-2 text-right text-slate-800 dark:text-white">${res.conversionRate.toFixed(2)}%</td>
          </tr>
        `).join('');
      }

      // User Behavior Patterns
      const newUsersCountEl = document.getElementById('new-users-count');
      const newUsersEngagementEl = document.getElementById('new-users-engagement');
      const newUsersConversionEl = document.getElementById('new-users-conversion');
      const returningUsersCountEl = document.getElementById('returning-users-count');
      const returningUsersEngagementEl = document.getElementById('returning-users-engagement');
      const returningUsersConversionEl = document.getElementById('returning-users-conversion');
      
      if (newUsersCountEl) newUsersCountEl.textContent = data.userBehaviorPatterns.newVsReturning.newUsers.count.toString();
      if (newUsersEngagementEl) newUsersEngagementEl.textContent = data.userBehaviorPatterns.newVsReturning.newUsers.avgEngagement.toFixed(1);
      if (newUsersConversionEl) newUsersConversionEl.textContent = data.userBehaviorPatterns.newVsReturning.newUsers.conversionRate.toFixed(2);
      if (returningUsersCountEl) returningUsersCountEl.textContent = data.userBehaviorPatterns.newVsReturning.returningUsers.count.toString();
      if (returningUsersEngagementEl) returningUsersEngagementEl.textContent = data.userBehaviorPatterns.newVsReturning.returningUsers.avgEngagement.toFixed(1);
      if (returningUsersConversionEl) returningUsersConversionEl.textContent = data.userBehaviorPatterns.newVsReturning.returningUsers.conversionRate.toFixed(2);

      // Session Frequency
      const sessionFrequencyList = document.getElementById('session-frequency-list');
      if (sessionFrequencyList) {
        sessionFrequencyList.innerHTML = data.userBehaviorPatterns.sessionFrequency.map(freq => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${freq.frequency}</div>
            <div class="text-slate-600 dark:text-slate-400">
              ${freq.userCount} users • $${freq.avgLifetimeValue} LTV
            </div>
          </div>
        `).join('');
      }

      // Engagement Segments
      const engagementSegmentsList = document.getElementById('engagement-segments-list');
      if (engagementSegmentsList) {
        engagementSegmentsList.innerHTML = data.userBehaviorPatterns.engagementSegments.map(segment => `
          <div class="p-2 bg-slate-50 dark:bg-slate-700 rounded text-sm">
            <div class="font-medium">${segment.segment}</div>
            <div class="text-slate-600 dark:text-slate-400 text-xs">
              ${segment.characteristics}
            </div>
            <div class="text-slate-600 dark:text-slate-400">
              ${segment.userCount} users • ${segment.conversionRate.toFixed(2)}% conv
            </div>
          </div>
        `).join('');
      }

      // Show content, hide loading
      loadingEl.classList.add('hidden');
      contentEl.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading user journey:', error);
      
      // Show error, hide loading
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
      errorMessageEl.textContent = error.message || 'Failed to load user journey data';
    }
  }

  // User Management functionality
  interface UserData {
    summary: {
      total: number;
      confirmed: number;
      unconfirmed: number;
      cancelled: number;
    };
    users: Array<{
      id: string | null;
      email: string;
      kit_status: string;
      kit_status_color: string;
      db_status: string;
      db_status_color: string;
      created_at: string;
      last_seen: string | null;
    }>;
  }
  let allUsersData: UserData | null = null; // Cache for user data

  function renderUsersTable(filter: string) {
    const tableBody = document.getElementById('users-table-body');
    if (!tableBody || !allUsersData) return;

    const filteredUsers = allUsersData.users.filter(user => {
        if (filter === 'all') return true;
        return user.kit_status === filter;
    });

    if (filteredUsers.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="5" class="text-center py-4">No users found for this filter.</td></tr>`;
        return;
    }

    tableBody.innerHTML = filteredUsers.map(user => `
      <tr 
        class="border-b border-slate-100 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-700/50 cursor-pointer"
        data-user-id="${user.id}"
      >
        <td class="py-2 px-2 text-slate-800 dark:text-white">${user.email}</td>
        <td class="py-2 px-2 text-slate-600 dark:text-slate-400">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.kit_status_color || 'bg-gray-100 text-gray-800'}">
              ${user.kit_status || 'N/A'}
            </span>
        </td>
        <td class="py-2 px-2 text-slate-600 dark:text-slate-400">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.db_status_color || 'bg-gray-100 text-blue-800'}">
              ${user.db_status || 'N/A'}
            </span>
        </td>
        <td class="py-2 px-2 text-slate-600 dark:text-slate-400">${user.created_at ? new Date(user.created_at).toLocaleDateString() : 'N/A'}</td>
        <td class="py-2 px-2 text-slate-600 dark:text-slate-400">${user.last_seen ? new Date(user.last_seen).toLocaleDateString() : 'N/A'}</td>
        <td class="py-2 px-2 text-right">
          ${user.id ? `
              <button type="button" class="p-1 text-red-600 hover:text-red-800 dark:text-red-500 dark:hover:text-red-400 focus:outline-none delete-user-btn" data-user-id="${user.id}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
          ` : ''}
        </td>
      </tr>
    `).join('');
  }

  async function loadUsers() {
    const loadingEl = document.getElementById('users-loading');
    const errorEl = document.getElementById('users-error');
    const contentEl = document.getElementById('users-content');
    const errorMessageEl = document.getElementById('users-error-message');
    const filterDropdown = document.getElementById('user-filter') as HTMLSelectElement;

    if (!loadingEl || !errorEl || !contentEl || !errorMessageEl || !filterDropdown) {
      console.error('User management UI elements not found');
      return;
    }

    // If data is already cached, just render table and return
    if (allUsersData) {
        renderUsersTable(filterDropdown.value);
        contentEl.classList.remove('hidden');
        loadingEl.classList.add('hidden');
        errorEl.classList.add('hidden');
        return;
    }

    try {
      // Show loading, hide others
      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      contentEl.classList.add('hidden');

      console.log('Fetching user data...');
      const response = await fetch('/api/users');
      
      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Users API error: ${response.status} ${response.statusText} - ${errorData}`);
      }

      const data = await response.json();
      allUsersData = data; // Cache data
      console.log('User data received:', data);

      // Update summary cards
      const totalUsersEl = document.getElementById('total-users');
      const confirmedUsersEl = document.getElementById('confirmed-users');
      const unconfirmedUsersEl = document.getElementById('unconfirmed-users');
      const cancelledUsersEl = document.getElementById('cancelled-users');

      if (totalUsersEl) totalUsersEl.textContent = data.summary.total.toLocaleString();
      if (confirmedUsersEl) confirmedUsersEl.textContent = data.summary.confirmed.toLocaleString();
      if (unconfirmedUsersEl) unconfirmedUsersEl.textContent = data.summary.unconfirmed.toLocaleString();
      if (cancelledUsersEl) cancelledUsersEl.textContent = data.summary.cancelled.toLocaleString();
      
      // Render table with default filter
      renderUsersTable(filterDropdown.value);

      // Add event listener to filter dropdown
      filterDropdown.onchange = (e) => {
        renderUsersTable((e.target as HTMLSelectElement).value);
      };

      // Show content, hide loading
      loadingEl.classList.add('hidden');
      contentEl.classList.remove('hidden');

    } catch (error) {
      console.error('Error loading user data:', error);
      
      // Show error, hide loading
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
      errorMessageEl.textContent = error.message || 'Failed to load user data';
    }
  }

  function initializeDeleteUserModal() {
    const modal = document.getElementById('delete-user-modal');
    const confirmBtn = document.getElementById('delete-user-modal-confirm-btn');
    const cancelBtn = document.getElementById('delete-user-modal-cancel-btn');
    const backdrop = document.getElementById('delete-user-modal-backdrop');
    const deleteForm = document.getElementById('delete-user-form') as HTMLFormElement;
    const userIdInput = document.getElementById('user-id-to-delete') as HTMLInputElement;
    const usersTableBody = document.getElementById('users-table-body');

    if (!modal || !confirmBtn || !cancelBtn || !deleteForm || !userIdInput || !usersTableBody) {
      console.error('Delete modal elements not found. Aborting initialization.');
      return;
    }

    let userIdToDelete: string | null = null;

    const showModal = (show: boolean) => {
      if (show) {
        modal?.classList.remove('hidden');
      } else {
        modal?.classList.add('hidden');
      }
    };

    // Use event delegation for delete buttons
    usersTableBody.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      const deleteButton = target.closest('.delete-user-btn');
      
      if (deleteButton) {
        // Handle delete button click
        event.preventDefault();
        userIdToDelete = deleteButton.getAttribute('data-user-id');
        if (userIdToDelete) {
          showModal(true);
        }
      } else {
        // Handle row click for navigation
        const row = target.closest('tr');
        if (row && row.dataset.userId) {
          window.location.href = `/dashboard/user/${row.dataset.userId}`;
        }
      }
    });

    confirmBtn.addEventListener('click', () => {
      if (userIdToDelete && userIdInput && deleteForm) {
        userIdInput.value = userIdToDelete;
        deleteForm.submit();
      }
      showModal(false);
    });

    cancelBtn.addEventListener('click', () => showModal(false));
    backdrop?.addEventListener('click', () => showModal(false));
  }

  // --- DB VISUALIZER LOGIC ---

  // Attaches the click listener to the scan button.
  function setupScanButtonListener() {
      const scanButton = document.getElementById('scan-db-btn');
      if (scanButton && scanButton.dataset.listenerAttached !== 'true') {
          scanButton.addEventListener('click', async () => {
              const scanBtn = document.getElementById('scan-db-btn') as HTMLButtonElement;
              const scanStatus = document.getElementById('db-scan-status');
              
              if (!scanBtn || !scanStatus) return;

              scanStatus.textContent = 'Scanning database...';
              scanBtn.disabled = true;
              scanBtn.classList.add('opacity-50');

              try {
                  const response = await fetch('/api/db/scan', { method: 'POST' });
                  const result = await response.json();
                  if (!response.ok) throw new Error(result.message || 'Scan failed');
                  
                  scanStatus.textContent = 'Scan successful! Loading schema...';
                  await new Promise(resolve => setTimeout(resolve, 500)); 
                  await initializeDbTab();

              } catch (error) {
                  scanStatus.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;
              } finally {
                  scanBtn.disabled = false;
                  scanBtn.classList.remove('opacity-50');
              }
          });
          scanButton.dataset.listenerAttached = 'true';
      }
  }

  // Initializes the DB Visualizer tab.
  async function initializeDbTab() {
      const scanBtn = document.getElementById('scan-db-btn') as HTMLButtonElement;
      const scanStatus = document.getElementById('db-scan-status');
      
      if (!scanBtn || !scanStatus) return;

      setupScanButtonListener();

      scanStatus.textContent = 'Checking for existing schema...';
      scanBtn.style.display = 'none';

      try {
          const res = await fetch('/db-schema.json?t=' + new Date().getTime());
          if (!res.ok) throw new Error('Schema file not found.');
          
          const schema = await res.json();
          
          // Dispatch an event with the schema data for the client component to receive
          document.dispatchEvent(new CustomEvent('db-schema-loaded', { detail: schema }));
          
          scanStatus.textContent = 'Schema loaded successfully.';
          scanBtn.style.display = 'block'; // Show scan button to allow re-scanning
          
      } catch (error) {
          scanStatus.textContent = `Ready to scan. ${error instanceof Error ? error.message : ''}`;
          scanBtn.style.display = 'block';
      }
  }

  const scanDbBtn = document.getElementById('scan-db-btn');

  if (scanDbBtn) {
    scanDbBtn.addEventListener('click', async () => {
      const statusEl = document.createElement('span');
      statusEl.textContent = 'Scanning...';
      scanDbBtn.parentElement?.appendChild(statusEl);
      scanDbBtn.setAttribute('disabled', 'true');

      try {
        const response = await fetch('/api/db/scan', { method: 'POST' });
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to scan.');
        }

        // Notify the client component to reload the schema
        document.dispatchEvent(new CustomEvent('db-schema-loaded'));
        statusEl.textContent = 'Scan complete!';

      } catch (error) {
        console.error('Scan failed:', error);
        statusEl.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;
      } finally {
        scanDbBtn.removeAttribute('disabled');
        setTimeout(() => statusEl.remove(), 3000);
      }
    });
  }
</script> 