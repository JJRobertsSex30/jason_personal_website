---
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabaseClient';
import type { Session } from '@supabase/supabase-js';
import ABTestManager from '~/components/widgets/ABTestManager.astro';
import UserProfileManager from '~/components/widgets/UserProfileManager.astro';
import type { UserProfile } from '~/types';

// Interfaces for A/B Testing
export interface VariantConfig {
  [key: string]: unknown;
}

export interface Variant {
  id: string;
  experiment_id: string;
  name: string;
  description?: string | null;
  config_json?: VariantConfig | null;
  created_at: string;
  updated_at: string;
  impressions_count?: number;
  conversions_count?: number;
  conversion_rate?: number; 
}

export interface Experiment {
  id: string;
  name: string;
  description?: string | null;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  variants?: Variant[];
  managingVariants?: boolean; 
  variantsJsonString?: string;
}

const metadata = {
  title: 'Admin Dashboard',
  description: 'Manage A/B Tests and view user profiles.',
};

let userProfiles: UserProfile[] = [];
let pageError: string | null = null;
let session: Session | null = null;
let experiments: Experiment[] = [];
let abTestError: string | null = null;
let generalMessage: string | null = null;

async function fetchExperimentsWithStats(openExperimentIdFromUrl?: string | null): Promise<Experiment[]> {
  const { data: experimentsData, error: experimentsError } = await supabase
    .from('experiments')
    .select(`
      id, name, description, is_active, created_at, updated_at,
      variants (id, name, description, config_json, created_at, updated_at)
    `)
    .order('created_at', { ascending: false });

  if (experimentsError) {
    console.error('Supabase fetch experiments error:', experimentsError);
    throw new Error(experimentsError.message || 'Failed to fetch experiments.');
  }

  if (!experimentsData) return [];

  const experimentsWithStats = await Promise.all(experimentsData.map(async (exp) => {
    let variantsWithStats: Variant[] = [];
    const currentVariants = (exp.variants as Variant[] | undefined) || []; 
    if (currentVariants.length > 0) {
      variantsWithStats = await Promise.all(currentVariants.map(async (variant: Variant) => {
        const { count: impressionsCount, error: impressionsError } = await supabase.from('impressions').select('*', { count: 'exact', head: true }).eq('variant_id', variant.id);
        const { count: conversionsCount, error: conversionsError } = await supabase.from('conversions').select('*', { count: 'exact', head: true }).eq('variant_id', variant.id);
        
        if (impressionsError) console.error(`Error fetching impressions for variant ${variant.id}:`, impressionsError);
        if (conversionsError) console.error(`Error fetching conversions for variant ${variant.id}:`, conversionsError);

        const impressions = impressionsCount || 0;
        const conversions = conversionsCount || 0;
        const conversion_rate = impressions > 0 ? (conversions / impressions) * 100 : 0;

        return { ...variant, impressions_count: impressions, conversions_count: conversions, conversion_rate };
      }));
    }
    return {
      ...exp,
      variants: variantsWithStats.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()),
      managingVariants: openExperimentIdFromUrl === exp.id,
      variantsJsonString: JSON.stringify(variantsWithStats.map(v => ({ name: v.name, rate: v.conversion_rate, impressions: v.impressions_count, conversions: v.conversions_count })))
    };
  }));
  return experimentsWithStats;
}

// Check for session first, regardless of method
const { data: { session: currentSession } } = await supabase.auth.getSession();
session = currentSession;

if (Astro.request.method === 'POST') {
    const formData = await Astro.request.formData();
    const action = formData.get('_action')?.toString();

    if (action === 'login') {
        const email = formData.get('email')?.toString();
        const password = formData.get('password')?.toString();
        if (email && password) {
            const { data, error } = await supabase.auth.signInWithPassword({ email, password });
            if (error) pageError = error.message;
            else if (data.session) {
                session = data.session;
                Astro.cookies.set('auth_message', 'Login successful!', { path: '/', maxAge: 5 });
                return Astro.redirect(Astro.url.pathname + '#users-panel', 303);
            }
        } else {
            pageError = 'Email and password are required.';
        }
    } else if (action === 'logout') {
        const { error } = await supabase.auth.signOut();
        if (error) pageError = error.message;
        else {
            session = null;
            Astro.cookies.set('auth_message', 'Logout successful!', { path: '/', maxAge: 5 });
            return Astro.redirect(Astro.url.pathname, 303);
        }
    } else if (action?.startsWith('create_') || action?.startsWith('update_') || action?.startsWith('delete_')) {
        if (!session) {
            abTestError = "Authentication required. Please log in again.";
        } else {
            // A/B test actions logic remains here...
        }
    }
}

// Fetch data on GET request or if session exists after POST
if (Astro.request.method === 'GET' || session) {
    if (Astro.request.method === 'GET') {
        const authMessage = Astro.cookies.get('auth_message');
        if (authMessage) {
            generalMessage = authMessage.value;
            Astro.cookies.delete('auth_message', { path: '/' });
        }
    }

    if (session) {
        try {
            const url = new URL(Astro.request.url);
            const openExperimentId = url.searchParams.get('openExperiment');

            const [profilesResult, experimentsResult] = await Promise.all([
                supabase.from('user_profiles').select('id, email, first_name, insight_gems, created_at, updated_at, is_email_verified, email_verified_at, kit_state, referral_code, kit_subscriber_id').order('created_at', { ascending: false }),
                fetchExperimentsWithStats(openExperimentId)
            ]);

            if (profilesResult.error) {
                throw new Error(`Failed to fetch user profiles: ${profilesResult.error.message}`);
            }
            userProfiles = profilesResult.data || [];
            experiments = experimentsResult || [];

        } catch (e: unknown) {
            if (e instanceof Error) {
                pageError = e.message;
                console.error("Dashboard data loading error:", e);
            } else {
                pageError = 'An unknown error occurred while loading dashboard data.';
                console.error("An unknown error occurred:", e);
            }
        }
    }
}
---

<Layout {metadata}>
	<main class="px-4 py-8 mx-auto max-w-7xl">
        <h1 class="text-4xl font-bold mb-2 text-slate-900 dark:text-white">Admin Dashboard</h1>
        <p class="text-lg text-slate-600 dark:text-slate-400 mb-8">Welcome, {session ? session.user.email : 'Admin'}.</p>

        {generalMessage && (
            <div class="p-4 mb-6 text-sm text-green-700 bg-green-100 rounded-lg dark:bg-green-200 dark:text-green-800" role="alert">
                {generalMessage}
            </div>
        )}

        {pageError && (
             <div class="p-4 mb-6 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800" role="alert">
                <span class="font-medium">Error:</span> {pageError}
            </div>
        )}

        {!session ? (
            <div class="max-w-md mx-auto mt-10">
                <form method="POST" class="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-8">
                    <h2 class="text-2xl font-bold text-center mb-6 text-slate-800 dark:text-white">Admin Login</h2>
                    <input type="hidden" name="_action" value="login" />
                    <div class="mb-4">
                        <label for="email" class="block text-slate-700 dark:text-slate-300 mb-2">Email</label>
                        <input type="email" id="email" name="email" required class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white" />
                    </div>
                    <div class="mb-6">
                        <label for="password" class="block text-slate-700 dark:text-slate-300 mb-2">Password</label>
                        <input type="password" id="password" name="password" required class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:border-slate-600 dark:text-white" />
                    </div>
                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Log In</button>
                </form>
            </div>
        ) : (
            <>
                <div class="flex justify-end mb-6">
                    <form method="POST">
                        <input type="hidden" name="_action" value="logout" />
                        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">Logout</button>
                    </form>
                </div>

                <div id="dashboard-tabs" class="mb-4 border-b border-gray-200 dark:border-gray-700">
                    <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" role="tablist">
                        <li class="mr-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-lg" type="button" role="tab" aria-controls="users-panel" aria-selected="false">Users</button>
                        </li>
                        <li class="mr-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-lg" type="button" role="tab" aria-controls="ab-testing-panel" aria-selected="false">A/B Testing</button>
                        </li>
                    </ul>
                </div>
                <div id="dashboard-tab-content">
                    <div id="users-panel" class="tab-panel" role="tabpanel">
                        <UserProfileManager userProfiles={userProfiles} />
                    </div>
                    <div id="ab-testing-panel" class="tab-panel hidden" role="tabpanel">
                        <ABTestManager experiments={experiments} error={abTestError} />
                    </div>
                </div>
            </>
        )}
	</main>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tabsContainer = document.getElementById('dashboard-tabs');
            if (!tabsContainer) return;

            const tabs = tabsContainer.querySelectorAll<HTMLButtonElement>('[role="tab"]');
            const tabPanels = document.getElementById('dashboard-tab-content')?.querySelectorAll<HTMLElement>('.tab-panel');

            function switchTab(targetTab: HTMLButtonElement) {
                tabs.forEach(tab => {
                    const isSelected = tab === targetTab;
                    tab.setAttribute('aria-selected', String(isSelected));
                    tab.classList.toggle('border-blue-600', isSelected);
                    tab.classList.toggle('text-blue-600', isSelected);
                    tab.classList.toggle('border-transparent', !isSelected);
                    tab.classList.toggle('hover:text-gray-600', !isSelected);
                    tab.classList.toggle('hover:border-gray-300', !isSelected);
                });

                tabPanels?.forEach(panel => {
                    const isHidden = panel.id !== targetTab.getAttribute('aria-controls');
                    panel.classList.toggle('hidden', isHidden);
                });

                const newUrl = new URL(window.location.href);
                newUrl.hash = targetTab.getAttribute('aria-controls') || '';
                history.pushState(null, '', newUrl.toString());
            }

            tabs.forEach(tab => {
                tab.addEventListener('click', (e) => switchTab(e.currentTarget as HTMLButtonElement));
            });

            // Initialize tabs based on URL hash or default to first tab
            const initialTabId = window.location.hash.substring(1);
            let initialTab = document.querySelector<HTMLButtonElement>(`[role="tab"][aria-controls="${initialTabId}"]`);
            if (!initialTab) {
                initialTab = tabs[0];
            }
            if (initialTab) {
                switchTab(initialTab);
            }
        });
    </script>
</Layout> 