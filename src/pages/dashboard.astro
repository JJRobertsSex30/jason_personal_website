---
import Layout from '~/layouts/PageLayout.astro';
interface Subscriber {
  id: string;
  email: string;
  quiz_score: number;
  result_type: string;
  referral_id: string;
  referred_by: string | null;
  created_at: string;
  confirmed: boolean;
  custom_fields: Record<string, unknown>;
}

interface Session {
  access_token: string;
  token_type: string;
  expires_in: number;
  expires_at: number;
  refresh_token: string;
  user: {
    id: string;
    email: string;
    phone: string;
  };
}

// Get authentication state from localStorage if available
let session: Session | null = null;
if (typeof window !== 'undefined') {
  const sessionData = window.localStorage.getItem('supabase-session');
  if (sessionData) {
    session = JSON.parse(sessionData) as Session;
  }
}

// Debug session info
console.log('Current session:', session);

// If we have a valid session, proceed with the page
if (session) {
  // Get dashboard data directly from API
  const response = await fetch(new URL('/api/dashboard-data', Astro.request.url), {
    headers: {
      'Authorization': `Bearer ${session.access_token}`
    }
  });
  const data = await response.json();

  if (data.error) {
    console.error('API error:', data.error);
    return new Response(data.error, { status: 500 });
  }

  const subscribers = data.data?.subscribers || [];
  console.log('Fetched subscribers:', subscribers);

  return (
    <Layout>
      <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-6">Dashboard</h1>
        
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Subscriber Statistics</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-gray-50 dark:bg-slate-700 rounded-lg p-6">
              <h3 class="text-lg font-semibold mb-2">Total Subscribers</h3>
              <p class="text-3xl font-bold">{subscribers.length}</p>
            </div>
            <div class="bg-gray-50 dark:bg-slate-700 rounded-lg p-6">
              <h3 class="text-lg font-semibold mb-2">Active Subscribers</h3>
              <p class="text-3xl font-bold">{subscribers.filter(s => s.confirmed).length}</p>
            </div>
          </div>
        </div>

        <div class="bg-white dark:bg-slate-800 rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4">Recent Subscribers</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead class="bg-gray-50 dark:bg-slate-700">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Email</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Quiz Score</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Result Type</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Joined</th>
                </tr>
              </thead>
              <tbody class="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-gray-700">
                {subscribers.map(subscriber => {
                  return (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{subscriber.email}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{subscriber.quiz_score}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{subscriber.result_type}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{new Date(subscriber.created_at).toLocaleDateString()}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  );
}

// If we reach here, we don't have a valid session
console.log('No valid session found, redirecting to login');
return new Response('', { status: 302, headers: { location: '/login' } });
