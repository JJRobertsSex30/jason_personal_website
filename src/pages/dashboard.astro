---
import { createClient } from '@supabase/supabase-js';
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabaseClient';
import type { Session } from '@supabase/supabase-js';
import ConfirmationModal from '~/components/widgets/ConfirmationModal.astro';
import type { Experiment, Variant, VariantConfig, UserProfile } from '~/types';
import { getKitSubscriberByEmail, unsubscribeKitSubscriberByEmail } from '~/lib/convertkit-operations';

import AnalyticsPanel from '~/components/widgets/AnalyticsPanel.astro';
import CampaignPerformancePanel from '~/components/widgets/CampaignPerformancePanel.astro';
import AbTestingPanel from '~/components/widgets/AbTestingPanel.astro';
import UserProfileManager from '~/components/widgets/UserProfileManager.astro';
import UserJourneyPanel from '~/components/widgets/UserJourneyPanel.astro';
import DbVisualizerPanel from '~/components/widgets/DbVisualizerPanel.astro';

// Determine the active tab on the server to prevent content flashing
const { hash } = Astro.url;
let activeTab = 'analytics'; // Default tab

const validTabs = ['analytics', 'campaign-performance', 'ab-testing', 'users', 'user-journey', 'db'];
if (hash) {
  const tabFromHash = hash.substring(1).replace('-panel', '');
  if (validTabs.includes(tabFromHash)) {
    activeTab = tabFromHash;
  }
}

const metadata = {
  title: 'Admin Dashboard',
  description: 'Manage A/B Tests and view user profiles.',
};

let pageError: string | null = null;
let session: Session | null = null;
let experiments: Experiment[] | null = null;
let abTestError: string | null = null;
let generalMessage: string | null = null;
let userProfiles: UserProfile[] | null = null;

async function fetchExperimentsWithStats(openExperimentIdFromUrl?: string | null) {
  const { data: experimentsData, error: experimentsError } = await supabase
    .from('experiments')
    .select(
      `
      id,
      name,
      description,
      is_active,
      created_at,
      updated_at,
      variants (id, name, description, config_json, created_at, updated_at)
    `
    )
    .order('created_at', { ascending: false });

  if (experimentsError) {
    console.error('Supabase fetch experiments error:', experimentsError);
    throw new Error(experimentsError.message || 'Failed to fetch experiments.');
  }

  if (!experimentsData) return [];

  const experimentsWithStats = await Promise.all(
    experimentsData.map(async (exp) => {
      let variantsWithStats: Variant[] = [];
      const currentVariants = (exp.variants as Variant[] | undefined) || [];
      if (currentVariants.length > 0) {
        variantsWithStats = await Promise.all(
          currentVariants.map(async (variant: Variant) => {
            const { count: impressionsCount, error: impressionsError } = await supabase
              .from('impressions')
              .select('*', { count: 'exact', head: true })
              .eq('variant_id', variant.id);

            const { count: conversionsCount, error: conversionsError } = await supabase
              .from('conversions')
              .select('*', { count: 'exact', head: true })
              .eq('variant_id', variant.id);

            if (impressionsError) console.error(`Error fetching impressions for variant ${variant.id}:`, impressionsError);
            if (conversionsError) console.error(`Error fetching conversions for variant ${variant.id}:`, conversionsError);

            const impressions = impressionsCount || 0;
            const conversions = conversionsCount || 0;
            const conversion_rate = impressions > 0 ? (conversions / impressions) * 100 : 0;

            return {
              ...variant,
              impressions_count: impressions,
              conversions_count: conversions,
              conversion_rate: conversion_rate,
            };
          })
        );
      }
      return {
        ...exp,
        variants: variantsWithStats.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()),
        managingVariants: openExperimentIdFromUrl === exp.id,
        variantsJsonString: JSON.stringify(
          variantsWithStats.map((v) => ({
            name: v.name,
            rate: v.conversion_rate,
            impressions: v.impressions_count,
            conversions: v.conversions_count,
          }))
        ),
      };
    })
  );
  return experimentsWithStats;
}

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('_action')?.toString();

  const {
    data: { session: freshSessionOnPost },
  } = await supabase.auth.getSession();
  session = freshSessionOnPost;

  if (action === 'login') {
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();
    if (email && password) {
      const { data, error: loginError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (loginError) {
        pageError = loginError.message;
      } else if (data.session) {
        session = data.session;
        Astro.cookies.set('auth_message', 'Login successful!', { path: '/', maxAge: 5 });
        return Astro.redirect(Astro.url.pathname + '#users-panel', 303);
      }
    } else {
      pageError = 'Email and password are required.';
    }
  } else if (action === 'logout') {
    const { error: logoutError } = await supabase.auth.signOut();
    if (logoutError) {
      pageError = logoutError.message;
    } else {
      session = null;
      Astro.cookies.set('auth_message', 'Logout successful!', { path: '/', maxAge: 5 });
      return Astro.redirect(Astro.url.pathname, 303);
    }
  } else if (action?.startsWith('create_') || action?.startsWith('update_') || action?.startsWith('delete_')) {
    if (!session) {
      abTestError = 'Authentication required. Please log in again to manage A/B tests.';
    } else {
      try {
        if (action === 'create_experiment') {
          const name = formData.get('experiment_name')?.toString();
          const description = formData.get('experiment_description')?.toString();
          const is_active = formData.get('experiment_is_active') === 'on';
          if (!name || name.trim() === '') throw new Error('Experiment name is required.');
          const { error: createExpError } = await supabase.from('experiments').insert([{ name, description, is_active }]);
          if (createExpError) throw createExpError;
          return Astro.redirect(Astro.url.pathname + '#ab-testing-panel', 303);
        } else if (action === 'create_variant') {
          const experimentId = formData.get('experiment_id')?.toString();
          const name = formData.get('variant_name')?.toString();
          const description = formData.get('variant_description')?.toString();
          const configJsonString = formData.get('variant_config_json')?.toString();
          if (!experimentId || !name || name.trim() === '')
            throw new Error('Experiment ID and Variant Name are required.');
          let config_json: VariantConfig | null = null;
          if (configJsonString && configJsonString.trim() !== '') {
            try {
              config_json = JSON.parse(configJsonString);
            } catch {
              throw new Error('Invalid JSON for Variant Config.');
            }
          }
          const { error: createVarError } = await supabase
            .from('variants')
            .insert([{ experiment_id: experimentId, name, description, config_json }]);
          if (createVarError) throw createVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        } else if (action === 'update_experiment') {
          const experimentId = formData.get('experiment_id')?.toString();
          const name = formData.get('experiment_name')?.toString();
          const description = formData.get('experiment_description')?.toString();
          const is_active = formData.get('experiment_is_active') === 'on';
          if (!experimentId || !name || name.trim() === '')
            throw new Error('Experiment ID and Name required for update.');
          const { error: updateExpError } = await supabase
            .from('experiments')
            .update({ name, description, is_active, updated_at: new Date().toISOString() })
            .eq('id', experimentId);
          if (updateExpError) throw updateExpError;
          return Astro.redirect(Astro.url.pathname + `#experiment-${experimentId}`, 303);
        } else if (action === 'update_variant') {
          const experimentId = formData.get('experiment_id')?.toString();
          const variantId = formData.get('variant_id')?.toString();
          const name = formData.get('variant_name')?.toString();
          const description = formData.get('variant_description')?.toString();
          const configJsonString = formData.get('variant_config_json')?.toString();
          if (!variantId || !name || name.trim() === '') throw new Error('Variant ID and Name required for update.');

          const { count: impressionsCount } = await supabase
            .from('impressions')
            .select('*', { count: 'exact', head: true })
            .eq('variant_id', variantId);
          let newConfigJson: VariantConfig | null = null;
          if (configJsonString && configJsonString.trim() !== '') {
            try {
              newConfigJson = JSON.parse(configJsonString);
            } catch {
              throw new Error('Invalid JSON for Variant Config.');
            }
          }
          if ((impressionsCount || 0) > 0) {
            const { data: existingVariant } = await supabase
              .from('variants')
              .select('config_json')
              .eq('id', variantId)
              .single();
            if (JSON.stringify(existingVariant?.config_json) !== JSON.stringify(newConfigJson)) {
              throw new Error('Cannot change config of variant with impressions.');
            }
          }
          const { error: updateVarError } = await supabase
            .from('variants')
            .update({ name, description, config_json: newConfigJson, updated_at: new Date().toISOString() })
            .eq('id', variantId);
          if (updateVarError) throw updateVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        } else if (action === 'delete_experiment') {
          const experimentId = formData.get('experiment_id')?.toString();
          if (!experimentId) throw new Error('Experiment ID is required for deletion.');

          const { error: deleteExpError } = await supabase.from('experiments').delete().eq('id', experimentId);
          if (deleteExpError) {
            console.error('Error deleting experiment:', deleteExpError);
            throw new Error(`Failed to delete experiment: ${deleteExpError.message}`);
          }

          return Astro.redirect(Astro.url.pathname + '#ab-testing-panel', 303);
        } else if (action === 'delete_variant') {
          const experimentId = formData.get('experiment_id')?.toString();
          const variantId = formData.get('variant_id')?.toString();
          if (!variantId) throw new Error('Variant ID is required for deletion.');
          const { count: impressionsCount } = await supabase
            .from('impressions')
            .select('*', { count: 'exact', head: true })
            .eq('variant_id', variantId);
          if ((impressionsCount || 0) > 0) throw new Error('Cannot delete variant with existing impressions.');
          const { error: deleteVarError } = await supabase.from('variants').delete().eq('id', variantId);
          if (deleteVarError) throw deleteVarError;
          return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}#ab-testing-panel`, 303);
        } else if (action === 'hard_delete_user') {
          const userId = formData.get('user_id')?.toString();
          if (!userId) throw new Error('User ID is required for deletion.');

          console.log(`[HARD DELETE] Attempting to delete user: ${userId}`);

          const supabaseAdmin = createClient(
            import.meta.env.SUPABASE_URL!,
            import.meta.env.SUPABASE_SERVICE_ROLE_KEY || import.meta.env.SUPABASE_ANON_KEY // fallback if no service role
          );

          const { data: userProfile, error: profileError } = await supabase
            .from('user_profiles')
            .select('email, kit_subscriber_id')
            .eq('id', userId)
            .single();

          if (profileError && profileError.code !== 'PGRST116') {
            console.error(`[HARD DELETE] Failed to get user profile: ${profileError.message}`);
            pageError = `Failed to get user profile: ${profileError.message}`;
            throw new Error(pageError);
          }

          if (userProfile && userProfile.email && import.meta.env.CONVERTKIT_API_KEY && import.meta.env.CONVERTKIT_API_SECRET) {
            try {
              const kitSubscriber = await getKitSubscriberByEmail(userProfile.email, import.meta.env.CONVERTKIT_API_SECRET);
              if (kitSubscriber) {
                const unsubResult = await unsubscribeKitSubscriberByEmail(userProfile.email, import.meta.env.CONVERTKIT_API_SECRET);
                if (!unsubResult) {
                  console.error(`[HARD DELETE] Failed to unsubscribe user from ConvertKit: ${userProfile.email}`);
                  pageError = `Failed to unsubscribe user from ConvertKit: ${userProfile.email}`;
                  throw new Error(pageError);
                } else {
                  console.log(`[HARD DELETE] Successfully unsubscribed user from ConvertKit: ${userProfile.email}`);
                }
              } else {
                console.log(`[HARD DELETE] No ConvertKit subscriber found for: ${userProfile.email}`);
              }
            } catch (e) {
              console.error(`[HARD DELETE] Error during ConvertKit unsubscribe:`, e);
              pageError = `Error during ConvertKit unsubscribe: ${e instanceof Error ? e.message : e}`;
              throw new Error(pageError);
            }
          }

          try {
            const { error: deleteAuthError } = await supabaseAdmin.auth.admin.deleteUser(userId);
            if (deleteAuthError && deleteAuthError.message !== 'User not found') {
              console.error(`[HARD DELETE] Failed to delete auth user: ${deleteAuthError.message}`);
              pageError = `Failed to delete auth user: ${deleteAuthError.message}`;
              throw new Error(pageError);
            } else {
              console.log(`[HARD DELETE] Auth user deleted or not found: ${userId}`);
            }
          } catch (e) {
            console.error(`[HARD DELETE] Error during auth user delete:`, e);
            pageError = `Error during auth user delete: ${e instanceof Error ? e.message : e}`;
            throw new Error(pageError);
          }

          try {
            const { error: deleteProfileError } = await supabaseAdmin.from('user_profiles').delete().eq('id', userId);
            if (deleteProfileError) {
              console.error(`[HARD DELETE] Failed to delete user profile: ${deleteProfileError.message}`);
              pageError = `Failed to delete user profile: ${deleteProfileError.message}`;
              throw new Error(pageError);
            } else {
              console.log(`[HARD DELETE] User profile deleted: ${userId}`);
            }
          } catch (e) {
            console.error(`[HARD DELETE] Error during user profile delete:`, e);
            pageError = `Error during user profile delete: ${e instanceof Error ? e.message : e}`;
            throw new Error(pageError);
          }

          generalMessage = `User (ID: ${userId}) has been permanently deleted.`;
          return Astro.redirect(Astro.url.pathname + '#users-panel', 303);
        } else if (action === 'soft_delete_user') {
          const userId = formData.get('user_id')?.toString();
          if (!userId) throw new Error('User ID is required for soft deletion.');

          const { data: userProfile, error: profileError } = await supabase
            .from('user_profiles')
            .select('email, kit_subscriber_id')
            .eq('id', userId)
            .single();

          if (profileError) throw new Error(`Failed to get user profile: ${profileError.message}`);

          if (userProfile && userProfile.email && import.meta.env.CONVERTKIT_API_KEY && import.meta.env.CONVERTKIT_API_SECRET) {
            const kitSubscriber = await getKitSubscriberByEmail(userProfile.email, import.meta.env.CONVERTKIT_API_SECRET);
            if (kitSubscriber) {
              await unsubscribeKitSubscriberByEmail(userProfile.email, import.meta.env.CONVERTKIT_API_SECRET);
            }
          }
          
          const { error: softDeleteError } = await supabase
            .from('user_profiles')
            .update({ deleted_at: new Date().toISOString(), kit_state: 'cancelled' })
            .eq('id', userId);

          if (softDeleteError) {
            throw new Error(`Failed to soft-delete user: ${softDeleteError.message}`);
          }
          
          generalMessage = `User (ID: ${userId}) has been archived.`;
          return Astro.redirect(Astro.url.pathname + '#users-panel', 303);
        }
      } catch (e: unknown) {
        if (e instanceof Error) {
          abTestError = e.message;
        } else {
          abTestError = 'An unexpected error occurred during A/B test action.';
        }
        console.error('A/B Test Action Error:', e);
      }
    }
  }
}

if (Astro.request.method === 'GET') {
  const {
    data: { session: currentSession },
  } = await supabase.auth.getSession();
  session = currentSession;

  const authMessage = Astro.cookies.get('auth_message');
  if (authMessage) {
    generalMessage = authMessage.value;
    Astro.cookies.delete('auth_message', { path: '/' });
  }

  if (session) {
    try {
      const { error: profileError } = await supabase.from('user_profiles').select('id'); // Just check for existence
      if (profileError) throw profileError;
    } catch (e: unknown) {
      if (e instanceof Error) {
        pageError = e.message;
      } else {
        pageError = 'Failed to fetch user profiles due to an unexpected error.';
      }
      console.error('Fetch user profiles error:', e);
    }

    try {
      const openExperimentId = new URL(Astro.request.url).searchParams.get('openExperiment');
      experiments = await fetchExperimentsWithStats(openExperimentId);
    } catch (e: unknown) {
      if (e instanceof Error) {
        abTestError = e.message;
      } else {
        abTestError = 'Failed to fetch experiments due to an unexpected error.';
      }
      console.error('Fetch experiments error:', e);
    }

    try {
      const usersResponse = await fetch(new URL('/api/users', Astro.url));
      if (!usersResponse.ok) {
        throw new Error(`Failed to fetch users: ${usersResponse.statusText}`);
      }
      const usersData = await usersResponse.json();
      userProfiles = usersData.users || [];
    } catch (e: unknown) {
      if (e instanceof Error) {
        pageError = (pageError ? pageError + '; ' : '') + e.message;
      } else {
        pageError = (pageError ? pageError + '; ' : '') + 'Failed to fetch users due to an unexpected error.';
      }
      console.error('Fetch users error:', e);
    }
  }
}
---

<Layout metadata={metadata}>
  <div class="container mx-auto max-w-4xl px-4 py-8">
    <div class="mb-6 flex items-center justify-between">
      <h1 class="text-3xl font-bold text-slate-800 dark:text-white">Admin Dashboard</h1>
      {
        session && (
          <div class="flex items-center">
            <p class="mr-3 text-sm text-slate-600 dark:text-slate-300">
              Logged in as: <span class="font-semibold">{session.user.email}</span>
            </p>
            <form method="POST" action={Astro.url.pathname + '#users-panel'}>
              <input type="hidden" name="_action" value="logout" />
              <button
                type="submit"
                class="transform rounded-md bg-red-500 px-4 py-2 text-sm font-medium capitalize tracking-wide text-white transition-colors duration-200 hover:bg-red-600 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-80"
              >
                Logout
              </button>
            </form>
          </div>
        )
      }
    </div>

    {
      pageError && (
        <div
          class="mb-6 rounded-lg border border-red-400 bg-red-100 p-4 text-red-700 shadow-sm dark:border-red-600 dark:bg-red-800/30 dark:text-red-300"
          role="alert"
        >
          <p class="text-lg font-bold">Error:</p>
          <p>{pageError}</p>
        </div>
      )
    }
    {
      generalMessage && (
        <div
          class="mb-6 rounded-lg border border-green-400 bg-green-100 p-4 text-green-700 shadow-sm dark:border-green-600 dark:bg-green-800/30 dark:text-green-300"
          role="alert"
        >
          <p>{generalMessage}</p>
        </div>
      )
    }

    {
      session ? (
        <>
          <div class="mb-8">
            <div class="sm:hidden">
              <label for="tabs-mobile-select" class="sr-only">Select a tab</label>
              <select id="tabs-mobile-select" name="tabs" class="block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                <option value="#analytics-panel">Analytics</option>
                <option value="#campaign-performance-panel">Campaign Performance</option>
                <option value="#ab-testing-panel">A/B Testing</option>
                <option value="#users-panel">Users</option>
                <option value="#user-journey-panel">User Journey</option>
                <option value="#db-visualizer-panel">DB Visualizer</option>
              </select>
            </div>
            <div class="hidden sm:block">
              <div class="border-b border-slate-200 dark:border-slate-700">
                <nav class="-mb-px flex space-x-4" aria-label="Tabs">
                  <a
                    href="#analytics-panel"
                    id="analytics-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'analytics' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                      <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                    </svg>
                    <span>Analytics</span>
                  </a>
                  <a
                    href="#campaign-performance-panel"
                    id="campaign-performance-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'campaign-performance' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zM15.5 1.5a1 1 0 01.5.5v15a1 1 0 11-2 0V2a1 1 0 011.5-.5zM8 5a1 1 0 00-1 1v10a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                    <span>Campaign Performance</span>
                  </a>
                  <a
                    href="#ab-testing-panel"
                    id="ab-testing-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'ab-testing' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M7.5 5a2.5 2.5 0 00-4.995.088A2.5 2.5 0 002.5 7.5v5A2.5 2.5 0 005 15h10a2.5 2.5 0 002.5-2.5v-5A2.5 2.5 0 0015 5H7.5zM5 7.5a.5.5 0 01.5-.5h1.086A.5.5 0 017 7.5v5a.5.5 0 01-.5.5H5.5a.5.5 0 01-.5-.5v-5zm9.5 0a.5.5 0 00-.5-.5H13A.5.5 0 0012.5 7.5v5a.5.5 0 00.5.5h1.086A.5.5 0 00.414-.75L13.5 9.5l1.414-2.75A.5.5 0 0014.5 7.5z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>A/B Testing</span>
                  </a>
                  <a
                    href="#users-panel"
                    id="users-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'users' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0115 17h2c.552 0 1-.448 1-1v-1a3 3 0 00-3-3h-2.14a6.96 6.96 0 00-1.33 1.94 5.02 5.02 0 01-4.9 0A6.96 6.96 0 005.14 11H3a3 3 0 00-3 3v1c0 .552.448 1 1 1h2a5 5 0 013.93-4.93 6.97 6.97 0 00-1.5 4.33c0 .34.024.673.07 1h3.86z" />
                    </svg>
                    <span>Users</span>
                  </a>
                  <a
                    href="#user-journey-panel"
                    id="user-journey-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'user-journey' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>User Journey</span>
                  </a>
                  <a
                    href="#db-visualizer-panel"
                    id="db-tab"
                    class:list={[
                      'tab-button group flex items-center whitespace-nowrap border-b-2 py-3 px-3 text-sm font-medium',
                      { 'active-tab': activeTab === 'db' },
                    ]}
                  >
                    <svg
                      class="-ml-0.5 mr-2 h-5 w-5"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path d="M2 3a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H3a1 1 0 01-1-1V3z" />
                      <path d="M2 7.5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H3a1 1 0 01-1-1v-2z" />
                      <path d="M2 12.5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H3a1 1 0 01-1-1v-2z" />
                    </svg>
                    <span>DB</span>
                  </a>
                </nav>
              </div>
            </div>
          </div>

          <div class="mt-4">
            <div id="analytics-panel" role="tabpanel" class="tab-panel">
              <AnalyticsPanel />
            </div>
            <div id="campaign-performance-panel" role="tabpanel" class="tab-panel">
              <CampaignPerformancePanel />
            </div>
            <div id="ab-testing-panel" role="tabpanel" class="tab-panel">
              <AbTestingPanel experiments={experiments} abTestError={abTestError} />
            </div>
            <div id="users-panel" role="tabpanel" class="tab-panel">
              <UserProfileManager userProfiles={userProfiles || []} />
            </div>
            <div id="user-journey-panel" role="tabpanel" class="tab-panel">
              <UserJourneyPanel />
            </div>
            <div id="db-visualizer-panel" role="tabpanel" class="tab-panel">
              <DbVisualizerPanel />
            </div>
          </div>
        </>
      ) : (
        <div class="mx-auto mt-12 max-w-md rounded-lg bg-white p-8 shadow-xl dark:bg-slate-800">
          <h3 class="mb-6 text-center text-2xl font-semibold text-slate-700 dark:text-slate-200">Admin Login Required</h3>
          <p class="mb-6 text-center text-slate-600 dark:text-slate-400">
            Please log in to access the admin dashboard.
          </p>
          <form method="POST" action={Astro.url.pathname} class="space-y-6">
            <input type="hidden" name="_action" value="login" />
            <div>
              <label for="email" class="block text-sm font-medium text-slate-700 dark:text-slate-300">
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autocomplete="email"
                required
                class="mt-1 block w-full appearance-none rounded-md border border-slate-300 bg-white px-3 py-2.5 text-slate-700 shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-slate-200 dark:placeholder-slate-500"
              />
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-slate-700 dark:text-slate-300">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autocomplete="current-password"
                required
                class="mt-1 block w-full appearance-none rounded-md border border-slate-300 bg-white px-3 py-2.5 text-slate-700 shadow-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-slate-200 dark:placeholder-slate-500"
              />
            </div>
            <button
              type="submit"
              class="flex w-full justify-center rounded-md border border-transparent bg-blue-600 py-2.5 px-4 text-sm font-medium text-white shadow-sm transition duration-150 ease-in-out hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
            >
              Sign In
            </button>
          </form>
        </div>
      )
    }
  </div>

  <ConfirmationModal
    id="delete-user-modal"
    title="Delete User"
    message="Are you sure you want to delete this user? All of their associated data will be removed. This action is permanent and cannot be undone."
    confirmButtonText="Yes, Delete User"
  />

  <ConfirmationModal
    id="soft-delete-user-modal"
    title="Archive User (Soft Delete)"
    message="This will unsubscribe the user from emails and hide them from active lists. Their data will be kept for historical purposes and they can be restored later. Are you sure?"
    confirmButtonText="Yes, Archive User"
  />

  <form method="POST" action={Astro.url.pathname + '#users-panel'} id="delete-user-form">
    <input type="hidden" name="_action" value="hard_delete_user" />
    <input type="hidden" name="user_id" id="user-id-to-delete" value="" />
  </form>

  <form method="POST" action={Astro.url.pathname + '#users-panel'} id="soft-delete-user-form">
    <input type="hidden" name="_action" value="soft_delete_user" />
    <input type="hidden" name="user_id" id="user-id-to-soft-delete" value="" />
  </form>
</Layout>

<style>
  .tab-button {
    @apply border-transparent text-slate-500 hover:border-slate-300 hover:text-slate-700 dark:text-slate-400 dark:hover:border-slate-500 dark:hover:text-slate-300;
  }
  .tab-button.active-tab {
    @apply border-blue-500 text-blue-600 dark:border-blue-400 dark:text-blue-400;
  }
  .tab-button svg {
    @apply text-slate-400 group-hover:text-slate-500 dark:text-slate-500 dark:group-hover:text-slate-400;
  }
  .tab-button.active-tab svg {
    @apply text-blue-500 dark:text-blue-400;
  }
  .tab-panel {
    display: none;
  }
  .tab-panel.is-active {
    display: block;
  }
</style>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    const tabs = document.querySelectorAll('.tab-button');
    const tabPanels = document.querySelectorAll('.tab-panel');
    const mobileTabs = document.getElementById('tabs-mobile-select');

    if (!tabs.length || !tabPanels.length || !mobileTabs) return;

    function setActiveTab(targetId) {
      if (!targetId) return;

      // Update button styles
      tabs.forEach(button => {
        const isCurrent = button.getAttribute('href') === targetId;
        button.classList.toggle('active-tab', isCurrent);
        button.setAttribute('aria-current', isCurrent ? 'page' : 'false');
      });

      // Show/hide panels using the 'is-active' class
      tabPanels.forEach(panel => {
        const isCurrent = '#' + panel.id === targetId;
        panel.classList.toggle('is-active', isCurrent);
      });
      
      // Sync mobile dropdown
      mobileTabs.value = targetId;
      
      // Update URL hash without page jump
      if (history.pushState) {
        history.pushState(null, '', targetId);
      } else {
        window.location.hash = targetId;
      }
    }

    // Set initial state from URL or default to first tab
    const validTabIds = Array.from(tabs).map(t => t.getAttribute('href'));
    const firstTabHref = validTabIds[0] || '#';
    const initialTabId = window.location.hash && validTabIds.includes(window.location.hash) 
      ? window.location.hash 
      : firstTabHref;

    setActiveTab(initialTabId);
    
    // Add click listeners for desktop tabs
    tabs.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = e.currentTarget.getAttribute('href');
        if(targetId) setActiveTab(targetId);
      });
    });

    // Add change listener for mobile dropdown
    mobileTabs.addEventListener('change', (e) => {
      setActiveTab(e.currentTarget.value);
    });

    // Handle back/forward browser navigation
    window.addEventListener('popstate', () => {
      const hash = window.location.hash && validTabIds.includes(window.location.hash) 
        ? window.location.hash 
        : firstTabHref;
      setActiveTab(hash);
    });
  });

  // Handle Delete User Modal
  const deleteModal = document.getElementById('delete-user-modal');
  const deleteModalBackdrop = document.getElementById('delete-user-modal-backdrop');
  const deleteModalConfirmBtn = document.getElementById('delete-user-modal-confirm-btn');
  const deleteModalCancelBtn = document.getElementById('delete-user-modal-cancel-btn');
  const deleteUserForm = document.getElementById('delete-user-form');
  const userIdToDeleteInput = document.getElementById('user-id-to-delete');

  if (deleteModal && deleteUserForm && userIdToDeleteInput) {
    document.addEventListener('click', (event) => {
      const button = event.target.closest('[data-action="open-delete-user-modal"]');
      if (button) {
        const userId = button.getAttribute('data-user-id');
        const userEmail = button.getAttribute('data-user-email');
        const modalMessage = deleteModal.querySelector('p.text-sm');
        
        // Set the hidden input value for the form
        if (userIdToDeleteInput) userIdToDeleteInput.value = userId;

        // Customize the message
        if (modalMessage && userEmail) {
          modalMessage.textContent = `Are you sure you want to delete ${userEmail}? All of their associated data will be removed. This action is permanent and cannot be undone.`
        }
        
        // Show the modal
        deleteModal.classList.remove('hidden');
      }
    });

    // Handle confirm button click
    deleteModalConfirmBtn?.addEventListener('click', () => {
      deleteUserForm.submit();
    });

    // Handle cancel button click
    deleteModalCancelBtn?.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
    });

    // Also hide modal on backdrop click
    deleteModalBackdrop?.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
    });
  }

  // Handle Soft Delete User Modal
  const softDeleteModal = document.getElementById('soft-delete-user-modal');
  const softDeleteModalBackdrop = document.getElementById('soft-delete-user-modal-backdrop');
  const softDeleteModalConfirmBtn = document.getElementById('soft-delete-user-modal-confirm-btn');
  const softDeleteModalCancelBtn = document.getElementById('soft-delete-user-modal-cancel-btn');
  const softDeleteUserForm = document.getElementById('soft-delete-user-form');
  const userIdToSoftDeleteInput = document.getElementById('user-id-to-soft-delete');

  if (softDeleteModal && softDeleteUserForm && userIdToSoftDeleteInput) {
    document.addEventListener('click', (event) => {
      const button = event.target.closest('[data-action="open-soft-delete-modal"]');
      if (button) {
        const userId = button.getAttribute('data-user-id');
        const userEmail = button.getAttribute('data-user-email');
        const modalMessage = softDeleteModal.querySelector('p.text-sm');
        
        if (userIdToSoftDeleteInput) userIdToSoftDeleteInput.value = userId;

        if (modalMessage && userEmail) {
          modalMessage.textContent = `Are you sure you want to archive ${userEmail}? They will be unsubscribed and hidden from active lists, but their data will be preserved.`
        }
        
        softDeleteModal.classList.remove('hidden');
      }
    });

    softDeleteModalConfirmBtn?.addEventListener('click', () => {
      softDeleteUserForm.submit();
    });

    softDeleteModalCancelBtn?.addEventListener('click', () => {
      softDeleteModal.classList.add('hidden');
    });

    softDeleteModalBackdrop?.addEventListener('click', () => {
      softDeleteModal.classList.add('hidden');
    });
  }
</script>