---
import Layout from '~/layouts/PageLayout.astro';

// --- METADATA ---
const metadata = {
  title: 'Sex 3.0 Relationship Map Quiz | JJ Roberts',
  description: "Take the Sex 3.0 Relationship Map Quiz to understand where you are on your journey and unlock personalised insights.",
};

const quizQuestions = [
  {
    text: "Jealousy in a relationship is a sign of how much you love someone.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "Relationships should be built on complete honesty, even when it's difficult.",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Attitude (Agree=High)
  },
  {
    text: "I believe in the concept of 'The One' in relationships.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "Trust and respect are more important than exclusivity and control in a relationship.",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Attitude (Agree=High)
  },
  {
    text: "A relationship is successful if it lasts a lifetime, regardless of the quality.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low) - Slightly rephrased
  },
  {
    text: "A relationship should be free of conflict to be healthy.",
    scoring: [1, 2, 3, 4, 5],
  },
  {
    text: "You should be willing to tolerate bad behaviour if you love someone.",
    scoring: [5, 4, 3, 2, 1],
  },
  {
    text: "A relationship should complete you as a person.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "I believe society promotes outdated ideas about sexual relationships.",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Awareness (Agree=High) - Rephrased original 17's theme
  },
  {
    text: "You should be willing to sacrifice your happiness for your partner's.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "A relationship requires exclusivity to be fulfilling and meaningful above all else.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low) - Slightly rephrased
  },
  {
    text: "My partner having personal freedom is compatible with deep intimacy in a relationship.",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Attitude (Agree=High) - New question based on book
  },
  {
    text: "A healthy relationship requires effort and hard work.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "I have gut feeling that there is something wrong with the way that society tells me how relationships should be but I can't quite put my finger on it.",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Attitude (Agree=High) - New question based on book
  },
  {
    text: "You should be able to predict your partner's needs without them telling you.",
    scoring: [5, 4, 3, 2, 1],
  },
  {
    text: "It is natural for human beings to be monogamous for their entire lives.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "If you truly love someone, you should prioritize their needs above your own and your own dreams.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low) - Combined/rephrased
  },
  {
    text: "A relationship should fulfil all your emotional needs.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  },
  {
    text: "I feel pressured to follow a standard relationship timeline (dating, marriage, kids).",
    scoring: [1, 2, 3, 4, 5], // Sex 3.0 Awareness (Agree=High) - Acknowledging RD
  },
  {
    text: "I like drama in a relationship. It's exciting. Lack of drama is passionless and boring.",
    scoring: [5, 4, 3, 2, 1], // Sex 2.0 Attitude (Agree=Low)
  }
];

// Calculate the result based on the score
const getResult = (score: number): string => {
  if (score <= 40) return 'Mostly Sex 2.0';
  if (score <= 60) return 'Sex 2.0 with Growing Awareness';
  if (score <= 80) return 'Leaning Towards Sex 3.0';
  return 'Mostly Sex 3.0';
};

// Get URL parameters
const url = new URL(Astro.request.url);

// Handle form submission
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const answers = JSON.parse(formData.get('answers')?.toString() || '[]') as number[];
  
  // Calculate score
  const score = answers.reduce((sum, answer, index) => {
    return sum + (quizQuestions[index]?.scoring[answer - 1] || 0);
  }, 0);
  
  const result = getResult(score);
  
  // Debug output
  console.log('Quiz Submission:');
  console.log('Raw Answers:', answers);
  console.log('Calculated Score:', score);
  console.log('Result Category:', result);
}

// Score ranges and results
const scoreRanges = [
  {
    maxScore: 40,
    type: 'Mostly Sex 2.0',
    summary: 'Your score indicates you are largely operating within the traditional Sex 2.0 framework. You likely hold many common societal beliefs about love, relationships, and commitment, which can often lead to unnecessary conflict, jealousy, and confusion. But awareness is the first step to change. The good news is that the blueprint for a better way exists.'
  },
  {
    maxScore: 60,
    type: 'Sex 2.0 with Growing Awareness',
    summary: 'Your responses show a mix of traditional Sex 2.0 beliefs and a growing awareness that something isn\'t quite right with the conventional map. You may feel the friction and frustration caused by outdated paradigms. This position is fertile ground for change! You are ready to explore a new framework that aligns more closely with your true nature and leads to less suffering.'
  },
  {
    maxScore: 80,
    type: 'Leaning Towards Sex 3.0',
    summary: 'You are strongly aligned with the core principles of Sex 3.0! You likely value honesty, freedom, and mutual reward over societal expectations and the need for control. You\'ve probably experienced the limitations of the Sex 2.0 firsthand. You are well on your way to building truly authentic and joyful connections based on a more natural and empowering understanding of human relationships.'
  },
  {
    maxScore: 100, // Represents 81-100
    type: 'Mostly Sex 3.0',
    summary: 'Wow! Your score indicates you already resonate strongly with the Sex 3.0 paradigm. You fundamentally understand that relationships thrive on mutual reward, honesty, trust, and respect, not on outdated notions of ownership or societal pressure. You are likely already navigating relationships with greater clarity and less suffering. You are a pioneer in building connections that are natural, free, and deeply fulfilling.'
  }
];

// Get result summary based on score
function getResultSummary(score: number) {
  for (const range of scoreRanges) {
    if (score <= range.maxScore) {
      return range;
    }
  }
  return scoreRanges[scoreRanges.length - 1]; // Fallback for scores outside expected range
}
---

<Layout metadata={metadata}>
  <!-- Add quiz questions JSON to DOM -->
  <div id="quiz-questions-json" style="display: none;">{JSON.stringify(quizQuestions)}</div>
  <div class="container mx-auto px-4 py-16 md:py-24">

    <div id="quiz-container" class="max-w-3xl mx-auto bg-white dark:bg-slate-800 rounded-lg shadow-xl p-6 md:p-8 lg:p-10">

      <h1 class="text-3xl md:text-4xl font-bold text-center text-brand-green mb-8">Your Relationship Map Quiz</h1>

      <!-- Progress Bar and Counter -->
      <div class="mb-8">
        <div class="flex justify-between items-center mb-2">
          <span id="question-counter" class="text-sm font-medium text-orange-500">Answered 0 of 20 questions</span>
          <span id="page-indicator" class="text-sm font-medium text-gray-600 dark:text-gray-400">Page 1 of 2</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
          <div id="progress-bar" class="bg-orange-500 h-2.5 rounded-full transition-all duration-300 ease-in-out" style="width: 5%"></div>
        </div>
      </div>

      <!-- Quiz Form -->
      <form id="quiz-form" class="space-y-8">
        <!-- Page 1 Questions (0-9) -->
        <div id="page-1" class="space-y-8">
          {quizQuestions.slice(0, 10).map((question, index) => (
            <div class="mb-6 bg-white dark:bg-slate-700 rounded-lg">
              <div class="p-6">
                <p class="text-lg font-medium text-gray-800 dark:text-white mb-4">{index + 1}. {question.text}</p>
              </div>
              <div class="flex justify-between items-center w-full flex-nowrap gap-6">
                {['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'].map((option, optionIndex) => (
                  <div class="flex flex-col items-center">
                    <div class="flex items-center">
                      <input 
                        type="radio"
                        id={`q${index}-opt${optionIndex + 1}`}
                        name={`question-${index}`}
                        value={optionIndex + 1}
                        class="h-4 w-4 text-orange-500 border-gray-300 focus:ring-orange-500 dark:bg-slate-700 dark:border-slate-600"
                        required
                        onclick="updateQuizProgress()"
                      />
                    </div>
                    <label for={`q${index}-opt${optionIndex + 1}`} class="mt-1 text-sm text-center text-gray-700 dark:text-gray-300">
                      {option}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          ))}
          
          <div class="flex justify-end mt-8">
            <button 
              id="next-page-btn"
              type="button" 
              class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
            >
              Next Page
            </button>
          </div>
        </div>
        
        <!-- Page 2 Questions (10-19) -->
        <div id="page-2" class="space-y-8 hidden">
          {quizQuestions.slice(10, 20).map((question, index) => (
            <div class="mb-6 bg-white dark:bg-slate-700 rounded-lg">
              <div class="p-6">
                <p class="text-lg font-medium text-gray-800 dark:text-white mb-4">{index + 11}. {question.text}</p>
              </div>
              <div class="flex justify-between items-center w-full flex-nowrap gap-6">
                {['Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree'].map((option, optionIndex) => (
                  <div class="flex flex-col items-center">
                    <div class="flex items-center">
                      <input 
                        type="radio"
                        id={`q${index + 10}-opt${optionIndex + 1}`}
                        name={`question-${index + 10}`}
                        value={optionIndex + 1}
                        class="h-4 w-4 text-orange-500 border-gray-300 focus:ring-orange-500 dark:bg-slate-700 dark:border-slate-600"
                        required
                        onclick="updateQuizProgress()"
                      />
                    </div>
                    <label for={`q${index + 10}-opt${optionIndex + 1}`} class="mt-1 text-sm text-center text-gray-700 dark:text-gray-300">
                      {option}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          ))}
          
          <div class="mt-8 p-6 bg-orange-50 dark:bg-slate-800 rounded-lg border-l-4 border-orange-500">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-3">Personalize Your Results</h3>
            <p class="text-gray-700 dark:text-gray-300 mb-4">
              We'd love to personalize your experience! Please share your first name so we can tailor your insights and make them more meaningful for you.
            </p>
            <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-end">
              <div class="flex-grow w-full">
                <label for="user-first-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">First Name</label>
                <div class="w-full">
                  <input 
                    type="text" 
                    id="user-first-name" 
                    name="firstName"
                    placeholder="Enter your first name" 
                    required
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-slate-700 dark:text-white focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  />
                  <p id="first-name-error" class="mt-1 text-sm text-red-600 dark:text-red-400 hidden">Please enter your first name to continue</p>
                </div>
              </div>
              <button 
                id="show-email-form-btn"
                type="button" 
                class="w-full sm:w-auto px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
              >
                Calculate My Results
              </button>
            </div>
          </div>
          
          <div class="flex justify-between mt-8">
            <button 
              id="prev-page-btn"
              type="button" 
              class="px-8 py-3 bg-gray-300 hover:bg-gray-400 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
            >
              Back
            </button>
          </div>
        </div>
      </form>

      <!-- Email Gate Section (Initially hidden) -->
      <div id="email-gate-area" class="hidden text-center">
        <h2 class="text-2xl md:text-3xl font-bold text-gray-800 dark:text-white mb-4">Unlock Your Results!</h2>
        <p id="score-preview" class="text-lg text-gray-700 dark:text-gray-300 mb-6"></p>
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-6">Enter your email below to see your personalized Sex 3.0 Relationship Map result and unlock free chapters of the book.</p>

        <form id="quiz-email-form" class="flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto">
          <label for="quiz-email-input" class="sr-only">Email address</label>
          <input
            type="email"
            id="quiz-email-input"
            name="email"
            placeholder="your.email@example.com"
            required
            class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white/90 dark:bg-gray-800/90 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
          />
          <button
            type="submit"
            class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
          >
            See My Results
          </button>
        </form>
         <p id="quiz-form-message" class="text-sm text-gray-600 dark:text-gray-400 mt-4"></p>
      </div>

      <!-- Results Section (Initially hidden) -->
      <div id="results-area" class="hidden">
        <h2 id="result-type-heading" class="text-2xl md:text-3xl font-bold text-center text-brand-green mb-4"></h2>
        <p id="result-summary-text" class="text-lg text-gray-800 dark:text-white text-center mb-6"></p>
        <p class="text-base text-gray-700 dark:text-gray-300 text-center italic">Check your email! We've sent you a confirmation link. Once confirmed, you'll receive another email to unlock your free chapters of the book, which will help you continue your journey.</p>
        <div class="mt-8 text-center">
           <a href="/" class="inline-flex items-center justify-center gap-2 px-8 py-3 bg-slate-200 hover:bg-slate-300 dark:bg-slate-700 dark:hover:bg-slate-600 text-gray-800 dark:text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap">
             Back to Homepage
           </a>
        </div>
      </div>

    </div>

  </div>

  <script is:inline>
    // Store the variant info in a global variable for conversion tracking
    let currentVariant = null;
    
    // --- A/B Test Impression Tracking ---
    function initializeAbTestTracking() {
      try {
        console.log('Initializing A/B test tracking...');
        
        // Attempt to get variant info ONLY from localStorage
        // This page assumes that 'quizVariant' (as a JSON string)
        // has been set in localStorage by an upstream process or page.
        try {
          const variantInfo = localStorage.getItem('quizVariant');
          if (variantInfo) {
            currentVariant = JSON.parse(variantInfo);
            console.log('A/B Test - Successfully parsed variant from localStorage:', currentVariant);
          } else {
            console.log('A/B Test - No "quizVariant" found in localStorage. This is expected if no A/B test is active or if it was not set prior to visiting this page.');
          }
        } catch (e) {
          console.error('A/B Test - Error getting or parsing "quizVariant" from localStorage:', e);
          currentVariant = null; // Ensure currentVariant is null if parsing fails
        }
        
        if (currentVariant) {
          // Validate essential fields for tracking
          if (!currentVariant.experiment || !currentVariant.variantId) {
             console.warn('A/B Test - Variant from localStorage is missing essential "experiment" or "variantId" fields:', currentVariant);
             // The impression might not be tracked, or submission might fail if these are required.
          }

          console.log('A/B Test - Using variant for impression tracking:', currentVariant);
          
          // Track the impression using the existing trackImpression function
          if (window.trackImpression) {
            // Ensure experiment and variantId exist before tracking impression
            if (currentVariant.experiment && currentVariant.variantId) {
                window.trackImpression(currentVariant.experiment, currentVariant.variantId)
                .then(success => {
                    if (success) {
                    console.log('A/B Test - Impression tracked successfully');
                    } else {
                    console.log('A/B Test - Impression not tracked (may have been tracked already or data invalid)');
                    }
                })
                .catch(error => {
                    console.error('Error tracking A/B test impression:', error);
                });
            } else {
                console.warn('A/B Test - Cannot track impression due to missing experiment or variantId in variant data from localStorage.');
            }
          } else {
            console.error('trackImpression function not available on window. A/B test impression cannot be tracked.');
          }
        } else {
          console.log('No A/B test variant info available from localStorage for impression tracking.');
        }
      } catch (error) {
        console.error('Error in A/B test tracking initialization:', error);
      }
    }
    
    // Initialize A/B test tracking when DOM is loaded
    // This part remains unchanged regarding its timing.
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeAbTestTracking);
    } else {
      initializeAbTestTracking();
    }
    
    // --- Referral Tracking (Unchanged) ---
    // This part is for a different kind of tracking and uses URL params + localStorage as originally designed.
    const queryParams = new URLSearchParams(window.location.search);
    const referrerId = queryParams.get("ref");
    console.log('Referral ID from URL:', referrerId);
    if (referrerId) {
      localStorage.setItem("referrer_id", referrerId);
      console.log('Stored referral ID in localStorage:', referrerId);
    } else {
      console.log('No referral ID found in URL');
    }

    // Store quiz answers between pages
    let quizAnswers = {};
    let currentPage = 1;

    // Update progress based on how many questions have been answered
    function updateQuizProgress() {
      const answeredQuestions = Array.from(document.querySelectorAll('input[type="radio"]:checked'));
      const uniqueQuestionNames = new Set();
      
      answeredQuestions.forEach(radio => {
        uniqueQuestionNames.add(radio.name);
        const questionName = radio.name;
        const value = radio.value;
        quizAnswers[questionName] = value;
      });
      
      const answeredCount = uniqueQuestionNames.size;
      const totalQuestions = 20; 
      
      const progress = (answeredCount / totalQuestions) * 100;
      const progressBar = document.getElementById('progress-bar');
      const questionCounter = document.getElementById('question-counter');
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (questionCounter) questionCounter.textContent = `Answered ${answeredCount} of ${totalQuestions} questions`;
    }

    function goToPage2() {
      const page1Questions = document.querySelectorAll('#page-1 input[type="radio"]:checked');
      const uniqueQuestionNames = new Set();
      
      page1Questions.forEach(radio => {
        uniqueQuestionNames.add(radio.name);
      });
      
      if (uniqueQuestionNames.size < 10) {
        alert(`Please answer all questions on this page. You've answered ${uniqueQuestionNames.size} of 10 questions.`);
        return;
      }
      
      document.getElementById('page-1').classList.add('hidden');
      document.getElementById('page-2').classList.remove('hidden');
      document.getElementById('page-indicator').textContent = 'Page 2 of 2';
      currentPage = 2;
      document.getElementById('quiz-container').scrollIntoView({ behavior: 'smooth' });
    }

    function goToPage1() {
      document.getElementById('page-2').classList.add('hidden');
      document.getElementById('page-1').classList.remove('hidden');
      document.getElementById('page-indicator').textContent = 'Page 1 of 2';
      currentPage = 1;
      document.getElementById('quiz-container').scrollIntoView({ behavior: 'smooth' });
    }

    const quizForm = document.getElementById('quiz-form');
    const emailGateArea = document.getElementById('email-gate-area');
    const resultsArea = document.getElementById('results-area');
    const scorePreview = document.getElementById('score-preview');
    const quizEmailForm = document.getElementById('quiz-email-form');
    const quizEmailInput = document.getElementById('quiz-email-input');
    const quizFormMessage = document.getElementById('quiz-form-message');
    const userFirstNameInput = document.getElementById('user-first-name');
    const resultTypeHeading = document.getElementById('result-type-heading');
    const resultSummaryText = document.getElementById('result-summary-text');

    function initializeQuiz() {
      const isPageRefresh = window.performance && window.performance.navigation && window.performance.navigation.type === 1;
      const form = document.getElementById('quiz-form');
      if (form) {
        form.reset();
      }
      
      if (isPageRefresh) {
        localStorage.removeItem('quizAnswers');
      } else {
        const savedAnswers = localStorage.getItem('quizAnswers');
        if (savedAnswers) {
          try {
            const parsedAnswers = JSON.parse(savedAnswers);
            Object.entries(parsedAnswers).forEach(([name, value]) => {
              const radio = document.querySelector(`input[name="${name}"][value="${value}"]`);
              if (radio) {
                radio.checked = true;
              }
            });
          } catch (e) {
            console.error('Error restoring saved quiz answers:', e);
          }
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      initializeQuiz();
      
      const prevButton = document.getElementById('prev-page-btn');
      const nextButton = document.getElementById('next-page-btn');
      
      if (prevButton) prevButton.addEventListener('click', goToPage1);
      if (nextButton) nextButton.addEventListener('click', goToPage2);
      
      document.querySelectorAll('input[type="radio"]').forEach(radio => {
        radio.addEventListener('click', updateQuizProgress);
      });

      const showEmailFormBtn = document.getElementById('show-email-form-btn');
      if (showEmailFormBtn) {
        showEmailFormBtn.addEventListener('click', () => {
          const firstNameInput = document.getElementById('user-first-name');
          const firstName = firstNameInput.value.trim();
          const firstNameError = document.getElementById('first-name-error');
          
          if (!firstName) {
            firstNameInput.classList.add('border-red-500');
            firstNameError.classList.remove('hidden');
            firstNameInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstNameInput.focus();
            return;
          } else {
            firstNameInput.classList.remove('border-red-500');
            firstNameError.classList.add('hidden');
          }
          
          localStorage.setItem('userFirstName', firstName);
          
          const totalQuestions = 20;
          const answeredQuestions = document.querySelectorAll('input[type="radio"]:checked');
          const uniqueQuestionNames = new Set();
          
          answeredQuestions.forEach(radio => {
            uniqueQuestionNames.add(radio.name);
          });
          
          const answeredCount = uniqueQuestionNames.size;
          
          if (answeredCount < totalQuestions) {
            alert(`Please answer all questions. You've answered ${answeredCount} of ${totalQuestions} questions.`);
            return;
          }
          
          const answers = [];
          for (let i = 0; i < 20; i++) {
            const value = parseInt(quizAnswers[`question-${i}`]);
            answers.push(isNaN(value) ? 0 : value);
          }
          
          const answersInput = document.createElement('input');
          answersInput.type = 'hidden';
          answersInput.name = 'answers';
          answersInput.value = JSON.stringify(answers);
          if(quizForm) quizForm.appendChild(answersInput);
          
          const quizQuestionsData = JSON.parse(document.getElementById('quiz-questions-json').textContent);
          let totalScore = 0;
          
          for (let i = 0; i < 20; i++) {
            const value = answers[i];
            if (value > 0 && quizQuestionsData[i] && quizQuestionsData[i].scoring) {
              totalScore += quizQuestionsData[i].scoring[value - 1];
            }
          }
          
          window.quizTotalScore = totalScore;
          
          if(quizForm) quizForm.classList.add('hidden');
          if(emailGateArea) emailGateArea.classList.remove('hidden');
          
          let resultType = '';
          if (totalScore <= 40) resultType = 'Mostly Sex 2.0';
          else if (totalScore <= 60) resultType = 'Sex 2.0 with Growing Awareness';
          else if (totalScore <= 80) resultType = 'Leaning Towards Sex 3.0';
          else resultType = 'Mostly Sex 3.0';
          
          if(scorePreview) scorePreview.textContent = `Your score (${totalScore}/100) indicates you are ${resultType}.`;
          if(emailGateArea) emailGateArea.scrollIntoView({ behavior: 'smooth' });
        });
      }

      if(quizEmailForm) {
        quizEmailForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const email = quizEmailInput.value.trim();
          
          if (!email) {
            if(quizFormMessage) {
                quizFormMessage.textContent = 'Please enter a valid email address.';
                quizFormMessage.className = 'text-red-600 dark:text-red-400';
            }
            return;
          }
        
          const submitButton = quizEmailForm.querySelector('button[type="submit"]');
          const originalButtonText = submitButton.innerHTML;
          submitButton.disabled = true;
          submitButton.innerHTML = 'Processing...';
          
          try {
            const totalScore = window.quizTotalScore;
            const scoreText = scorePreview.textContent;
            const resultTypeMatch = scoreText.match(/you are (.+)\./);
            const resultType = resultTypeMatch ? resultTypeMatch[1] : 'Unknown';
            
            console.log('Quiz Results for Submission:');
            console.log('Total Score:', totalScore);
            console.log('Result Type:', resultType);
            
            // Use the currentVariant global variable that was set during initialization
            // currentVariant is populated by initializeAbTestTracking() from localStorage
            let variantDataForSubmission = currentVariant; 
            console.log('A/B Test - Using variant data for submission:', variantDataForSubmission);
            
            if (variantDataForSubmission) {
              if (!variantDataForSubmission.experiment || !variantDataForSubmission.variantId) {
                console.warn('A/B Test - Variant data is incomplete (missing experiment or variantId). Submission might not include A/B test info or might be rejected by the endpoint.', variantDataForSubmission);
              }
            }
            
            if(emailGateArea) emailGateArea.classList.add('hidden');
            if(resultsArea) resultsArea.classList.remove('hidden');
            if(resultTypeHeading) resultTypeHeading.textContent = `Your Relationship Map Type: ${resultType}`;
            
            const formData = new FormData();
            formData.append('email', email);
            const currentFirstName = userFirstNameInput ? userFirstNameInput.value.trim() : '';
            formData.append('firstName', currentFirstName); 
            formData.append('score', totalScore.toString());
            formData.append('resultType', resultType);
            
            if (variantDataForSubmission && variantDataForSubmission.experiment && variantDataForSubmission.variantId) {
              formData.append('variantInfo', JSON.stringify({
                experiment: variantDataForSubmission.experiment,
                variantId: variantDataForSubmission.variantId,
                variantName: variantDataForSubmission.variantName || '',
                quizPath: variantDataForSubmission.quizPath || '',
                quizName: variantDataForSubmission.quizName || ''
              }));
              console.log('A/B Test - Added valid variant info to form data:', variantDataForSubmission);
            } else {
              console.warn('A/B Test - No valid variant info (experiment & variantId) available from localStorage for conversion tracking. Submission will not include variantInfo.');
            }
            
            const storedReferrerId = localStorage.getItem('referrer_id');
            if (storedReferrerId) {
              formData.append('referrer_id', storedReferrerId);
              console.log('Appending referral ID to form data:', storedReferrerId);
            }
            
            if (currentFirstName) { // Ensure 'first_name' is used if your API expects that key.
                formData.append('first_name', currentFirstName); 
            }

            console.log('Form data being sent to /api/quiz-submit:', Object.fromEntries(formData));
            
            fetch('/api/quiz-submit', {
              method: 'POST',
              body: formData
            }).then(response => {
              console.log('Server response from /api/quiz-submit:', response.status, response.statusText);
              return response.json();
            }).then(data => {
              console.log('Server response data from /api/quiz-submit:', data);
            }).catch(error => {
              console.error('Error sending quiz data to /api/quiz-submit:', error);
            });
            
            let summary = '';
            if (resultType.includes('Mostly Sex 2.0')) {
              summary = 'Your score indicates you are largely operating within the traditional Sex 2.0 framework. You likely hold many common societal beliefs about love, relationships, and commitment, which can often lead to unnecessary conflict, jealousy, and confusion. But awareness is the first step to change! The good news is that the blueprint for a better way exists.';
            } else if (resultType.includes('Growing Awareness')) {
              summary = 'Your responses show a mix of traditional Sex 2.0 beliefs and a growing awareness that something isn\'t quite right with the conventional map. You may feel the friction and frustration caused by outdated paradigms. This position is fertile ground for change! You are ready to explore a new framework that aligns more closely with your true nature and leads to less suffering.';
            } else if (resultType.includes('Leaning Towards')) {
              summary = 'You are strongly aligned with the core principles of Sex 3.0! You likely value honesty, freedom, and mutual reward over societal expectations and the need for control. You\'ve probably experienced the limitations of the Sex 2.0 map firsthand. You are well on your way to building truly authentic and joyful connections based on a more natural and empowering understanding of human relationships.';
            } else {
              summary = 'Wow! Your score indicates you already resonate strongly with the Sex 3.0 paradigm. You fundamentally understand that relationships thrive on mutual reward, honesty, trust, and respect, not on outdated notions of ownership or societal pressure. You are likely already navigating relationships with greater clarity and less suffering. You are a pioneer in building connections that are natural, free, and deeply fulfilling.';
            }
            
            if (resultSummaryText) resultSummaryText.textContent = summary;
            if (resultsArea) resultsArea.scrollIntoView({ behavior: 'smooth' });
            
          } catch (error) {
            console.error('Error submitting quiz email form:', error);
            if(quizFormMessage) {
                quizFormMessage.textContent = 'An error occurred. Please try again.';
                quizFormMessage.className = 'text-red-600 dark:text-red-400';
            }
          } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          }
        });
      }

      updateQuizProgress(); // Initial call

      // --- Testing Code Start (As per original, you might want to remove this for production) ---
      // Auto-select 'Strongly Agree' for all questions (for testing)
      // document.querySelectorAll('input[type="radio"][value="5"]').forEach(radio => {
      //   radio.checked = true;
      // });
      // Update progress bar to show all questions answered
      // updateQuizProgress();
      // --- Testing Code End ---
      
      const firstNameInput = document.getElementById('user-first-name');
      const firstNameError = document.getElementById('first-name-error');
      
      if (firstNameInput) {
        firstNameInput.addEventListener('input', () => {
          firstNameInput.classList.remove('border-red-500');
          if (firstNameError) firstNameError.classList.add('hidden');
        });
        
        const savedName = localStorage.getItem('userFirstName');
        if (savedName) {
          firstNameInput.value = savedName;
        }
      }
      
      function saveAnswersToLocalStorage() {
        localStorage.setItem('quizAnswers', JSON.stringify(quizAnswers));
      }
      
      document.querySelectorAll('input[type="radio"]').forEach(radio => {
        radio.addEventListener('change', saveAnswersToLocalStorage);
      });
    });
  </script>
