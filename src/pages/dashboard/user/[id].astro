---
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabaseClient';
import type { UserProfile, GemTransaction, UserEngagement, KitSubscriber } from '~/types';

// A specific type for a referred user, combining their profile with the referral date
interface ReferredUser extends UserProfile {
  referral_created_at: string | null;
}

export interface Props {
  userProfile: UserProfile | null;
  gemTransactions: GemTransaction[] | null;
  userEngagements: UserEngagement[] | null;
  kitSubscriber: KitSubscriber | null;
  referrals: ReferredUser[] | null;
  error: string | null;
}

let userProfile: UserProfile | null = null;
let gemTransactions: GemTransaction[] | null = null;
let userEngagements: UserEngagement[] | null = null;
let kitSubscriber: KitSubscriber | null = null;
let referrals: ReferredUser[] | null = null;
let error: string | null = null;

const { id } = Astro.params;

if (!id) {
  error = 'User ID is missing.';
} else {
  try {
    // 1. Fetch user profile from Supabase
    const { data: profileData, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', id)
      .single();

    if (profileError) throw new Error(`Failed to fetch user profile: ${profileError.message}`);
    userProfile = profileData;

    if (userProfile && userProfile.email) {
      // 2. Fetch user data from ConvertKit
      const apiSecret = import.meta.env.CONVERTKIT_API_SECRET;
      if (apiSecret) {
        const ckUrl = `https://api.convertkit.com/v3/subscribers?api_secret=${apiSecret}&email_address=${userProfile.email}`;
        const ckResponse = await fetch(ckUrl);
        if (ckResponse.ok) {
          const ckData = await ckResponse.json();
          if (ckData.subscribers && ckData.subscribers.length > 0) {
            kitSubscriber = ckData.subscribers[0];
          }
        } else {
          console.warn(`Could not fetch ConvertKit data for ${userProfile.email}: ${ckResponse.statusText}`);
        }
      }

      // 3. Fetch gem transactions
      const { data: gemsData, error: gemsError } = await supabase
        .from('gem_transactions')
        .select('*')
        .eq('user_id', id)
        .order('created_at', { ascending: false });

      if (gemsError) throw new Error(`Failed to fetch gem transactions: ${gemsError.message}`);
      gemTransactions = gemsData;

      // 4. Fetch user engagements
      const { data: engagementsData, error: engagementsError } = await supabase
        .from('user_engagements')
        .select('*')
        .eq('user_id', id)
        .order('created_at', { ascending: false });
      
      if (engagementsError) throw new Error(`Failed to fetch user engagements: ${engagementsError.message}`);
      userEngagements = engagementsData;

      // 5. Fetch referrals using a two-step query to bypass schema cache issues
      // Step 5.1: Get all referral records for the current user
      const { data: referralRecords, error: referralError } = await supabase
        .from('referrals')
        .select('new_user_id, created_at')
        .eq('referrer_id', id);

      if (referralError) throw new Error(`Failed to fetch referral records: ${referralError.message}`);

      if (referralRecords && referralRecords.length > 0) {
        const refereeIds = referralRecords.map(r => r.new_user_id).filter(Boolean);

        if (refereeIds.length > 0) {
          // Step 5.2: Get the profiles for all the referred users
          const { data: refereeProfiles, error: profilesError } = await supabase
            .from('user_profiles')
            .select('id, email, first_name')
            .in('id', refereeIds);

          if (profilesError) throw new Error(`Failed to fetch referee profiles: ${profilesError.message}`);
          
          // Step 5.3: Combine the data
          if (refereeProfiles) {
            const referralDateMap = new Map(referralRecords.map(r => [r.new_user_id, r.created_at]));
            referrals = refereeProfiles.map(profile => ({
              ...profile,
              referral_created_at: referralDateMap.get(profile.id) || null,
            }));
          }
        }
      }
    }

  } catch (e: unknown) {
    if (e instanceof Error) {
      error = e.message;
    } else {
      error = 'An unexpected error occurred.';
    }
    console.error(e);
  }
}

const metadata = {
  title: `User Profile: ${userProfile?.email || 'Unknown'}`,
  description: `Detailed view of a user's profile, engagement, and history.`,
};

// Helper to format field names
const formatFieldName = (fieldName: string) => {
  return fieldName
    .replace(/_/g, ' ')
    .replace(/\b\w/g, char => char.toUpperCase());
};

const getGemTransactionColor = (type: string) => {
  if (type === 'credit') return 'text-green-500';
  if (type === 'debit') return 'text-red-500';
  return 'text-slate-500';
}
---

<Layout {metadata}>
  <div class="container mx-auto px-4 py-8 max-w-7xl">
    <div class="mb-6">
      <a href="/dashboard#users-panel" class="text-blue-600 hover:underline dark:text-blue-400">
        &larr; Back to User List
      </a>
    </div>

    {error && (
      <div class="mb-6 p-4 bg-red-100 dark:bg-red-800/30 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg shadow-sm" role="alert">
        <p class="font-bold text-lg">Error:</p>
        <p>{error}</p>
      </div>
    )}

    {userProfile && !error && (
      <>
        <header class="mb-8">
          <h1 class="text-4xl font-bold text-slate-800 dark:text-white">{userProfile.email}</h1>
          <p class="text-lg text-slate-500 dark:text-slate-400">User ID: {userProfile.id}</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Left Column: User Details -->
          <div class="lg:col-span-1 space-y-6">
            <!-- Supabase Profile Card -->
            <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6">
              <h3 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">Database Profile</h3>
              <dl class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <dt class="text-slate-500 dark:text-slate-400">First Name:</dt>
                  <dd class="font-medium text-slate-800 dark:text-white">{userProfile.first_name || 'N/A'}</dd>
                </div>
                <div class="flex justify-between">
                  <dt class="text-slate-500 dark:text-slate-400">Insight Gems:</dt>
                  <dd class="font-bold text-xl text-blue-600 dark:text-blue-400">{userProfile.insight_gems}</dd>
                </div>
                <div class="flex justify-between">
                  <dt class="text-slate-500 dark:text-slate-400">Referral Code:</dt>
                  <dd class="font-mono text-xs bg-slate-100 dark:bg-slate-700 p-1 rounded">{userProfile.referral_code || 'N/A'}</dd>
                </div>
                <div class="flex justify-between">
                  <dt class="text-slate-500 dark:text-slate-400">Joined:</dt>
                  <dd class="font-medium text-slate-800 dark:text-white">{userProfile.created_at ? new Date(userProfile.created_at).toLocaleString() : 'N/A'}</dd>
                </div>
                 <div class="flex justify-between">
                  <dt class="text-slate-500 dark:text-slate-400">Last Updated:</dt>
                  <dd class="font-medium text-slate-800 dark:text-white">{userProfile.updated_at ? new Date(userProfile.updated_at).toLocaleString() : 'N/A'}</dd>
                </div>
              </dl>
            </div>

            <!-- ConvertKit Card -->
            <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6">
              <h3 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">ConvertKit Subscriber</h3>
              {kitSubscriber ? (
                <>
                  <dl class="space-y-2 text-sm">
                    <div class="flex justify-between">
                      <dt class="text-slate-500 dark:text-slate-400">State:</dt>
                      <dd class="font-medium text-slate-800 dark:text-white">{kitSubscriber.state}</dd>
                    </div>
                    <div class="flex justify-between">
                      <dt class="text-slate-500 dark:text-slate-400">Subscribed At:</dt>
                      <dd class="font-medium text-slate-800 dark:text-white">{kitSubscriber.created_at ? new Date(kitSubscriber.created_at).toLocaleString() : 'N/A'}</dd>
                    </div>
                  </dl>
                  <div class="mt-4 pt-4 border-t border-slate-200 dark:border-slate-700">
                    <h4 class="text-md font-semibold text-slate-600 dark:text-slate-300 mb-2">Custom Fields</h4>
                    {Object.keys(kitSubscriber.fields).length > 0 ? (
                      <dl class="space-y-2 text-sm">
                        {Object.entries(kitSubscriber.fields).map(([key, value]) => (
                           <div class="flex justify-between">
                            <dt class="text-slate-500 dark:text-slate-400 capitalize">{formatFieldName(key)}:</dt>
                            <dd class="font-medium text-slate-800 dark:text-white text-right break-all">{String(value) || 'N/A'}</dd>
                          </div>
                        ))}
                      </dl>
                    ) : (
                      <p class="text-sm text-slate-500 dark:text-slate-400">No custom fields found.</p>
                    )}
                  </div>
                </>
              ) : (
                <p class="text-sm text-slate-500 dark:text-slate-400">No subscriber data found in ConvertKit for this email.</p>
              )}
            </div>
            
            <!-- Referrals Card -->
            <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6">
              <h3 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">Referrals ({referrals?.length || 0})</h3>
              {referrals && referrals.length > 0 ? (
                <ul class="divide-y divide-slate-200 dark:divide-slate-700">
                  {referrals.map(ref => (
                    <li class="py-2">
                      <div class="flex justify-between items-center">
                        <div>
                          <a href={`/dashboard/user/${ref.id}`} class="font-medium text-blue-600 hover:underline dark:text-blue-400">
                            {ref.first_name || ref.email}
                          </a>
                          <p class="text-xs text-slate-500 dark:text-slate-400">{ref.email}</p>
                        </div>
                        <div class="text-right">
                          <p class="text-sm text-slate-500 dark:text-slate-400">{ref.referral_created_at ? new Date(ref.referral_created_at).toLocaleDateString() : 'N/A'}</p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-sm text-slate-500 dark:text-slate-400">This user has not referred anyone.</p>
              )}
            </div>
          </div>

          <!-- Right Column: Activity Feeds -->
          <div class="lg:col-span-2 space-y-8">
            <!-- Gem Transactions -->
            <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6">
              <h3 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">Gem Transaction History</h3>
              {gemTransactions && gemTransactions.length > 0 ? (
                <ul class="divide-y divide-slate-200 dark:divide-slate-700">
                  {gemTransactions.map(tx => (
                    <li class="py-3">
                      <div class="flex justify-between items-center">
                        <div>
                          <p class="font-medium text-slate-800 dark:text-white">{tx.description}</p>
                          <p class="text-xs text-slate-500 dark:text-slate-400">Type: {tx.type}</p>
                        </div>
                        <div class="text-right">
                          <p class:list={["font-bold text-lg", getGemTransactionColor(tx.type)]}>
                            {tx.type === 'credit' ? '+' : '-'}{tx.amount}
                          </p>
                          <p class="text-xs text-slate-500 dark:text-slate-400">{tx.created_at ? new Date(tx.created_at).toLocaleString() : 'N/A'}</p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-sm text-slate-500 dark:text-slate-400">No gem transactions found.</p>
              )}
            </div>

            <!-- User Engagements -->
            <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6">
              <h3 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">User Engagement Timeline</h3>
              {userEngagements && userEngagements.length > 0 ? (
                <ul class="divide-y divide-slate-200 dark:divide-slate-700">
                  {userEngagements.map(event => (
                    <li class="py-3">
                      <p class="font-medium text-slate-800 dark:text-white">{event.engagement_type}</p>
                      <p class="text-xs text-slate-500 dark:text-slate-400">{event.created_at ? new Date(event.created_at).toLocaleString() : 'N/A'}</p>
                      {event.metadata && <pre class="mt-1 text-xs p-2 bg-slate-100 dark:bg-slate-900 rounded overflow-x-auto">{JSON.stringify(event.metadata, null, 2)}</pre>}
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="text-sm text-slate-500 dark:text-slate-400">No engagement events found.</p>
              )}
            </div>
          </div>
        </div>
      </>
    )}
  </div>
</Layout>