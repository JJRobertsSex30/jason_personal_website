---
// src/pages/test.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="A/B Test Demo">
  <h1 style="font-size: 1.875rem; font-weight: 700; margin-bottom: 1.5rem;">A/B Test Demo</h1>
  <p style="color: #4b5563; margin-bottom: 2rem;">
    This button will be either blue or green based on the A/B test variant assigned to you.
  </p>
  
  <div style="display: flex; flex-direction: column; align-items: center; gap: 2rem;">
    <button 
      id="test-button" 
      style="padding: 1rem 2rem; font-size: 1.25rem; font-weight: 600; color: white; border-radius: 0.5rem; transition: opacity 0.3s;"
    >
      Loading...
    </button>
    
    <!-- Debug info -->
    <div id="debug-info" style="background: #f3f4f6; padding: 1rem; border-radius: 0.5rem; font-family: monospace; font-size: 0.875rem;">
      <div>PostHog Status: <span id="posthog-status">Checking...</span></div>
      <div>Feature Flag: <span id="feature-flag-value">Not loaded</span></div>
      <div>User ID: <span id="user-id">Not loaded</span></div>
    </div>
  </div>

  <script is:inline>
    function updateDebugInfo() {
      const statusEl = document.getElementById('posthog-status');
      const flagEl = document.getElementById('feature-flag-value');
      const userEl = document.getElementById('user-id');
      
      if (window.posthog && window.posthog.getFeatureFlag) {
        statusEl.textContent = 'Loaded ✅';
        const variant = window.posthog.getFeatureFlag('button-colour');
        flagEl.textContent = variant || 'null (using default)';
        
        // Get user ID
        const distinctId = window.posthog.get_distinct_id();
        userEl.textContent = distinctId || 'Not available';
        
        console.log('PostHog Debug Info:', {
          featureFlag: variant,
          distinctId: distinctId,
          // Remove the problematic getFeatureFlags call
          posthogMethods: Object.keys(window.posthog).filter(key => typeof window.posthog[key] === 'function')
        });
      } else {
        statusEl.textContent = 'Not loaded ❌';
      }
    }

    function updateButton(variant) {
      console.log('updateButton called with variant:', variant);
      const button = document.getElementById('test-button');
      console.log('Button element found:', !!button);
      
      if (!button) {
        console.error('Button not found!');
        return;
      }
      
      try {
        button.style.backgroundColor = variant === 'blue' ? '#3b82f6' : '#10b981';
        button.textContent = `Click me (${variant})`;
        console.log('Button updated successfully');
        
        button.onclick = () => {
          console.log('Button clicked, attempting to capture event...');
          if (window.posthog) {
            try {
              // Capture multiple test events
              window.posthog.capture('button_clicked', { 
                variant: variant,
                timestamp: new Date().toISOString(),
                page: 'test'
              });
              console.log('Event captured successfully');
              
              // Also capture a simple test event
              window.posthog.capture('test_event', { test: true });
              console.log('Test event also captured');
              
              // Force flush events (send immediately)
              if (window.posthog._flush) {
                window.posthog._flush();
                console.log('Events flushed');
              }
              
              // Check if events are in the queue
              console.log('PostHog queue length:', window.posthog._q ? window.posthog._q.length : 'No queue found');
              
            } catch (error) {
              console.error('Error capturing event:', error);
            }
          } else {
            console.error('PostHog not available when trying to capture event');
          }
          alert(`Button clicked! Variant: ${variant}\nCheck console for event details.`);
        };
      } catch (error) {
        console.error('Error updating button:', error);
      }
    }

    function checkPostHog() {
      console.log('checkPostHog called');
      
      if (window.posthog && window.posthog.getFeatureFlag) {
        console.log('PostHog is ready, getting feature flag...');
        
        // Wait a bit for feature flags to be loaded
        setTimeout(() => {
          // TEMPORARY: Reset user ID to test different variants
          // Remove this in production!
          const randomId = 'test-user-' + Math.random().toString(36).substr(2, 9);
          window.posthog.identify(randomId);
          console.log('Using random user ID for testing:', randomId);
          
          // Wait for identify to process
          setTimeout(() => {
            const variant = window.posthog.getFeatureFlag('button-colour');
            console.log('Raw feature flag value:', variant);
            
            // Use the variant directly if it exists, otherwise default to blue
            const finalVariant = variant || 'blue';
            console.log('Final variant used:', finalVariant);
            
            updateButton(finalVariant);
            updateDebugInfo();
          }, 500);
        }, 1000);
      } else {
        console.log('PostHog not ready yet, retrying...');
        setTimeout(checkPostHog, 500);
      }
    }

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, checking PostHog...');
        checkPostHog();
        
        // Capture page load event
        setTimeout(() => {
          if (window.posthog) {
            window.posthog.capture('page_loaded', { page: 'test' });
            console.log('Page load event captured');
          }
        }, 2000);
      });
    } else {
      console.log('DOM already loaded, checking PostHog...');
      checkPostHog();
      
      // Capture page load event
      setTimeout(() => {
        if (window.posthog) {
          window.posthog.capture('page_loaded', { page: 'test' });
          console.log('Page load event captured');
        }
      }, 2000);
    }

    // Listen for PostHog ready event
    window.addEventListener('posthog:ready', () => {
      console.log('PostHog ready event received');
      checkPostHog();
    });
  </script>
</Layout>
