---
import Layout from '~/layouts/PageLayout.astro';
import { supabase } from '~/lib/supabaseClient';
import type { Session } from '@supabase/supabase-js';

// Define a basic UserProfile type.
export interface UserProfile {
  id: string;
  username?: string;
  full_name?: string;
  website?: string;
  [key: string]: unknown; 
}

// Interfaces for A/B Testing
export interface VariantConfig {
  [key: string]: unknown; // Can be more specific later
}

export interface Variant {
  id: string; // UUID
  experiment_id: string; // UUID
  name: string;
  description?: string | null;
  config_json?: VariantConfig | null;
  created_at: string; // Timestamptz
  updated_at: string; // Timestamptz
  impressions_count?: number;
  conversions_count?: number;
}

export interface Experiment {
  id: string; // UUID
  name: string;
  description?: string | null;
  is_active: boolean;
  created_at: string; // Timestamptz
  updated_at: string; // Timestamptz
  variants?: Variant[];
  // UI helper, not from DB
  managingVariants?: boolean; 
}

const metadata = {
  title: 'Supabase DB Test',
  description: 'Login to Supabase and view user profiles & A/B Tests.',
};

let userProfiles: UserProfile[] | null = null;
let error: string | null = null;
let session: Session | null = null;
let experiments: Experiment[] | null = null;
let abTestError: string | null = null;


// Server-side code
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('_action')?.toString();

  if (!session) { 
    const { data: { session: freshSession } } = await supabase.auth.getSession();
    if (freshSession) session = freshSession;
  }

  if (action === 'create_experiment') {
    if (!session) {
      abTestError = "Authentication required. Please log in again to create an experiment.";
    } else {
      try {
        const name = formData.get('experiment_name')?.toString();
        const description = formData.get('experiment_description')?.toString();
        const is_active = formData.get('experiment_is_active') === 'on';

        if (!name || name.trim() === '') {
          throw new Error('Experiment name is required.');
        }

        const { error: createError } = await supabase
          .from('experiments')
          .insert([{ name, description, is_active }]);

        if (createError) {
          console.error('Supabase create experiment error:', createError);
          throw new Error(createError.message || 'Failed to save experiment to the database.');
        }
        
        return Astro.redirect(Astro.url.pathname, 303);

      } catch (e: unknown) {
        if (e instanceof Error) {
          abTestError = e.message;
        } else {
          abTestError = 'An unexpected error occurred while creating the experiment.';
        }
        console.error('Create experiment processing error:', e);
      }
    }
  } else if (action === 'create_variant') {
    if (!session) {
      abTestError = "Authentication required. Please log in again to add a variant.";
    } else {
      try {
        const experimentId = formData.get('experiment_id')?.toString();
        const name = formData.get('variant_name')?.toString();
        const description = formData.get('variant_description')?.toString();
        const configJsonString = formData.get('variant_config_json')?.toString();

        if (!experimentId || !name || name.trim() === '') {
          throw new Error('Experiment ID and Variant Name are required.');
        }

        let config_json: VariantConfig | null = null;
        if (configJsonString && configJsonString.trim() !== '') {
          try {
            config_json = JSON.parse(configJsonString);
          } catch {
            throw new Error('Invalid JSON format for Variant Configuration.');
          }
        }

        const { error: createVariantError } = await supabase
          .from('variants')
          .insert([{
            experiment_id: experimentId,
            name,
            description,
            config_json
          }]);

        if (createVariantError) {
          console.error('Supabase create variant error:', createVariantError);
          throw new Error(createVariantError.message || 'Failed to save variant to the database.');
        }

        // Redirect, potentially with a URL hash to keep the variant section open
        // For now, simple redirect, user will need to re-open manage variants section
        return Astro.redirect(Astro.url.pathname + `?openExperiment=${experimentId}`, 303);

      } catch (e: unknown) {
        if (e instanceof Error) {
          abTestError = e.message; // This error will be displayed in the A/B test section
        } else {
          abTestError = 'An unexpected error occurred while creating the variant.';
        }
        console.error('Create variant processing error:', e);
      }
    }

  } else { 
    // Existing login logic (assuming any POST not 'create_experiment' or 'create_variant' is a login attempt for this page)
    try {
      const email = formData.get('email')?.toString();
      const password = formData.get('password')?.toString();

      if (!email || !password) {
         // If no action and no email/password, it's an invalid submission to the login form.
        throw new Error('Email and password are required for login.');
      }

      const { data, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (authError) {
        throw authError;
      }

      if (data.session) {
        session = data.session; // Update session state
        // Fetch user profiles immediately after successful login
        const { data: profilesData, error: profilesError } = await supabase
          .from('user_profiles')
          .select('*');
        
        if (profilesError) {
          console.error("Error fetching user profiles post-login:", profilesError);
          // Don't throw, allow login to proceed but profiles might be missing
          error = "Logged in, but failed to fetch user profiles: " + profilesError.message;
        } else {
          userProfiles = profilesData as UserProfile[];
        }
        // On successful login, also attempt to fetch experiments
        // This ensures the A/B test section is populated immediately
        // Duplicates GET logic slightly but ensures data is fresh post-login action
        const { data: experimentsData, error: experimentsDbError } = await supabase
          .from('experiments')
          .select('id, name, description, is_active, created_at, updated_at, variants (id, name, description, created_at)')
          .order('created_at', { ascending: false });

        if (experimentsDbError) {
            console.error('Supabase fetch experiments error post-login:', experimentsDbError);
            abTestError = "Logged in, but failed to fetch A/B test experiments: " + experimentsDbError.message;
        } else {
            experiments = experimentsData as Experiment[];
        }

      } else {
        throw new Error('Login failed. Please check your credentials.');
      }
    } catch (e: unknown) {
      if (e instanceof Error) {
        error = e.message; // This is the general page error for login
      } else {
        error = 'An unexpected error occurred during login.';
      }
      console.error('Login processing error:', e);
      session = null; 
      userProfiles = null;
      experiments = null; // Clear experiments if login fails
    }
  }
} 

// This block now runs for GET requests, or after a POST if no redirect occurred (e.g., due to an error).
if (Astro.request.method === 'GET' || abTestError || error) { // also run if errors occurred during POST
  const { data: { session: currentSession } } = await supabase.auth.getSession();
  // If session was already set by a successful login POST, don't overwrite it with null if getSession is slow
  if (currentSession) session = currentSession;

  const openExperimentId = Astro.url.searchParams.get('openExperiment');

  if (session) {
    // Fetch user profiles if not already fetched (e.g. by login POST)
    if (!userProfiles && !error) { // Check error to avoid re-fetching if login failed to get profiles
        try {
        const { data: profilesData, error: profilesError } = await supabase
            .from('user_profiles')
            .select('*'); 
        
        if (profilesError) {
            throw profilesError;
        }
        userProfiles = profilesData as UserProfile[];
        } catch (e: unknown) {
        if (e instanceof Error) {
            error = `Failed to fetch profile data: ${e.message}`;
        } else {
            error = 'An unexpected error occurred while fetching profile data.';
        }
        console.error('Initial profile fetch error:', e);
        userProfiles = null;
        }
    }

    // Fetch A/B test experiments if not already fetched (e.g. by login POST or create_experiment error handling)
    if (!experiments || openExperimentId || abTestError) { // Re-fetch if opening a specific one or error occurred
        try {
        const { data: experimentsData, error: experimentsDbError } = await supabase
            .from('experiments')
            .select('id, name, description, is_active, created_at, updated_at, variants (id, name, description, created_at)')
            .order('created_at', { ascending: false });

        if (experimentsDbError) {
            console.error('Supabase fetch experiments error:', experimentsDbError);
            throw new Error(experimentsDbError.message || 'Failed to retrieve experiments from database.');
        }
        experiments = (experimentsData as Experiment[]).map(exp => ({
          ...exp,
          managingVariants: exp.id === openExperimentId // Set managingVariants based on URL param
        }));
        } catch (e: unknown) {
        if (e instanceof Error) {
            abTestError = e.message; 
        } else {
            abTestError = 'An unexpected error occurred while fetching A/B test experiments.';
        }
        console.error('A/B Test experiment fetch error:', e);
        experiments = []; 
        }
    }
  } else {
    // If no session, clear any potentially stale data from a previous session state
    userProfiles = null;
    experiments = null;
  }
}
---
<Layout metadata={metadata}>
  <main class="container mx-auto px-4 py-12">
    <div class="max-w-2xl mx-auto"> {/* Increased max-width for wider content like tables if needed */}
      <h1 class="text-4xl font-bold text-center mb-10 text-slate-800 dark:text-white">Supabase Admin Panel</h1>

      {/* Session Info & Logout Button */}
      {session && !error && ( // Show only if session exists AND no general login error
        <div class="mb-6 p-4 bg-green-50 dark:bg-green-800/30 border border-green-300 dark:border-green-600 text-green-700 dark:text-green-300 rounded-lg shadow-sm">
          <div class="flex justify-between items-center">
            <div>
              <p class="font-semibold text-lg">Logged in as:</p>
              <p class="text-sm break-all">{session.user.email}</p>
            </div>
            <form method="POST" action="/api/logout">
              <button
                type="submit"
                class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-md shadow-md hover:shadow-lg transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
              >
                Logout
              </button>
            </form>
          </div>
        </div>
      )}

      {/* Login Form - Show if not logged in */}
      {!session && (
        <form method="POST" class="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-8 pt-6 mb-8">
          <h2 class="text-2xl font-semibold text-center mb-6 text-slate-700 dark:text-slate-200">User Login</h2>
          <div class="mb-6">
            <label for="email" class="block text-slate-700 dark:text-slate-300 text-sm font-bold mb-2">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-3 px-4 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-slate-400 dark:placeholder-slate-500"
              placeholder="you@example.com"
            />
          </div>
          <div class="mb-8">
            <label for="password" class="block text-slate-700 dark:text-slate-300 text-sm font-bold mb-2">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-3 px-4 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-slate-400 dark:placeholder-slate-500"
              placeholder="••••••••••••"
            />
          </div>
          <div class="flex items-center justify-center">
            <button
              type="submit"
              class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-md shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 transition duration-150 ease-in-out"
            >
              Sign In
            </button>
          </div>
        </form>
      )}

      {/* General Error Display (for login or major profile fetch issues) */}
      {error && ( // This 'error' is for login or critical load issues
        <div class="my-6 p-4 bg-red-50 dark:bg-red-800/30 border border-red-300 dark:border-red-600 text-red-700 dark:text-red-300 rounded-lg shadow-sm" role="alert">
          <p class="font-bold text-lg">Error:</p>
          <p>{error}</p>
        </div>
      )}

      {/* A/B Test Management Section - Appears if logged in AND no critical login/load error */}
      {session && !error && (
        <section class="my-12 pt-10 border-t border-slate-200 dark:border-slate-700">
          <h2 class="text-3xl font-semibold mb-8 text-slate-800 dark:text-white text-center">A/B Test Management</h2>

          {/* A/B Test Specific Error Display */}
          {abTestError && (
            <div class="mb-6 p-4 bg-orange-50 dark:bg-orange-800/30 border border-orange-300 dark:border-orange-600 text-orange-700 dark:text-orange-300 rounded-lg shadow-sm" role="alert">
              <p class="font-bold text-lg">A/B Test Error:</p>
              <p>{abTestError}</p>
            </div>
          )}

          {/* Create New Experiment Form */}
          <div class="mb-10 p-6 bg-white dark:bg-slate-800 shadow-xl rounded-lg">
            <h3 class="text-2xl font-semibold mb-6 text-slate-700 dark:text-slate-200">Create New Experiment</h3>
            <form method="POST" action={Astro.url.pathname} class="space-y-6"> {/* Action should be current page for PRG */}
              <input type="hidden" name="_action" value="create_experiment" />
              <div>
                <label for="experiment_name" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                  Experiment Name <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="experiment_name"
                  name="experiment_name"
                  required
                  class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
                  placeholder="e.g., Homepage Headline Test"
                />
              </div>
              <div>
                <label for="experiment_description" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                  Description (Optional)
                </label>
                <textarea
                  id="experiment_description"
                  name="experiment_description"
                  rows="3"
                  class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
                  placeholder="Briefly describe the goal of this experiment."
                ></textarea>
              </div>
              <div class="flex items-center">
                <input
                  id="experiment_is_active"
                  name="experiment_is_active"
                  type="checkbox"
                  checked
                  class="h-4 w-4 text-blue-600 border-slate-300 dark:border-slate-600 rounded focus:ring-blue-500 bg-white dark:bg-slate-700 dark:checked:bg-blue-500"
                />
                <label for="experiment_is_active" class="ml-2 block text-sm text-slate-700 dark:text-slate-300">
                  Activate this experiment immediately
                </label>
              </div>
              <div class="flex justify-end">
                <button
                  type="submit"
                  class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2.5 px-5 rounded-md shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 transition duration-150 ease-in-out"
                >
                  Create Experiment
                </button>
              </div>
            </form>
          </div>

          {/* List of Existing Experiments */}
          <h3 class="text-2xl font-semibold mb-6 text-slate-700 dark:text-slate-200 mt-10">Existing Experiments</h3>
          {experiments && experiments.length > 0 ? (
            <div class="space-y-6">
              {experiments.map((exp) => (
                <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6" id={`experiment-${exp.id}`}>
                  <div class="flex justify-between items-start mb-2">
                    <div>
                      <h4 class="text-xl font-semibold text-blue-600 dark:text-blue-400">{exp.name}</h4>
                      <p class="text-xs text-slate-400 dark:text-slate-500 mt-0.5">ID: {exp.id}</p>
                    </div>
                    <span class={`px-3 py-1 text-xs font-medium rounded-full ${exp.is_active ? 'bg-green-100 text-green-800 dark:bg-green-700/30 dark:text-green-300' : 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300'}`}>
                      {exp.is_active ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                  <p class="text-sm text-slate-600 dark:text-slate-300 mb-3">{exp.description || 'No description provided.'}</p>
                  
                  <div class="mb-4">
                    <h5 class="text-sm font-semibold text-slate-700 dark:text-slate-200 mb-1">Current Variants ({exp.variants?.length || 0}):</h5>
                    {exp.variants && exp.variants.length > 0 ? (
                      <ul class="list-disc list-inside pl-1 space-y-0.5 text-sm text-slate-500 dark:text-slate-400">
                        {exp.variants.map(variant => (
                          <li key={variant.id}>{variant.name} <span class="text-xs text-slate-400">(ID: {variant.id})</span></li>
                        ))}
                      </ul>
                    ) : (
                      <p class="text-sm text-slate-500 dark:text-slate-400 italic">No variants defined for this experiment yet.</p>
                    )}
                  </div>

                  <div class="flex items-center justify-end space-x-3 mt-4 pt-4 border-t border-slate-200 dark:border-slate-700">
                    <button type="button" class="text-sm bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 edit-experiment-btn" data-experiment-id={exp.id}>Edit Details</button>
                    <button 
                      type="button" 
                      class="text-sm bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 manage-variants-btn"
                      data-experiment-id={exp.id}
                      aria-expanded={exp.managingVariants ? 'true' : 'false'}
                      aria-controls={`manage-variants-section-${exp.id}`}
                    >
                      {exp.managingVariants ? 'Hide Variants' : 'Manage Variants'}
                    </button>
                    <button type="button" class="text-sm bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 delete-experiment-btn" data-experiment-id={exp.id}>Delete Exp.</button>
                  </div>

                  {/* Variant Management Section - Toggled by button */}
                  <div 
                    id={`manage-variants-section-${exp.id}`}
                    class={`mt-6 pt-6 border-t border-dashed border-slate-300 dark:border-slate-600 ${!exp.managingVariants ? 'hidden' : ''}`}
                  >
                    <h4 class="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-4">Manage Variants for: <span class="italic">{exp.name}</span></h4>
                    
                    {/* List Existing Variants for this experiment */}
                    {exp.variants && exp.variants.length > 0 ? (
                      <div class="mb-6">
                        <h5 class="text-md font-medium text-slate-600 dark:text-slate-300 mb-2">Existing Variants:</h5>
                        <ul class="space-y-2">
                          {exp.variants.map(variant => (
                            <li key={variant.id} class="p-3 bg-slate-50 dark:bg-slate-700/50 rounded-md shadow-sm flex justify-between items-center">
                              <div>
                                <p class="font-semibold text-slate-700 dark:text-slate-200">{variant.name}</p>
                                <p class="text-xs text-slate-500 dark:text-slate-400">{variant.description || 'No description'}</p>
                                {variant.config_json && (
                                  <pre class="mt-1 text-xs p-2 bg-slate-100 dark:bg-slate-600 rounded overflow-x-auto">{JSON.stringify(variant.config_json, null, 2)}</pre>
                                )}
                              </div>
                              <div class="space-x-2 flex-shrink-0 ml-2">
                                <button class="text-xs text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Edit</button>
                                <button class="text-xs text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300">Delete</button>
                              </div>
                            </li>
                          ))}
                        </ul>
                      </div>
                    ) : (
                      <p class="text-sm text-slate-500 dark:text-slate-400 italic mb-4">No variants currently exist for this experiment.</p>
                    )}

                    {/* Form to Add New Variant */}
                    <h5 class="text-md font-medium text-slate-600 dark:text-slate-300 mb-3 pt-4 border-t border-slate-200 dark:border-slate-700">Add New Variant</h5>
                    <form method="POST" action={Astro.url.pathname} class="space-y-4 p-4 bg-slate-50 dark:bg-slate-800/30 rounded-lg shadow">
                      <input type="hidden" name="_action" value="create_variant" />
                      <input type="hidden" name="experiment_id" value={exp.id} />
                      <div>
                        <label for={`variant_name-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Name <span class="text-red-500">*</span></label>
                        <input type="text" name="variant_name" id={`variant_name-${exp.id}`} required class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white" placeholder="e.g., Control, Variation A"/>
                      </div>
                      <div>
                        <label for={`variant_description-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Description</label>
                        <textarea name="variant_description" id={`variant_description-${exp.id}`} rows="2" class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white" placeholder="Brief description of this variant"></textarea>
                      </div>
                      <div>
                        <label for={`variant_config_json-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Configuration (JSON)</label>
                        <textarea name="variant_config_json" id={`variant_config_json-${exp.id}`} rows="3" class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 font-mono text-sm dark:bg-slate-700 dark:text-white" placeholder='{
  "headline": "New Headline!",
  "buttonColor": "blue"
}'></textarea>
                        <p class="text-xs text-slate-500 dark:text-slate-400 mt-1">Enter valid JSON or leave blank.</p>
                      </div>
                      <div class="flex justify-end">
                        <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900">Add Variant</button>
                      </div>
                    </form>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            (!abTestError && experiments && experiments.length === 0) && ( // Show only if no error and experiments array is present but empty
                <div class="text-center py-8 px-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
                <svg class="mx-auto h-10 w-10 text-slate-400 dark:text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" />
                </svg>
                <h3 class="mt-2 text-md font-medium text-slate-700 dark:text-slate-200">No Experiments Found</h3>
                <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">Get started by creating your first A/B experiment using the form above.</p>
                </div>
            )
          )}
        </section>
      )}

      {/* User Profiles Grid - Show if logged in, no general error, and profiles exist */}
      {session && !error && userProfiles && (
        <section class="mt-12 pt-10 border-t border-slate-200 dark:border-slate-700">
          <h2 class="text-3xl font-semibold mb-6 text-slate-800 dark:text-white text-center">User Profiles Data</h2>
          {userProfiles.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {userProfiles.map((profile) => (
                <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6 hover:shadow-xl transition-shadow duration-300 ease-in-out flex flex-col">
                  <h3 class="text-xl font-semibold text-blue-600 dark:text-blue-400 mb-2 capitalize">{profile.username || profile.full_name || 'Unnamed User'}</h3>
                  <div class="text-sm text-slate-600 dark:text-slate-400 space-y-1 mt-auto">
                    <p><span class="font-semibold">ID:</span> <span class="break-all">{profile.id}</span></p>
                    {profile.full_name && <p><span class="font-semibold">Full Name:</span> {profile.full_name}</p>}
                    {profile.website && 
                      <p><span class="font-semibold">Website:</span> <a href={profile.website} target="_blank" rel="noopener noreferrer" class="text-blue-500 hover:underline hover:text-blue-400">{profile.website}</a></p>
                    }
                    {Object.entries(profile).map(([key, value]) => {
                      if (!['id', 'username', 'full_name', 'website', 'updated_at', 'avatar_url'].includes(key) && value) {
                        return <p key={key}><span class="font-semibold capitalize">{key.replace(/_/g, ' ')}:</span> {String(value)}</p>;
                      }
                      return null;
                    })}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="text-center py-10 px-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
              <svg class="mx-auto h-12 w-12 text-slate-400 dark:text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 00-2-2zm3-12V3M16 3v2" />
              </svg>
              <h3 class="mt-2 text-lg font-medium text-slate-900 dark:text-white">No User Profiles Found</h3>
              <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">There are currently no user profiles to display from the database, or your profile is empty.</p>
            </div>
          )}
        </section>
      )}
      
      {/* Message if not logged in and no error (initial state) */}
      {!session && !error && (
         <div class="text-center py-10 px-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
            <svg class="mx-auto h-12 w-12 text-slate-400 dark:text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            <h3 class="mt-2 text-lg font-medium text-slate-900 dark:text-white">Please Log In</h3>
            <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">Enter your Supabase credentials to view the admin panel.</p>
        </div>
      )}
    </div>
  </main>
</Layout> 

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const manageVariantBtns = document.querySelectorAll('.manage-variants-btn');
    manageVariantBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const experimentId = btn.dataset.experimentId;
        const variantSection = document.getElementById(`manage-variants-section-${experimentId}`);
        const isExpanded = btn.getAttribute('aria-expanded') === 'true';

        if (variantSection) {
          variantSection.classList.toggle('hidden');
          btn.setAttribute('aria-expanded', !isExpanded + '');
          btn.textContent = !isExpanded ? 'Hide Variants' : 'Manage Variants';
          
          // If opening a section, construct URL and push state to allow refresh/bookmarking
          // If closing, remove the specific openExperiment from URL or go to base URL
          if (!isExpanded) {
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('openExperiment', experimentId);
            window.history.pushState({ path: currentUrl.href }, '', currentUrl.href);
          } else {
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.delete('openExperiment');
            // If you want to also remove other params or reset to base path:
            // window.history.pushState({ path: currentUrl.pathname }, '', currentUrl.pathname);
            // For now, just removing the specific param to allow other potential params to persist
            window.history.pushState({ path: currentUrl.href }, '', currentUrl.href);
          }
        }
      });
    });

    // Handle back/forward navigation for open sections
    window.addEventListener('popstate', () => {
      const params = new URLSearchParams(window.location.search);
      const openExperimentId = params.get('openExperiment');
      
      document.querySelectorAll('[id^="manage-variants-section-"]').forEach(section => {
        section.classList.add('hidden');
      });
      manageVariantBtns.forEach(btn => {
        btn.setAttribute('aria-expanded', 'false');
        btn.textContent = 'Manage Variants';
      });

      if (openExperimentId) {
        const sectionToOpen = document.getElementById(`manage-variants-section-${openExperimentId}`);
        const buttonForSection = document.querySelector(`.manage-variants-btn[data-experiment-id="${openExperimentId}"]`);
        if (sectionToOpen) {
          sectionToOpen.classList.remove('hidden');
        }
        if (buttonForSection) {
          buttonForSection.setAttribute('aria-expanded', 'true');
          buttonForSection.textContent = 'Hide Variants';
        }
      }
    });

    // On initial load, if URL has openExperiment, ensure that section is visible
    // This is now handled by server-side rendering `exp.managingVariants`
    // const initialParams = new URLSearchParams(window.location.search);
    // const initialOpenExperimentId = initialParams.get('openExperiment');
    // if (initialOpenExperimentId) {
    //   const btn = document.querySelector(`.manage-variants-btn[data-experiment-id="${initialOpenExperimentId}"]`);
    //   if (btn) btn.click(); // Simulate a click to open it via the event listener logic
    // }
  });
</script> 