---
import Layout from '~/layouts/PageLayout.astro';
import HeroCustomAB from '~/components/widgets/HeroCustomAB.astro';

// Import AB testing logic - getVariant for SSR, ABVariant for type.
// Crucially, also import abTester here to ensure its client-side window setup runs.
import { getVariant, type ABVariant } from '~/lib/abTester';
// Re-enable side-effect import to ensure abTester.ts is in the client bundle
import '~/lib/abTester'; 

import imgHeroMain from '~/assets/images/jj2.png'; // Default image for fallback or if not in variant

// --- METADATA (can be same as index.astro or simplified) ---
const metadata = {
  title: 'A/B Test Page | JJ Roberts',
  description: "Testing A/B variations.",
};

const EXPERIMENT_NAME = 'Hero Headline AB Test 1'; // Define as a constant
const chosenHeroContent: ABVariant = await getVariant(EXPERIMENT_NAME);

// Image can either be part of the variant's config_json or a static default like this.
// If you want the image to be A/B tested, it should be part of the config_json in your variants table,
// and then extracted in abTester.ts similar to headline/subheadline.
const heroImageForWidget = { 
  src: imgHeroMain, // Default or fallback image
  alt: chosenHeroContent.raw_config_json?.image_alt || 'JJ Roberts - Relationship Expert' // Example: get alt from config or default
};
// If image source itself is from config:
// const imageSrcFromConfig = chosenHeroContent.raw_config_json?.image_src; // you would need to resolve this path or use a full URL

---

<Layout metadata={metadata}>
  <main>
    {/* --- HERO WIDGET (A/B Tested) --- */}
    {/* 
      IMPORTANT: You'll need to ensure your HeroCustomAB component can accept 
      `headline` and `subheadline` as props and uses them.
      It also needs to call `trackConversion` from abTester.ts on successful form submission.
      You might want to create a copy of HeroCustomAB (e.g., HeroCustomABTest.astro) 
      and modify that copy for this test, then use it here.
    */}
    <HeroCustomAB 
      headline={chosenHeroContent.headline}
      subheadline={chosenHeroContent.subheadline}
      image={heroImageForWidget}
      abTestVariantKey={chosenHeroContent.id}
      experimentName={EXPERIMENT_NAME}
    />

    {/* You can add a notice for testing if needed */}
    {Astro.cookies.has('astro_developer_toolbar') && (
      <div class="fixed bottom-0 right-0 bg-yellow-300 text-black p-2 m-4 rounded shadow-lg text-xs z-50">
        <p><strong>A/B Test Active</strong></p>
        <p>Experiment: {EXPERIMENT_NAME}</p>
        <p>Variant ID: {chosenHeroContent.id}</p>
        <p>Variant Name: {chosenHeroContent.name}</p>
        <p>Headline: {chosenHeroContent.headline}</p>
      </div>
    )}

    {/* Add other sections from your original index.astro if you want them on this test page */}
    {/* For example: */}
    {/* <Features ... /> */}
    {/* <Testimonials ... /> */}

  </main>

  {/* This script's sole purpose is to ensure abTester.ts is loaded and executed on the client */}
  <script>
    import '~/lib/abTester';
    console.log('[Astro Page Client Script] ~/lib/abTester imported to trigger its execution.');
  </script>
</Layout>

<script define:vars={{ clientChosenVariant: chosenHeroContent, clientExperimentName: EXPERIMENT_NAME }}>
  console.log('[index_ab_test.astro define:vars script] Loaded. clientChosenVariant:', clientChosenVariant);

  const variantToLog = clientChosenVariant;
  const experimentNameForLog = clientExperimentName;

  function attemptImpressionLog() {
    if (variantToLog && experimentNameForLog && variantToLog.id !== 'fallback_no_variants') {
      console.log('[index_ab_test.astro define:vars script] Attempting to log impression via window object for:', variantToLog, experimentNameForLog);
      if (window.logClientImpression) {
        console.log('[index_ab_test.astro define:vars script] window.logClientImpression IS defined. Calling it.');
        window.logClientImpression(variantToLog, experimentNameForLog);
      } else {
        console.warn('[index_ab_test.astro define:vars script] window.logClientImpression is NOT YET DEFINED. Will retry or give up.');
        return false; // Indicates it's not ready
      }
    } else {
      if (variantToLog && variantToLog.id === 'fallback_no_variants') {
        console.log('[index_ab_test.astro define:vars script] Impression logging skipped for fallback variant.');
      } else {
        console.error('[index_ab_test.astro define:vars script] Missing variant or experiment name for impression logging.');
      }
    }
    return true; // Indicates logging was attempted or not needed
  }

  // Try immediately, then poll if not ready
  if (!attemptImpressionLog()) {
    let attempts = 0;
    const maxAttempts = 10; // e.g., try for 5 seconds (10 * 500ms)
    const intervalId = setInterval(() => {
      attempts++;
      console.log(`[index_ab_test.astro define:vars script] Retrying to find window.logClientImpression (Attempt: ${attempts})`);
      if (attemptImpressionLog() || attempts >= maxAttempts) {
        clearInterval(intervalId);
        if (attempts >= maxAttempts && !window.logClientImpression) {
            console.error('[index_ab_test.astro define:vars script] Gave up waiting for window.logClientImpression.');
        }
      }
    }, 500); // Check every 500ms
  }
</script> 