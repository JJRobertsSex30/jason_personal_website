---
import Layout from '~/layouts/PageLayout.astro';
import HeroCustomAB from '~/components/widgets/HeroCustomAB.astro';

// Your Core Widgets & Custom Components
import Content from '~/components/widgets/Content.astro'; // For About JJ & Book sections
import { Icon } from 'astro-icon/components'; // For buttons with icons

// Import AB testing logic - getVariant for SSR, ABVariant for type.
// Crucially, also import abTester here to ensure its client-side window setup runs.
import { getVariant, type ABVariant, trackImpression } from '~/lib/abTester';
// Re-enable side-effect import to ensure abTester.ts is in the client bundle
import '~/lib/abTester'; 

// Import the image with type assertion
// @ts-ignore - We know this is an image import
import imgHeroMain from '~/assets/images/jj2.png';

// --- METADATA (can be same as index.astro or simplified) ---
const metadata = {
  title: 'A/B Test Page | JJ Roberts',
  description: "Testing A/B variations.",
};

const EXPERIMENT_NAME = 'Hero Headline AB Test 1'; // Define as a constant
const chosenHeroContent: ABVariant = await getVariant(EXPERIMENT_NAME);

const LOVELAB_EXPERIMENT_NAME = 'Lovelab Quiz 1 or 2 pages'; // Define as a constant
const chosenLovelabContent: ABVariant = await getVariant(LOVELAB_EXPERIMENT_NAME);

const QUIZ_EXPERIMENT_NAME = 'Lovelab Quiz 1 or 2 pages';
let quizVariant;

try {
  quizVariant = await getVariant(QUIZ_EXPERIMENT_NAME);
  console.log('Assigned quiz variant:', quizVariant);
  
  // Track the impression
  await trackImpression(QUIZ_EXPERIMENT_NAME, quizVariant.id);
} catch (error) {
  console.error('Error getting quiz variant:', error);
  // Fallback to default quiz
  quizVariant = {
    id: 'default_variant',
    name: 'Default Quiz',
    experiment_id: 'default_experiment',
    raw_config_json: {
      quiz_path: '/quiz',
      quiz_name: 'Default Quiz'
    }
  };
}

// Store the quiz variant in a script for client-side access
const quizVariantInfo = {
  experiment: QUIZ_EXPERIMENT_NAME,
  variantId: quizVariant.id,
  variantName: quizVariant.name,
  quizPath: quizVariant.raw_config_json?.quiz_path || '/quiz',
  quizName: quizVariant.raw_config_json?.quiz_name || 'Quiz'
};

// Image configuration for the hero section
const heroImageForWidget = { 
  src: imgHeroMain,
  alt: 'JJ Roberts - Relationship Expert'
} as const;

// === FINAL CALL TO ACTION (Quiz) DATA ===
const finalCtaTagline = "Your Next Step to a Better Love Life";
const finalCtaTitle = "Unlock Your Relationship Blueprint";
const finalCtaImage = { src: imgHeroMain, alt: 'Abstract graphic representing a blueprint or pathway' };
const finalCtaDescription = `
  Ready to understand what's *really* going on in your relationships and how to make lasting positive changes?
  Our quick, insightful quiz will help you identify key patterns and provide a starting point for your personal transformation.
  Plus, you'll get exclusive free chapters from "Sex 3.0: A Sexual Revolution Manual" to guide you further!
`;

// Get the quiz path from the variant config or default to '/quiz'
const quizPath = quizVariant.raw_config_json?.quiz_path || '/quiz';

// Simple quiz URL without any parameters
const quizUrl = quizPath;

console.log('Quiz URL:', quizUrl);

const finalCtaButton = {
    text: 'Enter The Love Lab',
    href: quizUrl,
    icon: 'tabler:flask'
};

console.log('Using quiz path:', quizPath);
---

<Layout metadata={metadata}>
  <main>
    {/* --- HERO WIDGET (A/B Tested) --- */}
    {/* 
      IMPORTANT: You'll need to ensure your HeroCustomAB component can accept 
      `headline` and `subheadline` as props and uses them.
      It also needs to call `trackConversion` from abTester.ts on successful form submission.
      You might want to create a copy of HeroCustomAB (e.g., HeroCustomABTest.astro) 
      and modify that copy for this test, then use it here.
    */}
    <HeroCustomAB 
      headline={chosenHeroContent.headline}
      subheadline={chosenHeroContent.subheadline}
      image={heroImageForWidget}
      abTestVariantKey={chosenHeroContent.experiment_id}
      experimentName={EXPERIMENT_NAME}
    />

    {/* You can add a notice for testing if needed */}
    {Astro.cookies.has('astro_developer_toolbar') && (
      <div class="fixed bottom-0 right-0 bg-yellow-300 text-black p-2 m-4 rounded shadow-lg text-xs z-50">
        <p><strong>A/B Test Active</strong></p>
        <p>Experiment: {EXPERIMENT_NAME}</p>
        <p>Variant ID: {chosenHeroContent.id}</p>
        <p>Variant Name: {chosenHeroContent.name}</p>
        <p>Headline: {chosenHeroContent.headline}</p>
      </div>
    )}

   {/* --- FINAL CALL TO ACTION (Quiz) using Content Widget --- */}
   <Content
   id="final-cta-quiz-section"
   isReversed={false}
   tagline={finalCtaTagline}
   title={finalCtaTitle}
   image={finalCtaImage}
   classes={{
     container: 'py-16 md:py-24 bg-brand-orange/5 dark:bg-brand-orange/5',
     panel: 'gap-8 md:gap-12 lg:gap-16 items-center',
     content: 'prose prose-lg dark:prose-invert max-w-none text-center md:text-left',
     image: 'max-w-md lg:max-lg mx-auto md:mx-0 rounded-lg shadow-xl order-first md:order-last',
   }}
 >
   <Fragment slot="content">
     <div class="space-y-4" set:html={finalCtaDescription} />

     <div class="mt-8 flex justify-center md:justify-start">
       <a
         href={finalCtaButton.href}
         class="inline-flex items-center justify-center gap-2
                px-8 py-3 bg-orange-500 hover:bg-orange-600
                text-white text-lg font-semibold rounded-full
                shadow-md transition duration-300 ease-in-out
                transform hover:scale-105 whitespace-nowrap
                focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-orange-700 dark:focus-visible:ring-offset-slate-900"
         target={finalCtaButton.href.startsWith('http') ? '_blank' : '_self'}
         rel={finalCtaButton.href.startsWith('http') ? 'noopener noreferrer' : ''}
       >
         {finalCtaButton.icon && <Icon name={finalCtaButton.icon} class="w-5 h-5 md:w-6 md:h-6" />}
         <span>{finalCtaButton.text}</span>
       </a>
     </div>
   </Fragment>
 </Content>

</main>

  {/* Store variant data in sessionStorage immediately when page loads */}
  <script is:inline define:vars={{ quizVariantInfo }}>
    try {
      // Store quiz variant info in sessionStorage
      sessionStorage.setItem('quizVariant', JSON.stringify(quizVariantInfo));
      console.log('✓ Stored quiz variant in sessionStorage:', quizVariantInfo);
      
      // Also store in localStorage as backup
      localStorage.setItem('quizVariant', JSON.stringify(quizVariantInfo));
      console.log('✓ Stored quiz variant in localStorage as backup:', quizVariantInfo);
      
    } catch (e) {
      console.error('✗ Error storing quiz variant:', e);
    }
  </script>

  {/* This script's sole purpose is to ensure abTester.ts is loaded and executed on the client */}
  <script>
    import '~/lib/abTester';
    console.log('[Astro Page Client Script] ~/lib/abTester imported to trigger its execution.');
  </script>
</Layout>

<script define:vars={{ clientChosenVariant: chosenHeroContent, clientExperimentName: EXPERIMENT_NAME }}>
  console.log('[index_ab_test.astro define:vars script] Loaded. clientChosenVariant:', clientChosenVariant);

  const variantToLog = clientChosenVariant;
  const experimentNameForLog = clientExperimentName;

  function attemptImpressionLog() {
    if (variantToLog && experimentNameForLog && variantToLog.id !== 'fallback_no_variants') {
      console.log('[index_ab_test.astro define:vars script] Attempting to log impression via window object for:', variantToLog, experimentNameForLog);
      if (window.logClientImpression) {
        console.log('[index_ab_test.astro define:vars script] window.logClientImpression IS defined. Calling it.');
        window.logClientImpression(variantToLog, experimentNameForLog);
      } else {
        console.warn('[index_ab_test.astro define:vars script] window.logClientImpression is NOT YET DEFINED. Will retry or give up.');
        return false; // Indicates it's not ready
      }
    } else {
      if (variantToLog && variantToLog.id === 'fallback_no_variants') {
        console.log('[index_ab_test.astro define:vars script] Impression logging skipped for fallback variant.');
      } else {
        console.error('[index_ab_test.astro define:vars script] Missing variant or experiment name for impression logging.');
      }
    }
    return true; // Indicates logging was attempted or not needed
  }

  // Try immediately, then poll if not ready
  if (!attemptImpressionLog()) {
    let attempts = 0;
    const maxAttempts = 10; // e.g., try for 5 seconds (10 * 500ms)
    const intervalId = setInterval(() => {
      attempts++;
      console.log(`[index_ab_test.astro define:vars script] Retrying to find window.logClientImpression (Attempt: ${attempts})`);
      if (attemptImpressionLog() || attempts >= maxAttempts) {
        clearInterval(intervalId);
        if (attempts >= maxAttempts && !window.logClientImpression) {
            console.error('[index_ab_test.astro define:vars script] Gave up waiting for window.logClientImpression.');
        }
      }
    }, 500); // Check every 500ms
  }
</script>
