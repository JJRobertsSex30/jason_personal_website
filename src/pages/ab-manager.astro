---
import ABPageLayout from '~/layouts/admin/ABPageLayout.astro';
import { supabase } from '~/lib/supabaseClient.ts';

// Define interfaces for our data for better type safety
interface Variant {
  id: string;
  name: string;
  data: { headline?: string; subheadline?: string; [key: string]: unknown };
  created_at: string;
  experiment_id: string;
}

interface Experiment {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
  variants: Variant[]; // Make variants non-optional for consistent mapping
}

interface FlashNotification {
  type: 'success' | 'error';
  message: string;
}

let experiments: Experiment[] = [];
let notification: FlashNotification | null = null;
const flashCookie = Astro.cookies.get('flash_notification');
if (flashCookie && flashCookie.value) {
  try {
    notification = JSON.parse(flashCookie.value) as FlashNotification;
  } catch (e) {
    console.error("Error parsing flash notification cookie:", e);
  }
  Astro.cookies.delete('flash_notification', { path: '/' });
}

// Handle POST requests for deletions
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const action = formData.get('action');
  let postNotification: FlashNotification | null = null;

  try {
    if (action === 'delete_experiment') {
      const id = formData.get('id') as string;
      if (!id) throw new Error('Experiment ID is required.');
      // First delete associated variants and conversions/impressions for this experiment
      await supabase.from('conversions').delete().in('variant_id', supabase.from('variants').select('id').eq('experiment_id', id));
      await supabase.from('impressions').delete().in('variant_id', supabase.from('variants').select('id').eq('experiment_id', id));
      await supabase.from('variants').delete().eq('experiment_id', id);
      const { error: expDelError } = await supabase.from('experiments').delete().eq('id', id);
      if (expDelError) throw expDelError;
      postNotification = { type: 'success', message: 'Experiment and all associated data deleted successfully.' };
    } else if (action === 'delete_variant') {
      const id = formData.get('id') as string;
      if (!id) throw new Error('Variant ID is required.');
      // Also delete associated conversions/impressions for this specific variant
      await supabase.from('conversions').delete().eq('variant_id', id);
      await supabase.from('impressions').delete().eq('variant_id', id);
      const { error: varDelError } = await supabase.from('variants').delete().eq('id', id);
      if (varDelError) throw varDelError;
      postNotification = { type: 'success', message: 'Variant and its associated data deleted successfully.' };
    }
    if (postNotification) {
      Astro.cookies.set('flash_notification', JSON.stringify(postNotification), { path: '/', httpOnly: true, maxAge: 5 });
    }
    return Astro.redirect('/ab-manager', 303);
  } catch (err: unknown) {
    console.error('Error processing POST deletion:', err);
    let message = 'An unknown error occurred during deletion.';
    if (err instanceof Error) message = err.message;
    Astro.cookies.set('flash_notification', JSON.stringify({ type: 'error', message }), { path: '/', httpOnly: true, maxAge: 5 });
    return Astro.redirect('/ab-manager', 303);
  }
}

// Define the expected shape of data from Supabase, especially for nested variants
interface SupabaseExperimentData {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
  variants: Array<{
    id: string;
    name: string;
    data: { headline?: string; subheadline?: string; [key: string]: unknown } | null; // data can be null
    created_at: string;
    experiment_id: string;
  }> | null; // variants array can be null
}

const { data: experimentsData, error: experimentsError } = await supabase
  .from('experiments')
  .select('id, name, description, created_at, variants (id, name, data, created_at, experiment_id)')
  .order('created_at', { ascending: false });

if (experimentsError) {
  console.error('Error fetching experiments:', experimentsError);
  if (!notification) { // Only set if not already set by POST error
    notification = { type: 'error', message: 'Error fetching experiments: ' + experimentsError.message };
  }
} else if (experimentsData) {
  experiments = (experimentsData as SupabaseExperimentData[]).map(exp => ({
    ...exp,
    variants: (exp.variants || []).map(v => ({
      ...v,
      data: v.data || {}
    }))
  }));
} else {
  experiments = [];
}

const metadata = {
  title: 'A/B Experiments Dashboard',
  description: 'Manage and monitor your A/B testing experiments and variants.',
};
---
<ABPageLayout metadata={metadata}>
  <div class="mb-8 flex flex-col md:flex-row justify-between items-center gap-4">
    <div>
      <h1 class="text-3xl md:text-4xl font-bold text-slate-800 dark:text-white">Experiments Dashboard</h1>
      <p class="mt-1 text-lg text-slate-600 dark:text-slate-400">View, create, and manage your A/B tests.</p>
    </div>
    <a href="/experiment-form" class="btn btn-primary w-full md:w-auto whitespace-nowrap">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mr-2 inline-block">
        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
      </svg>
      Add New Experiment
    </a>
  </div>

  {notification && (
    <div class:list={[
      'p-4 mb-6 rounded-lg shadow-lg text-sm',
      notification.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white',
    ]} role="alert">
      <strong class="font-semibold">{notification.type === 'success' ? 'Success!' : 'Error:'}</strong>
      {notification.message}
    </div>
  )}

  {experiments.length === 0 && !notification && (
    <div class="card text-center py-12 md:py-16 bg-white dark:bg-slate-800 rounded-xl shadow-xl">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-slate-400 dark:text-slate-500 mb-4">
        <path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
      </svg>
      <h2 class="text-2xl font-semibold text-slate-700 dark:text-slate-300 mb-2">No Experiments Yet</h2>
      <p class="text-slate-500 dark:text-slate-400 mb-6">Get started by creating your first A/B test experiment.</p>
      <a href="/experiment-form" class="btn btn-primary">Create First Experiment</a>
    </div>
  )}

  <div class="space-y-10">
    {experiments.map((experiment) => (
      <section class="card bg-white dark:bg-slate-800 rounded-xl shadow-2xl overflow-hidden">
        <div class="p-6 md:p-8">
          <div class="flex flex-col sm:flex-row justify-between items-start gap-4 mb-4">
            <div class="flex-grow">
              <h2 class="text-2xl font-semibold text-sky-600 dark:text-sky-400 hover:text-sky-700 dark:hover:text-sky-300 transition-colors">
                <a href={`/experiment-form?id=${experiment.id}`}>{experiment.name}</a>
              </h2>
              <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 mb-2">{experiment.description || 'No description provided.'}</p>
              <div class="text-xs text-slate-400 dark:text-slate-500 space-x-2">
                <span>ID: <code class="bg-slate-100 dark:bg-slate-700 px-1 py-0.5 rounded">{experiment.id}</code></span>
                <span>Created: {new Date(experiment.created_at).toLocaleDateString()}</span>
              </div>
            </div>
            <div class="flex space-x-2 flex-shrink-0 w-full sm:w-auto">
              <a href={`/experiment-form?id=${experiment.id}`} class="btn btn-secondary text-sm flex-grow sm:flex-grow-0">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 inline"><path d="M2.695 14.763l-1.262 3.154a.5.5 0 00.65.65l3.155-1.262a4 4 0 001.343-.885L17.5 5.5a2.121 2.121 0 00-3-3L3.58 13.42a4 4 0 00-.885 1.343z" /></svg>
                Edit
              </a>
              <form method="POST" onsubmit="return confirm('DELETE experiment: ${experiment.name}?\nThis will also delete all its variants, impressions, and conversion data.\nThis action cannot be undone.');" class="inline-block flex-grow sm:flex-grow-0">
                <input type="hidden" name="action" value="delete_experiment" />
                <input type="hidden" name="id" value={experiment.id} />
                <button type="submit" class="btn btn-danger text-sm w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 inline"><path fill-rule="evenodd" d="M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.58.177-2.34.294a.75.75 0 00-.706.705c-.117.76-.217 1.545-.294 2.34V16.25a2.75 2.75 0 002.75 2.75h8.5a2.75 2.75 0 002.75-2.75V7.532c-.077-.795-.177-1.58-.294-2.34a.75.75 0 00-.705-.706c-.76-.117-1.545-.217-2.34-.294V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25V4.075c.827-.05 1.66-.075 2.5-.075zM8.25 9.75a.75.75 0 01.75-.75h2a.75.75 0 010 1.5h-2a.75.75 0 01-.75-.75zm0 2.5a.75.75 0 01.75-.75h2a.75.75 0 010 1.5h-2a.75.75 0 01-.75-.75z" clip-rule="evenodd" /></svg>
                  Delete
                </button>
              </form>
            </div>
          </div>

          <div class="border-t border-slate-200 dark:border-slate-700 pt-5">
            <h3 class="text-lg font-semibold text-slate-700 dark:text-slate-300 mb-3">Variants ({experiment.variants?.length || 0})</h3>
            {experiment.variants && experiment.variants.length > 0 ? (
              <ul class="space-y-3">
                {experiment.variants.map((variant) => (
                  <li class="bg-slate-50 dark:bg-slate-700/50 p-4 rounded-lg flex flex-col sm:flex-row justify-between items-start gap-3">
                    <div class="flex-grow">
                      <h4 class="font-semibold text-slate-800 dark:text-slate-200">{variant.name}</h4>
                      <div class="text-xs text-slate-600 dark:text-slate-400 mt-0.5">
                        <p><strong>Headline:</strong> {variant.data?.headline || <em class="text-slate-400 dark:text-slate-500">Not set</em>}</p>
                        <p><strong>Subheadline:</strong> {variant.data?.subheadline || <em class="text-slate-400 dark:text-slate-500">Not set</em>}</p>
                      </div>
                      <p class="text-xs text-slate-400 dark:text-slate-500 mt-1.5">ID: <code class="bg-slate-200 dark:bg-slate-600 px-1 py-0.5 rounded">{variant.id}</code></p>
                    </div>
                    <div class="flex space-x-2 flex-shrink-0 w-full sm:w-auto mt-2 sm:mt-0">
                      <a href={`/variant-form?experiment_id=${experiment.id}&id=${variant.id}`} class="btn btn-secondary btn-sm text-xs flex-grow sm:flex-grow-0">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-3.5 h-3.5 mr-1 inline"><path d="M2.695 14.763l-1.262 3.154a.5.5 0 00.65.65l3.155-1.262a4 4 0 001.343-.885L17.5 5.5a2.121 2.121 0 00-3-3L3.58 13.42a4 4 0 00-.885 1.343z" /></svg>
                        Edit
                      </a>
                      <form method="POST" onsubmit="return confirm('DELETE variant: ${variant.name}?\nThis will also delete all its impressions and conversion data.\nThis action cannot be undone.');" class="inline-block flex-grow sm:flex-grow-0">
                        <input type="hidden" name="action" value="delete_variant" />
                        <input type="hidden" name="id" value={variant.id} />
                        <button type="submit" class="btn btn-danger btn-sm text-xs w-full">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-3.5 h-3.5 mr-1 inline"><path fill-rule="evenodd" d="M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.58.177-2.34.294a.75.75 0 00-.706.705c-.117.76-.217 1.545-.294 2.34V16.25a2.75 2.75 0 002.75 2.75h8.5a2.75 2.75 0 002.75-2.75V7.532c-.077-.795-.177-1.58-.294-2.34a.75.75 0 00-.705-.706c-.76-.117-1.545-.217-2.34-.294V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25V4.075c.827-.05 1.66-.075 2.5-.075zM8.25 9.75a.75.75 0 01.75-.75h2a.75.75 0 010 1.5h-2a.75.75 0 01-.75-.75zm0 2.5a.75.75 0 01.75-.75h2a.75.75 0 010 1.5h-2a.75.75 0 01-.75-.75z" clip-rule="evenodd" /></svg>
                          Delete
                        </button>
                      </form>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div class="text-center py-6">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12 mx-auto text-slate-400 dark:text-slate-500 mb-3">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M20.25 6.375c0 2.278-3.694 4.125-8.25 4.125S3.75 8.653 3.75 6.375m16.5 0c0-2.278-3.694-4.125-8.25-4.125S3.75 4.097 3.75 6.375m16.5 0v11.25c0 2.278-3.694 4.125-8.25 4.125s-8.25-1.847-8.25-4.125V6.375m16.5 0v3.75m-16.5-3.75v3.75m16.5 0v3.75C20.25 16.153 16.556 18 12 18s-8.25-1.847-8.25-4.125v-3.75M3.75 6.375v3.75m0-3.75c0-2.278 3.694-4.125 8.25-4.125s8.25 1.847 8.25 4.125M12 12.75h.008v.008H12v-.008z" />
                </svg>
                <p class="text-slate-500 dark:text-slate-400">No variants configured for this experiment yet.</p>
              </div>
            )}
            <div class="mt-6 text-center sm:text-left">
              <a href={`/variant-form?experiment_id=${experiment.id}`} class="btn btn-success text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 inline"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" /></svg>
                Add New Variant to "{experiment.name}"
              </a>
            </div>
          </div>
        </div>
      </section>
    ))}
  </div>
</ABPageLayout> 