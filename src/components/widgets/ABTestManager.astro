---
import type { Experiment } from '~/types';

interface Props {
  experiments: Experiment[] | null;
  abTestError: string | null;
}

const { experiments, abTestError } = Astro.props;

function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}
---

<div id="ab-test-manager">
  <div class="mb-6 flex items-center justify-between">
    <div>
      <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">A/B Test Management</h2>
      <p class="text-slate-600 dark:text-slate-400">Create, monitor, and manage your experiments and variants.</p>
    </div>
    <button
      type="button"
      id="create-experiment-btn"
      class="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
    >
      New Experiment
    </button>
  </div>

  {
    abTestError && (
      <div
        class="mb-6 rounded-lg border border-red-400 bg-red-100 p-4 text-red-700 shadow-sm dark:border-red-600 dark:bg-red-800/30 dark:text-red-300"
        role="alert"
      >
        <p class="font-bold">Error:</p>
        <p>{abTestError}</p>
      </div>
    )
  }

  <!-- Create/Edit Experiment Modal -->
  <div
    id="experiment-modal"
    class="fixed inset-0 z-50 hidden overflow-y-auto"
    aria-labelledby="modal-title"
    role="dialog"
    aria-modal="true"
  >
    <div class="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-slate-800 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <span class="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>
      <div
        class="inline-block transform-gpu overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all dark:bg-slate-800 sm:my-8 sm:w-full sm:max-w-lg sm:align-middle"
      >
        <form method="POST" action="#ab-testing-panel" id="experiment-form">
          <input type="hidden" name="_action" id="experiment-action" value="create_experiment" />
          <input type="hidden" name="experiment_id" id="form-experiment-id" />
          <div class="bg-white px-4 pt-5 pb-4 dark:bg-slate-800 sm:p-6 sm:pb-4">
            <h3 class="text-lg font-medium leading-6 text-slate-900 dark:text-white" id="experiment-modal-title">
              Create New Experiment
            </h3>
            <div class="mt-4 space-y-4">
              <div>
                <label for="experiment_name" class="block text-sm font-medium text-slate-700 dark:text-slate-300">
                  Experiment Name
                </label>
                <input
                  type="text"
                  name="experiment_name"
                  id="experiment_name"
                  required
                  class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-white"
                />
              </div>
              <div>
                <label for="experiment_description" class="block text-sm font-medium text-slate-700 dark:text-slate-300"
                  >Description</label
                >
                <textarea
                  name="experiment_description"
                  id="experiment_description"
                  rows="3"
                  class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-white"
                ></textarea>
              </div>
              <div class="flex items-center">
                <input
                  id="experiment_is_active"
                  name="experiment_is_active"
                  type="checkbox"
                  class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500"
                />
                <label for="experiment_is_active" class="ml-2 block text-sm text-slate-900 dark:text-slate-200"
                  >Active</label
                >
              </div>
            </div>
          </div>
          <div class="bg-slate-50 px-4 py-3 dark:bg-slate-800/50 sm:flex sm:flex-row-reverse sm:px-6">
            <button
              type="submit"
              class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Save Experiment
            </button>
            <button
              type="button"
              id="cancel-experiment-modal-btn"
              class="mt-3 inline-flex w-full justify-center rounded-md border border-slate-300 bg-white px-4 py-2 text-base font-medium text-slate-700 shadow-sm hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-slate-600 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600 sm:mt-0 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Create/Edit Variant Modal -->
  <div
    id="variant-modal"
    class="fixed inset-0 z-50 hidden overflow-y-auto"
    aria-labelledby="variant-modal-title"
    role="dialog"
    aria-modal="true"
  >
    <div class="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-slate-800 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <span class="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>
      <div
        class="inline-block transform-gpu overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all dark:bg-slate-800 sm:my-8 sm:w-full sm:max-w-lg sm:align-middle"
      >
        <form method="POST" action="#ab-testing-panel" id="variant-form">
          <input type="hidden" name="_action" id="variant-action" value="create_variant" />
          <input type="hidden" name="experiment_id" id="form-variant-experiment-id" />
          <input type="hidden" name="variant_id" id="form-variant-id" />
          <div class="bg-white px-4 pt-5 pb-4 dark:bg-slate-800 sm:p-6 sm:pb-4">
            <h3 class="text-lg font-medium leading-6 text-slate-900 dark:text-white" id="variant-modal-title">
              Create New Variant
            </h3>
            <div class="mt-4 space-y-4">
              <div>
                <label for="variant_name" class="block text-sm font-medium text-slate-700 dark:text-slate-300">
                  Variant Name
                </label>
                <input
                  type="text"
                  name="variant_name"
                  id="variant_name"
                  required
                  class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-white"
                />
              </div>
              <div>
                <label for="variant_description" class="block text-sm font-medium text-slate-700 dark:text-slate-300"
                  >Description</label
                >
                <textarea
                  name="variant_description"
                  id="variant_description"
                  rows="3"
                  class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-white"
                ></textarea>
              </div>
              <div>
                <label for="variant_config_json" class="block text-sm font-medium text-slate-700 dark:text-slate-300"
                  >Config (JSON)</label
                >
                <textarea
                  name="variant_config_json"
                  id="variant_config_json"
                  rows="5"
                  class="mt-1 block w-full rounded-md border-slate-300 font-mono text-sm shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-slate-600 dark:bg-slate-700 dark:text-white"
                  placeholder={`{\n  "cta_text": "Sign Up Now",\n  "color": "blue"\n}`}></textarea>
              </div>
            </div>
          </div>
          <div class="bg-slate-50 px-4 py-3 dark:bg-slate-800/50 sm:flex sm:flex-row-reverse sm:px-6">
            <button
              type="submit"
              class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Save Variant
            </button>
            <button
              type="button"
              id="cancel-variant-modal-btn"
              class="mt-3 inline-flex w-full justify-center rounded-md border border-slate-300 bg-white px-4 py-2 text-base font-medium text-slate-700 shadow-sm hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-slate-600 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600 sm:mt-0 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div class="space-y-8">
    {
      experiments && experiments.length > 0 ? (
        experiments.map((experiment) => (
          <div id={`experiment-${experiment.id}`} class="rounded-xl bg-white p-6 shadow-lg dark:bg-slate-800">
            <div class="mb-4 border-b border-slate-200 pb-4 dark:border-slate-700">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-xl font-bold text-slate-800 dark:text-white">{experiment.name}</h3>
                  <p class="mt-1 text-sm text-slate-600 dark:text-slate-400">{experiment.description}</p>
                </div>
                <div class="flex items-center space-x-3">
                  <span
                    class:list={[
                      'rounded-full px-3 py-1 text-xs font-semibold',
                      experiment.is_active
                        ? 'bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-300'
                        : 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300',
                    ]}
                  >
                    {experiment.is_active ? 'Active' : 'Inactive'}
                  </span>
                  <button
                    type="button"
                    class="edit-experiment-btn rounded p-1 text-slate-500 hover:bg-slate-100 hover:text-slate-700 dark:text-slate-400 dark:hover:bg-slate-700"
                    data-experiment-id={experiment.id}
                    data-experiment-name={experiment.name}
                    data-experiment-description={experiment.description}
                    data-experiment-is-active={experiment.is_active.toString()}
                  >
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                      <path
                        fill-rule="evenodd"
                        d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>
                  <form method="POST" action="#ab-testing-panel" class="delete-experiment-form">
                    <input type="hidden" name="_action" value="delete_experiment" />
                    <input type="hidden" name="experiment_id" value={experiment.id} />
                    <button
                      type="submit"
                      class="delete-experiment-btn rounded p-1 text-slate-500 hover:bg-red-100 hover:text-red-700 dark:text-slate-400 dark:hover:bg-red-700/50"
                    >
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path
                          fill-rule="evenodd"
                          d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                          clip-rule="evenodd"
                        />
                      </svg>
                    </button>
                  </form>
                </div>
              </div>
              <div class="mt-2 text-xs text-slate-500">
                Created: {formatDate(experiment.created_at)} | Last Updated: {formatDate(experiment.updated_at)}
              </div>
            </div>

            <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
              <div class="variants-chart-container" data-experiment-id={experiment.id} data-variants={experiment.variantsJsonString}>
                <canvas></canvas>
              </div>
              <div>
                <div class="mb-2 flex items-center justify-between">
                  <h4 class="font-semibold text-slate-700 dark:text-slate-300">Variants</h4>
                  <button
                    type="button"
                    class="create-variant-btn rounded-md bg-green-600 px-3 py-1 text-xs font-medium text-white shadow-sm hover:bg-green-700"
                    data-experiment-id={experiment.id}
                  >
                    Add Variant
                  </button>
                </div>
                <div class="space-y-3">
                  {
                    experiment.variants && experiment.variants.map((variant) => (
                      <div class="rounded-lg border border-slate-200 bg-slate-50 p-3 dark:border-slate-700 dark:bg-slate-700/50">
                        <div class="flex items-center justify-between">
                          <p class="font-semibold text-slate-800 dark:text-white">{variant.name}</p>
                          <div class="flex items-center space-x-2">
                            <button
                              type="button"
                              class="edit-variant-btn rounded p-1 text-xs text-slate-500 hover:bg-slate-200 dark:text-slate-400 dark:hover:bg-slate-600"
                              data-variant-id={variant.id}
                              data-experiment-id={experiment.id}
                              data-variant-name={variant.name}
                              data-variant-description={variant.description || ''}
                              data-variant-config-json={JSON.stringify(variant.config_json, null, 2) || ''}
                            >
                              Edit
                            </button>
                            <form method="POST" action="#ab-testing-panel" class="delete-variant-form">
                              <input type="hidden" name="_action" value="delete_variant" />
                              <input type="hidden" name="experiment_id" value={experiment.id} />
                              <input type="hidden" name="variant_id" value={variant.id} />
                              <button type="submit" class="delete-variant-btn rounded p-1 text-xs text-red-500 hover:bg-red-100">
                                Delete
                              </button>
                            </form>
                          </div>
                        </div>
                        <p class="mt-1 text-xs text-slate-500 dark:text-slate-400">
                          {variant.description || 'No description.'}
                        </p>
                        <div class="mt-2 flex items-center justify-between text-xs text-slate-600 dark:text-slate-300">
                          <span>
                            {variant.impressions_count} impressions / {variant.conversions_count} conversions
                          </span>
                          <span class="font-bold text-blue-600">
                            {typeof variant.conversion_rate === 'number' ? variant.conversion_rate.toFixed(2) + '%' : 'N/A'} CR
                          </span>
                        </div>
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
          </div>
        ))
      ) : (
        <div class="rounded-lg border-2 border-dashed border-slate-300 p-12 text-center dark:border-slate-700">
          <svg class="mx-auto h-12 w-12 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1"
              d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
            />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-slate-900 dark:text-white">No experiments</h3>
          <p class="mt-1 text-sm text-slate-500">Get started by creating a new experiment.</p>
        </div>
      )
    }
  </div>
</div>

<script>
    function initializeABTestManager() {
        // Find the parent panel for this manager instance
        const managerElement = document.getElementById('ab-test-manager');
        const panel = managerElement ? managerElement.closest('.tab-panel') : null;

        if (!panel) {
            return;
        }

        let hasInitialized = false;
        const chartInstances = {};

        const destroyExistingChart = (experimentId) => {
            if (chartInstances[experimentId]) {
                chartInstances[experimentId].destroy();
                delete chartInstances[experimentId];
            }
        };

        const initCharts = async () => {
            if (hasInitialized) return;
            hasInitialized = true;
            
            const chartContainers = panel.querySelectorAll('.variants-chart-container');
            if (chartContainers.length === 0) return;

            const { default: Chart } = await import('chart.js/auto');

            chartContainers.forEach(container => {
                if (!(container instanceof HTMLElement)) return;
                const experimentId = container.dataset.experimentId;
                const canvas = container.querySelector('canvas');
                const variantsJson = container.dataset.variants;

                if (!canvas || !variantsJson || !experimentId) return;

                destroyExistingChart(experimentId);

                try {
                    const variants = JSON.parse(variantsJson);
                    if (!Array.isArray(variants)) return;
                    
                    const chartableVariants = variants.filter(v => typeof v.rate === 'number');
                    if (chartableVariants.length === 0) return;

                    const labels = chartableVariants.map(v => `${v.name} (Imp: ${v.impressions}, Conv: ${v.conversions}, Rate: ${v.rate.toFixed(1)}%)`);
                    const data = chartableVariants.map(v => v.rate);
                    
                    const ctx = canvas.getContext('2d');
                    if (!ctx) return;

                    chartInstances[experimentId] = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Conversion Rate (%)',
                                data: data,
                                backgroundColor: [
                                    'rgba(54, 162, 235, 0.6)', 'rgba(255, 99, 132, 0.6)',
                                    'rgba(75, 192, 192, 0.6)', 'rgba(255, 206, 86, 0.6)',
                                    'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)',
                                ],
                                borderColor: [
                                    'rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)',
                                    'rgba(75, 192, 192, 1)', 'rgba(255, 206, 86, 1)',
                                    'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
                                ],
                                borderWidth: 1,
                            }],
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: { beginAtZero: true, ticks: { color: document.documentElement.classList.contains('dark') ? '#e2e8f0' : '#475569' } },
                                y: { ticks: { color: document.documentElement.classList.contains('dark') ? '#e2e8f0' : '#475569' } }
                            },
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            if (label) label += ': ';
                                            if (context.parsed.x !== null) label += context.parsed.x.toFixed(2) + '%';
                                            return label;
                                        }
                                    }
                                }
                            },
                        },
                    });
                } catch (e) {
                    console.error('Failed to initialize A/B test chart:', e);
                }
            });
        };

        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    if (panel.classList.contains('is-active')) {
                        initCharts();
                        observer.disconnect(); // Run only once
                    }
                }
            }
        });
        
        // If the panel is already active on page load, run immediately.
        if (panel.classList.contains('is-active')) {
             initCharts();
        } else {
            // Otherwise, wait for it to become active.
            observer.observe(panel, { attributes: true });
        }
    }

    // Use astro:page-load to ensure this runs on client-side navigation
    document.addEventListener('astro:page-load', initializeABTestManager, { once: true });
</script> 