---
import type { Experiment } from '~/pages/dashboard.astro'; // Adjust path if dashboard moves or Experiment type is centralized

export interface Props {
  experiments: Experiment[] | null;
  abTestError: string | null;
  // We don't need to pass Astro.url, it's globally available in .astro files
}

const { experiments, abTestError } = Astro.props;
---
<section class="my-8">
  <h2 class="text-3xl font-semibold mb-8 text-slate-800 dark:text-white text-center">A/B Test Management</h2>

  {/* A/B Test Specific Error Display */}
  {abTestError && (
    <div class="mb-6 p-4 bg-orange-50 dark:bg-orange-800/30 border border-orange-300 dark:border-orange-600 text-orange-700 dark:text-orange-300 rounded-lg shadow-sm" role="alert">
      <p class="font-bold text-lg">A/B Test Error:</p>
      <p>{abTestError}</p>
    </div>
  )}

  {/* Create New Experiment Form */}
  <div class="mb-10 p-6 bg-white dark:bg-slate-800 shadow-xl rounded-lg">
    <h3 class="text-2xl font-semibold mb-6 text-slate-700 dark:text-slate-200">Create New Experiment</h3>
    <form method="POST" action={Astro.url.pathname} class="space-y-6">
      <input type="hidden" name="_action" value="create_experiment" />
      <div>
        <label for="experiment_name" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
          Experiment Name <span class="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="experiment_name"
          name="experiment_name"
          required
          class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
          placeholder="e.g., Homepage Headline Test"
        />
      </div>
      <div>
        <label for="experiment_description" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
          Description (Optional)
        </label>
        <textarea
          id="experiment_description"
          name="experiment_description"
          rows="3"
          class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
          placeholder="Briefly describe the goal of this experiment."
        ></textarea>
      </div>
      <div class="flex items-center">
        <input
          id="experiment_is_active"
          name="experiment_is_active"
          type="checkbox"
          checked
          class="h-4 w-4 text-blue-600 border-slate-300 dark:border-slate-600 rounded focus:ring-blue-500 bg-white dark:bg-slate-700 dark:checked:bg-blue-500"
        />
        <label for="experiment_is_active" class="ml-2 block text-sm text-slate-700 dark:text-slate-300">
          Activate this experiment immediately
        </label>
      </div>
      <div class="flex justify-end">
        <button
          type="submit"
          class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2.5 px-5 rounded-md shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 transition duration-150 ease-in-out"
        >
          Create Experiment
        </button>
      </div>
    </form>
  </div>

  {/* List of Existing Experiments */}
  <h3 class="text-2xl font-semibold mb-6 text-slate-700 dark:text-slate-200 mt-10">Existing Experiments</h3>
  {experiments && experiments.length > 0 ? (
    <div class="space-y-6">
      {experiments.map((exp) => (
        <div class="bg-white dark:bg-slate-800 shadow-lg rounded-lg p-6" id={`experiment-${exp.id}`}>
          {/* SECTION 1: Just the core details, always visible unless editing */}
          <div class={`experiment-display-section-${exp.id}`}>
            <div class="flex justify-between items-start mb-2">
              <div>
                <h4 class="text-xl font-semibold text-blue-600 dark:text-blue-400">{exp.name}</h4>
                <p class="text-xs text-slate-400 dark:text-slate-500 mt-0.5">ID: {exp.id}</p>
              </div>
              <span class={`px-3 py-1 text-xs font-medium rounded-full ${exp.is_active ? 'bg-green-100 text-green-800 dark:bg-green-700/30 dark:text-green-300' : 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300'}`}>
                {exp.is_active ? 'Active' : 'Inactive'}
              </span>
            </div>
            <p class="text-sm text-slate-600 dark:text-slate-300 mb-3">{exp.description || 'No description provided.'}</p>
          </div>

          {/* SECTION 2: The form for editing core details, hidden by default */}
          <div class={`experiment-edit-form-section-${exp.id} hidden`}>
            <h4 class="text-xl font-semibold text-slate-700 dark:text-slate-200 mb-4">Edit Experiment: <span class="italic">{exp.name}</span></h4>
            <form method="POST" action={Astro.url.pathname} class="space-y-4">
              <input type="hidden" name="_action" value="update_experiment" />
              <input type="hidden" name="experiment_id" value={exp.id} />
              <div>
                <label for={`edit_experiment_name-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                  Experiment Name <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id={`edit_experiment_name-${exp.id}`}
                  name="experiment_name"
                  required
                  value={exp.name}
                  class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
                />
              </div>
              <div>
                <label for={`edit_experiment_description-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
                  Description (Optional)
                </label>
                <textarea
                  id={`edit_experiment_description-${exp.id}`}
                  name="experiment_description"
                  rows="3"
                  class="shadow-sm appearance-none border border-slate-300 dark:border-slate-600 rounded-md w-full py-2.5 px-3 text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-slate-400 dark:placeholder-slate-500"
                >{exp.description}</textarea>
              </div>
              <div class="flex items-center">
                <input
                  id={`edit_experiment_is_active-${exp.id}`}
                  name="experiment_is_active"
                  type="checkbox"
                  checked={exp.is_active}
                  class="h-4 w-4 text-blue-600 border-slate-300 dark:border-slate-600 rounded focus:ring-blue-500 bg-white dark:bg-slate-700 dark:checked:bg-blue-500"
                />
                <label for={`edit_experiment_is_active-${exp.id}`} class="ml-2 block text-sm text-slate-700 dark:text-slate-300">
                  Activate this experiment
                </label>
              </div>
              <div class="flex justify-end space-x-3">
                <button
                  type="button"
                  class="cancel-edit-experiment-btn text-sm bg-slate-500 hover:bg-slate-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150"
                  data-experiment-id={exp.id}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  class="text-sm bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 transition duration-150 ease-in-out"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>

          {/* SECTION 3: Variants, Chart, and Main Actions, visible unless editing */}
          <div class={`experiment-actions-section-${exp.id}`}>
            <div class="mt-4 pt-4 border-t border-dashed border-slate-300 dark:border-slate-600">
                <h5 class="text-sm font-semibold text-slate-700 dark:text-slate-200 mb-1">Current Variants ({exp.variants?.length || 0}):</h5>
                {exp.variants && exp.variants.length > 0 ? (
                  <ul class="list-disc list-inside pl-1 space-y-0.5 text-sm text-slate-500 dark:text-slate-400">
                    {exp.variants.map(variant => (
                      <li>
                        {variant.name} <span class="text-xs text-slate-400">(ID: {variant.id})</span>
                        {typeof variant.impressions_count === 'number' && (
                          <span class="text-xs text-slate-400 ml-2">
                            (Imp: {variant.impressions_count}, Conv: {variant.conversions_count ?? 0}, Rate: {variant.conversion_rate?.toFixed(1) ?? 'N/A'}%)
                          </span>
                        )}
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p class="text-sm text-slate-500 dark:text-slate-400 italic">No variants defined for this experiment yet.</p>
                )}
            </div>
            
            {/* Pie Chart Section */}
            {exp.variants && exp.variants.filter(v => typeof v.conversion_rate === 'number').length > 0 ? (
              <div class="mt-6 pt-6 border-t border-dashed border-slate-300 dark:border-slate-600">
                <h5 class="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-3 text-center">Variant Conversion Rates</h5>
                <div 
                  class="chart-container relative mx-auto"
                  style="max-width: 350px; height: 350px;" 
                  data-experiment-id={exp.id}
                  data-variants={exp.variantsJsonString}
                >
                  <canvas id={`chart-${exp.id}`}></canvas> 
                </div>
              </div>
            ) : (
              <div class="mt-6 pt-6 border-t border-dashed border-slate-300 dark:border-slate-600">
                <h5 class="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-3 text-center">Variant Conversion Rates</h5>
                <p class="text-sm text-slate-400 dark:text-slate-500 text-center italic">No conversion data available to display chart.</p>
              </div>
            )}

            <div class="flex items-center justify-end space-x-3 mt-6 pt-4 border-t border-slate-200 dark:border-slate-700">
              <button type="button" class="text-sm bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 edit-experiment-btn" data-experiment-id={exp.id}>Edit Details</button>
              <button 
                type="button" 
                class="text-sm bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 manage-variants-btn"
                data-experiment-id={exp.id}
                aria-expanded={exp.managingVariants ? 'true' : 'false'}
                aria-controls={`manage-variants-section-${exp.id}`}
              >
                {exp.managingVariants ? 'Hide Variants' : 'Manage Variants'}
              </button>
              <form method="POST" action={Astro.url.pathname} class="inline-block delete-experiment-form" data-experiment-name={exp.name}>
                <input type="hidden" name="_action" value="delete_experiment" />
                <input type="hidden" name="experiment_id" value={exp.id} />
                <button type="submit" class="text-sm bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-md shadow-sm transition duration-150 delete-experiment-btn-submit">
                  Delete Exp.
                </button>
              </form>
            </div>
          </div>

          {/* SECTION 4: Form for managing/adding variants, toggled independently */}
          <div 
            id={`manage-variants-section-${exp.id}`}
            class={`mt-6 pt-6 border-t border-dashed border-slate-300 dark:border-slate-600 ${!exp.managingVariants ? 'hidden' : ''}`}
          >
            <h4 class="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-4">Manage Variants for: <span class="italic">{exp.name}</span></h4>
            
            {/* Display Existing Variants */}
            {exp.variants && exp.variants.length > 0 ? (
              <div class="mb-6">
                <h5 class="text-md font-medium text-slate-600 dark:text-slate-300 mb-2">Existing Variants:</h5>
                <ul class="space-y-3">
                  {exp.variants.map(variant => (
                    <li data-variant-id={variant.id} class="variant-item p-3 bg-slate-50 dark:bg-slate-700/50 rounded-md shadow-sm">
                      {/* Variant Display Section */}
                      <div class="variant-display-section">
                        <div class="flex justify-between items-start">
                          <div>
                            <p class="font-semibold text-slate-700 dark:text-slate-200">{variant.name}</p>
                            <p class="text-xs text-slate-400 dark:text-slate-500 mt-0.5">ID: {variant.id}</p>
                            <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">{variant.description || 'No description'}</p>
                          </div>
                          <div class="variant-stats text-xs text-slate-500 dark:text-slate-400 text-right">
                            <p>Impressions: {variant.impressions_count ?? 0}</p>
                            <p>Conversions: {variant.conversions_count ?? 0}</p>
                            <p>Rate: {variant.conversion_rate?.toFixed(1) ?? 'N/A'}%</p>
                          </div>
                        </div>
                        {variant.config_json && (
                          <details class="mt-2">
                            <summary class="text-xs text-blue-500 dark:text-blue-400 cursor-pointer hover:underline">Show/Hide Config JSON</summary>
                            <pre class="mt-1 text-xs p-2 bg-slate-100 dark:bg-slate-600 rounded overflow-x-auto whitespace-pre-wrap break-all">{JSON.stringify(variant.config_json, null, 2)}</pre>
                          </details>
                        )}
                        <div class="mt-3 pt-3 border-t border-slate-200 dark:border-slate-600 flex justify-end space-x-2">
                          <button type="button" class="edit-variant-btn text-xs bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-1 px-3 rounded-md shadow-sm transition duration-150" data-experiment-id={exp.id} data-variant-id={variant.id}>
                            Edit
                          </button>
                          <form method="POST" action={Astro.url.pathname} class="inline-block delete-variant-form" data-variant-name={variant.name}>
                            <input type="hidden" name="_action" value="delete_variant" />
                            <input type="hidden" name="experiment_id" value={exp.id} />
                            <input type="hidden" name="variant_id" value={variant.id} />
                            <button type="submit" class="delete-variant-btn-submit text-xs bg-red-500 hover:bg-red-600 text-white font-medium py-1 px-3 rounded-md shadow-sm transition duration-150">
                              Delete
                            </button>
                          </form>
                        </div>
                      </div>

                      {/* Variant Edit Form Section (Initially Hidden) */}
                      <div class="variant-edit-form-section hidden mt-2">
                        <h6 class="text-sm font-semibold text-slate-600 dark:text-slate-300 mb-2">Editing Variant: <span class="italic">{variant.name}</span></h6>
                        <form method="POST" action={Astro.url.pathname} class="space-y-3">
                          <input type="hidden" name="_action" value="update_variant" />
                          <input type="hidden" name="experiment_id" value={exp.id} />
                          <input type="hidden" name="variant_id" value={variant.id} />
                          <div>
                            <label for={`edit_variant_name-${variant.id}`} class="block text-xs font-medium text-slate-700 dark:text-slate-300 mb-0.5">Variant Name <span class="text-red-500">*</span></label>
                            <input type="text" name="variant_name" id={`edit_variant_name-${variant.id}`} required value={variant.name} class="w-full p-1.5 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white"/>
                          </div>
                          <div>
                            <label for={`edit_variant_description-${variant.id}`} class="block text-xs font-medium text-slate-700 dark:text-slate-300 mb-0.5">Variant Description</label>
                            <textarea name="variant_description" id={`edit_variant_description-${variant.id}`} rows="2" class="w-full p-1.5 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white">{variant.description}</textarea>
                          </div>
                          <div>
                            <label for={`edit_variant_config_json-${variant.id}`} class="block text-xs font-medium text-slate-700 dark:text-slate-300 mb-0.5">Variant Configuration (JSON)</label>
                            <textarea name="variant_config_json" id={`edit_variant_config_json-${variant.id}`} rows="3" class="w-full p-1.5 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm font-mono text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white" placeholder='{
  "headline": "New Headline!",
  "buttonColor": "blue"
}'>{JSON.stringify(variant.config_json, null, 2)}</textarea>
                            <p class="text-xs text-slate-500 dark:text-slate-400 mt-0.5">Enter valid JSON. <strong class="text-orange-500">Cannot be changed if variant has impressions.</strong></p>
                          </div>
                          <div class="flex justify-end space-x-2 pt-2">
                            <button type="button" class="cancel-edit-variant-btn text-xs bg-slate-500 hover:bg-slate-600 text-white font-medium py-1.5 px-3 rounded-md shadow-sm transition duration-150" data-variant-id={variant.id}>
                              Cancel
                            </button>
                            <button type="submit" class="save-variant-btn text-xs bg-green-600 hover:bg-green-700 text-white font-semibold py-1.5 px-3 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500">
                              Save Changes
                            </button>
                          </div>
                        </form>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p class="text-sm text-slate-500 dark:text-slate-400 italic mb-4">No variants currently exist for this experiment.</p>
            )}
            <h5 class="text-md font-medium text-slate-600 dark:text-slate-300 mb-3 pt-4 border-t border-slate-200 dark:border-slate-700">Add New Variant</h5>
            <form method="POST" action={Astro.url.pathname} class="space-y-4 p-4 bg-slate-50 dark:bg-slate-800/30 rounded-lg shadow">
              <input type="hidden" name="_action" value="create_variant" />
              <input type="hidden" name="experiment_id" value={exp.id} />
              <div>
                <label for={`variant_name-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Name <span class="text-red-500">*</span></label>
                <input type="text" name="variant_name" id={`variant_name-${exp.id}`} required class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white" placeholder="e.g., Control, Variation A"/>
              </div>
              <div>
                <label for={`variant_description-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Description</label>
                <textarea name="variant_description" id={`variant_description-${exp.id}`} rows="2" class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-slate-700 dark:text-white" placeholder="Brief description of this variant"></textarea>
              </div>
              <div>
                <label for={`variant_config_json-${exp.id}`} class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">Variant Configuration (JSON)</label>
                <textarea name="variant_config_json" id={`variant_config_json-${exp.id}`} rows="3" class="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 font-mono text-sm dark:bg-slate-700 dark:text-white" placeholder='{
  "headline": "New Headline!",
  "buttonColor": "blue"
}'></textarea>
                <p class="text-xs text-slate-500 dark:text-slate-400 mt-1">Enter valid JSON or leave blank.</p>
              </div>
              <div class="flex justify-end">
                <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900">Add Variant</button>
              </div>
            </form>
          </div>
        </div>
      ))}
    </div>
  ) : (
    (!abTestError && experiments && experiments.length === 0) && ( 
        <div class="text-center py-8 px-4 bg-white dark:bg-slate-800 rounded-lg shadow-md">
        <svg class="mx-auto h-10 w-10 text-slate-400 dark:text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" />
        </svg>
        <h3 class="mt-2 text-md font-medium text-slate-700 dark:text-slate-200">No Experiments Found</h3>
        <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">Get started by creating your first A/B experiment using the form above.</p>
        </div>
    )
  )}
</section>

<script>
  // Define an interface for the variant data used in the chart (if needed by chart.js in this component context)
  // This might be better defined in a global types file or passed if Chart.js types are used directly
  interface ChartVariantData {
    name: string;
    rate: number | null | undefined;
    impressions: number | null | undefined;
    conversions: number | null | undefined;
  }

  function initializeABTestManagerScripts() {
    // Manage Variants toggle
    document.querySelectorAll('.manage-variants-btn').forEach(btnEl => {
      const btn = btnEl as HTMLButtonElement;
      btn.addEventListener('click', () => {
        const experimentId = btn.dataset.experimentId;
        if (!experimentId) return;
        const variantSection = document.getElementById(`manage-variants-section-${experimentId}`);
        const isExpanded = btn.getAttribute('aria-expanded') === 'true';

        if (variantSection) {
          variantSection.classList.toggle('hidden');
          btn.setAttribute('aria-expanded', String(!isExpanded));
          btn.textContent = !isExpanded ? 'Hide Variants' : 'Manage Variants';
          
          const currentUrl = new URL(window.location.href);
          if (!isExpanded) {
            currentUrl.searchParams.set('openExperiment', experimentId);
            // Preserve existing hash for the main tabs
            window.history.pushState({ path: currentUrl.href }, '', currentUrl.pathname + currentUrl.search + currentUrl.hash);
          } else {
            currentUrl.searchParams.delete('openExperiment');
            window.history.pushState({ path: currentUrl.href }, '', currentUrl.pathname + currentUrl.search + currentUrl.hash);
          }
        }
      });
    });

    // Restore "Manage Variants" open state on popstate/reload based on URL query param
    // This specific part might need to be coordinated if popstate is also handled by dashboard.astro for tabs
    const params = new URLSearchParams(window.location.search);
    const openExperimentIdQuery = params.get('openExperiment');
    if (openExperimentIdQuery) {
      const sectionToOpen = document.getElementById(`manage-variants-section-${openExperimentIdQuery}`);
      const buttonForSection = document.querySelector(`.manage-variants-btn[data-experiment-id="${openExperimentIdQuery}"]`) as HTMLButtonElement | null;
      if (sectionToOpen) sectionToOpen.classList.remove('hidden');
      if (buttonForSection) {
        buttonForSection.setAttribute('aria-expanded', 'true');
        buttonForSection.textContent = 'Hide Variants';
      }
    }


    // Event listeners for Edit Experiment buttons
    document.querySelectorAll('.edit-experiment-btn').forEach(btnEl => {
      const btn = btnEl as HTMLButtonElement;
      btn.addEventListener('click', () => {
        const experimentId = btn.dataset.experimentId;
        if (!experimentId) return;

        const displaySection = document.querySelector(`.experiment-display-section-${experimentId}`);
        const actionsSection = document.querySelector(`.experiment-actions-section-${experimentId}`);
        const editFormSection = document.querySelector(`.experiment-edit-form-section-${experimentId}`) as HTMLElement | null;

        if (displaySection) displaySection.classList.add('hidden');
        if (actionsSection) actionsSection.classList.add('hidden');
        if (editFormSection) {
          editFormSection.classList.remove('hidden');
          const firstInput = editFormSection.querySelector('input[name="experiment_name"]') as HTMLInputElement | null;
          if (firstInput) {
            firstInput.focus();
          }
        }
      });
    });

    // Event listeners for Cancel Edit Experiment buttons
    document.querySelectorAll('.cancel-edit-experiment-btn').forEach(btnEl => {
      const btn = btnEl as HTMLButtonElement;
      btn.addEventListener('click', () => {
        const experimentId = btn.dataset.experimentId;
        if (!experimentId) return;

        const displaySection = document.querySelector(`.experiment-display-section-${experimentId}`);
        const actionsSection = document.querySelector(`.experiment-actions-section-${experimentId}`);
        const editFormSection = document.querySelector(`.experiment-edit-form-section-${experimentId}`);

        if (displaySection) displaySection.classList.remove('hidden');
        if (actionsSection) actionsSection.classList.remove('hidden');
        if (editFormSection) editFormSection.classList.add('hidden');
      });
    });

    // Event listeners for Edit Variant buttons
    document.querySelectorAll('.edit-variant-btn').forEach(btnEl => {
      const btn = btnEl as HTMLButtonElement;
      btn.addEventListener('click', () => {
        const variantId = btn.dataset.variantId;
        if (!variantId) return;
        const listItem = btn.closest('.variant-item');
        if (!listItem) return;

        const displaySection = listItem.querySelector('.variant-display-section');
        const editFormSection = listItem.querySelector('.variant-edit-form-section');

        if (displaySection) displaySection.classList.add('hidden');
        if (editFormSection) editFormSection.classList.remove('hidden');
      });
    });

    // Event listeners for Cancel Edit Variant buttons
    document.querySelectorAll('.cancel-edit-variant-btn').forEach(btnEl => {
      const btn = btnEl as HTMLButtonElement;
      btn.addEventListener('click', () => {
        const variantId = btn.dataset.variantId;
        if (!variantId) return;
        const listItem = btn.closest('.variant-item');
        if (!listItem) return;

        const displaySection = listItem.querySelector('.variant-display-section');
        const editFormSection = listItem.querySelector('.variant-edit-form-section');

        if (displaySection) displaySection.classList.remove('hidden');
        if (editFormSection) editFormSection.classList.add('hidden');
      });
    });
    
    // Event listener for Delete Variant form submissions
    document.querySelectorAll('.delete-variant-form').forEach(formEl => {
      const form = formEl as HTMLFormElement;
      form.addEventListener('submit', (event) => {
        const variantName = form.dataset.variantName || 'this variant';
        if (!confirm(`Are you sure you want to delete "${variantName}"? This action cannot be undone, especially if the variant has no impressions.`)) {
          event.preventDefault(); 
        }
      });
    });

    // Event listener for Delete Experiment form submissions
    document.querySelectorAll('.delete-experiment-form').forEach(formEl => {
      const form = formEl as HTMLFormElement;
      form.addEventListener('submit', (event) => {
        const experimentName = form.dataset.experimentName || 'this experiment';
        if (!confirm(`Are you sure you want to delete the experiment "${experimentName}" and all its associated variants and data? This action cannot be undone.`)) {
          event.preventDefault(); 
        }
      });
    });

    // Chart.js rendering logic
    const chartContainers = document.querySelectorAll('.chart-container');
    if (chartContainers.length > 0) {
      import('chart.js/auto').then(({default: Chart}) => {
        chartContainers.forEach(containerEl => {
          const container = containerEl as HTMLElement; 
          const experimentId = container.dataset.experimentId;
          if (!experimentId) {
            console.error("Chart container missing experiment ID");
            return;
          }
          const canvas = container.querySelector(`canvas#chart-${experimentId}`) as HTMLCanvasElement | null;
          if (!canvas) {
            return;
          }
          
          let variantsData: ChartVariantData[] = [];
          try {
            const variantsJson = container.dataset.variants;
            if (variantsJson) {
              variantsData = JSON.parse(variantsJson);
            } else {
              return;
            }
          } catch (e) {
            console.error('Failed to parse variants data for chart:', e);
            return;
          }

          const chartableVariants = variantsData.filter(v => typeof v.rate === 'number');

          if (chartableVariants.length > 0) {
            const labels = chartableVariants.map(v => `${v.name} (Imp: ${v.impressions ?? 0}, Conv: ${v.conversions ?? 0}, Rate: ${(v.rate ?? 0).toFixed(1)}%)`);
            const data = chartableVariants.map(v => v.rate ?? 0);
            
            const N = chartableVariants.length;
            const baseColors = [
              { r: 54, g: 162, b: 235 }, { r: 255, g: 99, b: 132 }, 
              { r: 255, g: 206, b: 86 }, { r: 75, g: 192, b: 192 }, 
              { r: 153, g: 102, b: 255 }, { r: 255, g: 159, b: 64 }
            ];
            const backgroundColors: string[] = []; 
            const borderColors: string[] = [];   

            for (let i = 0; i < N; i++) {
              const color = baseColors[i % baseColors.length];
              backgroundColors.push(`rgba(${color.r}, ${color.g}, ${color.b}, 0.6)`);
              borderColors.push(`rgba(${color.r}, ${color.g}, ${color.b}, 1)`);
            }
            
            const existingChart = Chart.getChart(canvas);
            if (existingChart) {
                existingChart.destroy();
            }

            new Chart(canvas, {
              type: 'pie',
              data: {
                labels: labels,
                datasets: [{
                  label: 'Conversion Rate (%)',
                  data: data,
                  backgroundColor: backgroundColors,
                  borderColor: borderColors,
                  borderWidth: 1
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { position: 'top', labels: { boxWidth: 20, font: { size: 10 }}},
                  tooltip: {
                    callbacks: {
                      label: function(context) {
                        let label = context.label || '';
                        if (label) { label += ': '; }
                        if (context.parsed !== null && typeof context.parsed === 'number') {
                          label += context.parsed.toFixed(2) + '%';
                        }
                        return label;
                      }
                    }
                  }
                }
              }
            });
          } else {
            const existingChart = Chart.getChart(canvas);
            if (existingChart) { existingChart.destroy(); }
          }
        });
      }).catch(error => {
        console.error('Failed to load Chart.js dynamically:', error);
      });
    }
  }
  
  // Initialize these scripts when the main dashboard page loads this component
  if (typeof document !== 'undefined') { // Ensure this runs only in the browser
    document.addEventListener('astro:page-load', initializeABTestManagerScripts);
  }
</script> 