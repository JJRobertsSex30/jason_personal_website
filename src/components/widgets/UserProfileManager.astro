---
import type { UserProfile } from '~/types';

export interface Props {
  userProfiles: UserProfile[];
}

const { userProfiles } = Astro.props;

const summaryStats = {
  totalUsers: userProfiles?.length || 0,
  newToday:
    userProfiles?.filter(
      (p) => p.created_at && new Date(p.created_at).toDateString() === new Date().toDateString()
    ).length || 0,
  verified: userProfiles?.filter((p) => p.kit_state === 'active').length || 0,
};

const statusMap: Record<string, { text: string; color: string }> = {
  active: { text: 'Confirmed', color: 'bg-green-100 dark:bg-green-400/30 text-green-600 dark:text-green-300' },
  unconfirmed: {
    text: 'Unconfirmed',
    color: 'bg-yellow-100 dark:bg-yellow-400/30 text-yellow-600 dark:text-yellow-300',
  },
  cancelled: { text: 'Cancelled', color: 'bg-gray-100 dark:bg-gray-400/30 text-gray-500 dark:text-gray-300' },
  unsubscribed: { text: 'Unsubscribed', color: 'bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300' },
  complained: {
    text: 'Complained',
    color: 'bg-orange-100 dark:bg-orange-400/30 text-orange-600 dark:text-orange-300',
  },
  bounced: { text: 'Bounced', color: 'bg-red-100 dark:bg-red-400/30 text-red-600 dark:text-red-300' },
  blocked: { text: 'Blocked', color: 'bg-red-100 dark:bg-red-400/30 text-red-600 dark:text-red-300' },
  cold: { text: 'Cold', color: 'bg-blue-100 dark:bg-blue-400/30 text-blue-600 dark:text-blue-300' },
  unknown: { text: 'Unknown', color: 'bg-purple-100 dark:bg-purple-400/30 text-purple-600 dark:text-purple-300' },
};

---
<section class="my-8">
  <h2 class="text-3xl font-semibold mb-8 text-slate-800 dark:text-white text-center">User Management</h2>

  <!-- Summary Cards -->
  <div class="mb-10 grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="p-6 bg-white dark:bg-slate-800 shadow-xl rounded-lg text-center">
      <p class="text-4xl font-bold text-blue-600 dark:text-blue-400">{summaryStats.totalUsers}</p>
      <p class="text-sm font-medium text-slate-600 dark:text-slate-300">Total Users</p>
    </div>
    <div class="p-6 bg-white dark:bg-slate-800 shadow-xl rounded-lg text-center">
      <p class="text-4xl font-bold text-green-600 dark:text-green-400">+{summaryStats.newToday}</p>
      <p class="text-sm font-medium text-slate-600 dark:text-slate-300">New Today</p>
    </div>
    <div class="p-6 bg-white dark:bg-slate-800 shadow-xl rounded-lg text-center">
      <p class="text-4xl font-bold text-indigo-600 dark:text-indigo-400">{summaryStats.verified}</p>
      <p class="text-sm font-medium text-slate-600 dark:text-slate-300">Confirmed</p>
    </div>
  </div>

  <div class="bg-white dark:bg-slate-800 shadow-xl rounded-lg p-6">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-2xl font-semibold text-slate-700 dark:text-slate-200">All Users</h3>
      <div>
        <label for="status-filter" class="block text-sm font-medium text-slate-700 dark:text-slate-300 sr-only"
          >Filter users</label
        >
        <select
          id="status-filter"
          name="status-filter"
          class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md dark:bg-slate-700 dark:border-slate-600 dark:text-white"
        >
          <option value="all">All Users</option>
          <option value="active" selected>Confirmed</option>
          <option value="unconfirmed">Unconfirmed</option>
          <option value="cancelled">Cancelled</option>
          <option value="complained">Complained</option>
          <option value="bounced">Bounced</option>
          <option value="blocked">Blocked</option>
          <option value="cold">Cold</option>
        </select>
      </div>
    </div>
    {
      userProfiles && userProfiles.length > 0 ? (
        <div class="overflow-x-auto">
          <table id="users-table" class="min-w-full divide-y divide-slate-200 dark:divide-slate-700">
            <thead class="bg-slate-50 dark:bg-slate-700/50">
              <tr>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-300 uppercase tracking-wider"
                >
                  Email
                </th>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-300 uppercase tracking-wider"
                >
                  Status
                </th>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-300 uppercase tracking-wider"
                >
                  Created At
                </th>
                <th
                  scope="col"
                  class="px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-300 uppercase tracking-wider"
                >
                  Actions
                </th>
              </tr>
            </thead>
            <tbody id="user-list" class="bg-white dark:bg-slate-800 divide-y divide-slate-200 dark:divide-slate-700">
              {userProfiles.map((profile) => {
                const statusKey = profile.kit_state || 'unknown';
                const statusInfo = statusMap[statusKey] || statusMap['unknown'];
                const isCancelled = statusKey === 'cancelled';
                return (
                  <tr data-state={statusKey} data-href={`/dashboard/user/${profile.view_id}`} class="user-row cursor-pointer hover:bg-slate-50 dark:hover:bg-slate-700/50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 dark:text-slate-100">
                      {profile.email}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500 dark:text-slate-300">
                      <div
                        class:list={[
                          'text-xs inline-flex font-medium rounded-full text-center px-2.5 py-1',
                          statusInfo.color,
                        ]}
                      >
                        {statusInfo.text}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-500 dark:text-slate-300">
                      {profile.created_at ? new Date(profile.created_at).toLocaleDateString() : 'N/A'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex items-center justify-end space-x-1">
                        <button
                          data-action="open-soft-delete-modal"
                          data-user-id={profile.id}
                          data-user-email={profile.email}
                          class="text-slate-500 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-500 p-1.5 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-800 focus:ring-blue-500"
                          title="Archive User (Soft Delete)"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                          </svg>
                        </button>
                        <button
                          data-action="delete-user"
                          data-user-id={profile.id}
                          data-user-email={profile.email}
                          class="delete-user-btn text-slate-500 hover:text-red-600 dark:text-slate-400 dark:hover:text-red-500 p-1.5 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-800 focus:ring-red-500"
                          title="Delete User"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 pointer-events-none" viewBox="0 0 20 20" fill="currentColor">
                            <path
                              fill-rule="evenodd"
                              d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                              clip-rule="evenodd"
                            />
                          </svg>
                        </button>
                        {isCancelled && (
                          <button
                            data-action="restore-user"
                            data-user-id={profile.id}
                            data-user-email={profile.email}
                            class="restore-user-btn text-slate-500 hover:text-green-600 dark:text-slate-400 dark:hover:text-green-500 p-1.5 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-800 focus:ring-green-500"
                            title="Restore User"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                              <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582M20 20v-5h-.581M19.418 19.418A9 9 0 104.582 4.582" />
                            </svg>
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      ) : (
        <div class="text-center py-8 px-4 border border-dashed border-slate-300 dark:border-slate-600 rounded-lg">
          <svg
            class="mx-auto h-10 w-10 text-slate-400 dark:text-slate-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              vector-effect="non-scaling-stroke"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"
            />
          </svg>
          <h3 class="mt-2 text-md font-medium text-slate-700 dark:text-slate-200">No User Profiles Found</h3>
          <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">There are currently no user profiles in the database.</p>
        </div>
      )
    }
  </div>
</section>

<!-- Hard Delete Confirmation Modal -->
<div id="hard-delete-user-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6 max-w-sm w-full relative z-10">
    <h2 class="text-xl font-bold mb-4">Delete User</h2>
    <p class="mb-6">Are you sure you want to permanently delete this user? This cannot be undone.</p>
    <div class="flex justify-end space-x-2">
      <button id="hard-delete-user-modal-cancel-btn" class="px-4 py-2 rounded bg-gray-200 dark:bg-slate-700 text-gray-700 dark:text-slate-200">Cancel</button>
      <button id="hard-delete-user-modal-confirm-btn" class="px-4 py-2 rounded bg-red-600 text-white">Yes, Delete User</button>
    </div>
  </div>
  <div id="hard-delete-user-modal-backdrop" class="fixed inset-0"></div>
</div>

<!-- Soft Delete Confirmation Modal -->
<div id="soft-delete-user-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6 max-w-sm w-full relative z-10">
    <h2 class="text-xl font-bold mb-4">Archive User (Soft Delete)</h2>
    <p class="mb-6">This will unsubscribe the user from emails and hide them from active lists. Their data will be kept for historical purposes and they can be restored later. Are you sure?</p>
    <div class="flex justify-end space-x-2">
      <button id="soft-delete-user-modal-cancel-btn" class="px-4 py-2 rounded bg-gray-200 dark:bg-slate-700 text-gray-700 dark:text-slate-200">Cancel</button>
      <button id="soft-delete-user-modal-confirm-btn" class="px-4 py-2 rounded bg-blue-600 text-white">Yes, Archive User</button>
    </div>
  </div>
  <div id="soft-delete-user-modal-backdrop" class="fixed inset-0"></div>
</div>

<!-- Restore Confirmation Modal -->
<div id="restore-user-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6 max-w-sm w-full relative z-10">
    <h2 class="text-xl font-bold mb-4">Restore User</h2>
    <p class="mb-6">Are you sure you want to restore this user? This will re-subscribe them and trigger a new email.</p>
    <div class="flex justify-end space-x-2">
      <button id="restore-user-modal-cancel-btn" class="px-4 py-2 rounded bg-gray-200 dark:bg-slate-700 text-gray-700 dark:text-slate-200">Cancel</button>
      <button id="restore-user-modal-confirm-btn" class="px-4 py-2 rounded bg-green-600 text-white">Restore User</button>
    </div>
  </div>
  <div id="restore-user-modal-backdrop" class="fixed inset-0"></div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Status Filter Logic
    const filter = document.getElementById('status-filter') as HTMLSelectElement;
    const tableBody = document.getElementById('user-list');

    if (filter && tableBody) {
      const allRows = Array.from(tableBody.querySelectorAll('tr[data-state]')).filter((row): row is HTMLElement => row instanceof HTMLElement);

      const applyFilter = () => {
        const selectedStatus = filter.value;
        allRows.forEach((row) => {
          const userState = row.dataset.state;
          if (selectedStatus === 'all' || userState === selectedStatus) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      };
      filter.addEventListener('change', applyFilter);
      applyFilter();
    }

    // Row click navigation
    const userRows = document.querySelectorAll('.user-row');
    userRows.forEach(row => {
      row.addEventListener('click', (e) => {
        const target = e.target;
        // Do not navigate if the delete, soft delete, restore button, or their SVG icon is clicked
        if (!(target instanceof Element)) return;
        if (
          target.closest('.delete-user-btn') ||
          target.closest('[data-action="open-soft-delete-modal"]') ||
          target.closest('.restore-user-btn')
        ) {
          return;
        }
        const href = (row as HTMLElement).dataset.href;
        if (href) {
          window.location.href = href;
        }
      });
    });

    // Add a modal for hard delete confirmation (similar to soft delete modal)
    let userIdToDelete = '';
    let userEmailToDelete = '';
    let userIdToSoftDelete = '';
    let userEmailToSoftDelete = '';

    // Add event listener for hard delete buttons
    document.querySelectorAll('[data-action="delete-user"]').forEach(btn => {
      btn.addEventListener('click', (e) => {
        userIdToDelete = btn.getAttribute('data-user-id') || '';
        userEmailToDelete = btn.getAttribute('data-user-email') || '';
        // Show the modal
        const modal = document.getElementById('hard-delete-user-modal');
        if (modal) modal.classList.remove('hidden');
        e.stopPropagation();
      });
    });

    // Modal confirm button
    const hardDeleteModalConfirmBtn = document.getElementById('hard-delete-user-modal-confirm-btn');
    if (hardDeleteModalConfirmBtn) {
      hardDeleteModalConfirmBtn.addEventListener('click', () => {
        if (userIdToDelete && userEmailToDelete) {
          deleteUser(userIdToDelete);
        }
        const modal = document.getElementById('hard-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal cancel button
    const hardDeleteModalCancelBtn = document.getElementById('hard-delete-user-modal-cancel-btn');
    if (hardDeleteModalCancelBtn) {
      hardDeleteModalCancelBtn.addEventListener('click', () => {
        const modal = document.getElementById('hard-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal backdrop
    const hardDeleteModalBackdrop = document.getElementById('hard-delete-user-modal-backdrop');
    if (hardDeleteModalBackdrop) {
      hardDeleteModalBackdrop.addEventListener('click', () => {
        const modal = document.getElementById('hard-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Add event listener for soft delete buttons
    document.querySelectorAll('[data-action="open-soft-delete-modal"]').forEach(btn => {
      btn.addEventListener('click', (e) => {
        userIdToSoftDelete = btn.getAttribute('data-user-id') || '';
        userEmailToSoftDelete = btn.getAttribute('data-user-email') || '';
        // Show the modal
        const modal = document.getElementById('soft-delete-user-modal');
        if (modal) modal.classList.remove('hidden');
        e.stopPropagation();
      });
    });

    // Modal confirm button for soft delete
    const softDeleteModalConfirmBtn = document.getElementById('soft-delete-user-modal-confirm-btn');
    if (softDeleteModalConfirmBtn) {
      softDeleteModalConfirmBtn.addEventListener('click', () => {
        if (userIdToSoftDelete && userEmailToSoftDelete) {
          softDeleteUser(userIdToSoftDelete);
        }
        const modal = document.getElementById('soft-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal cancel button for soft delete
    const softDeleteModalCancelBtn = document.getElementById('soft-delete-user-modal-cancel-btn');
    if (softDeleteModalCancelBtn) {
      softDeleteModalCancelBtn.addEventListener('click', () => {
        const modal = document.getElementById('soft-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal backdrop for soft delete
    const softDeleteModalBackdrop = document.getElementById('soft-delete-user-modal-backdrop');
    if (softDeleteModalBackdrop) {
      softDeleteModalBackdrop.addEventListener('click', () => {
        const modal = document.getElementById('soft-delete-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Add restore user click handler
    let restoreUserId = '';
    let restoreUserEmail = '';
    document.addEventListener('click', (e) => {
      const restoreBtn = (e.target && (e.target as Element).closest('[data-action="restore-user"]'));
      if (restoreBtn) {
        restoreUserId = restoreBtn.getAttribute('data-user-id') || '';
        restoreUserEmail = restoreBtn.getAttribute('data-user-email') || '';
        // Show the modal
        const modal = document.getElementById('restore-user-modal');
        if (modal) modal.classList.remove('hidden');
      }
    });

    // Modal confirm button for restore
    const restoreModalConfirmBtn = document.getElementById('restore-user-modal-confirm-btn');
    if (restoreModalConfirmBtn) {
      restoreModalConfirmBtn.addEventListener('click', () => {
        if (restoreUserId || restoreUserEmail) {
          restoreUser(restoreUserId, restoreUserEmail);
        }
        const modal = document.getElementById('restore-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal cancel button for restore
    const restoreModalCancelBtn = document.getElementById('restore-user-modal-cancel-btn');
    if (restoreModalCancelBtn) {
      restoreModalCancelBtn.addEventListener('click', () => {
        const modal = document.getElementById('restore-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }

    // Modal backdrop for restore
    const restoreModalBackdrop = document.getElementById('restore-user-modal-backdrop');
    if (restoreModalBackdrop) {
      restoreModalBackdrop.addEventListener('click', () => {
        const modal = document.getElementById('restore-user-modal');
        if (modal) modal.classList.add('hidden');
      });
    }
  });

  function deleteUser(userId) {
    fetch('/api/delete-user', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          reloadUserList();
        } else {
          alert('Failed to delete user: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(err => {
        alert('Failed to delete user: ' + err);
      });
  }

  function softDeleteUser(userId) {
    fetch('/api/soft-delete-user', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId })
    })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          reloadUserList();
        } else {
          alert('Failed to archive user: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(err => {
        alert('Failed to archive user: ' + err);
      });
  }

  function reloadUserList() {
    fetch('/api/users')
      .then(res => res.json())
      .then(data => {
        if (data && data.users) {
          // Replace table body with new rows
          const tableBody = document.getElementById('user-list');
          if (tableBody) {
            tableBody.innerHTML = '';
            data.users.forEach(profile => {
              // You may want to re-render the row using a template or framework method
              // For now, reload the page as a fallback
              window.location.reload();
            });
          }
        }
      });
  }

  function restoreUser(userId, userEmail) {
    fetch('/api/restore-user', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, userEmail })
    })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          reloadUserList();
        } else {
          alert('Failed to restore user: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(err => {
        alert('Failed to restore user: ' + err);
      });
  }
</script>