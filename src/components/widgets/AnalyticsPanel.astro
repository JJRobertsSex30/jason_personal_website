---
// Component for the Analytics Tab on the Dashboard
---
<div id="analytics-panel" role="tabpanel" class="tab-panel pt-6">
  <div class="mb-6">
    <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">Analytics Overview</h2>
    <p class="text-slate-600 dark:text-slate-400">Comprehensive insights into your A/B testing performance and user engagement.</p>
  </div>

  <div id="analytics-loading" class="text-center py-8">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    <p class="mt-2 text-slate-600 dark:text-slate-400">Loading analytics data...</p>
  </div>

  <div id="analytics-error" class="hidden text-red-500 text-center p-4">
    Error: <span id="analytics-error-message"></span>
  </div>

  <div id="analytics-content" class="hidden">
    <!-- Analytics cards will be dynamically inserted here -->
  </div>

  <div class="mt-8 text-center">
    <button 
      id="refresh-analytics" 
      class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900"
    >
      Refresh Analytics
    </button>
  </div>
</div>

<script>
document.addEventListener('astro:page-load', () => {
    const analyticsPanel = document.getElementById('analytics-panel');
    if (!analyticsPanel) return;
    
    const loadingIndicator = document.getElementById('analytics-loading');
    const errorContainer = document.getElementById('analytics-error');
    const errorMessage = document.getElementById('analytics-error-message');
    const contentContainer = document.getElementById('analytics-content');
    const refreshButton = document.getElementById('refresh-analytics');
    
    let hasLoaded = false;

    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const target = mutation.target as HTMLElement;
                if (target.classList.contains('is-active') && !hasLoaded) {
                    hasLoaded = true;
                    fetchAndDisplayAnalytics();
                    observer.disconnect(); // Stop observing once loaded
                }
            }
        }
    });

    observer.observe(analyticsPanel, { attributes: true });

    // Initial check in case the panel is already active on page load
    if (analyticsPanel.classList.contains('is-active')) {
        hasLoaded = true;
        fetchAndDisplayAnalytics();
        observer.disconnect();
    }

    refreshButton?.addEventListener('click', () => {
        // Always refetch when the button is clicked
        if (contentContainer) {
            contentContainer.innerHTML = ''; // Clear old content
        }
        fetchAndDisplayAnalytics();
    });

    function createCard(title, value, change, iconSvg, colorClass) {
        const card = document.createElement('div');
        card.className = 'bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg flex items-center';
        
        const iconContainer = document.createElement('div');
        iconContainer.className = `flex-shrink-0 ${colorClass} rounded-md p-3`;
        iconContainer.innerHTML = iconSvg.replace('<svg ', '<svg class="h-6 w-6 text-white" ');

        const textContainer = document.createElement('div');
        textContainer.className = 'ml-4';

        const titleEl = document.createElement('p');
        titleEl.className = 'text-sm font-medium text-slate-500 dark:text-slate-400';
        titleEl.textContent = title;

        const valueEl = document.createElement('p');
        valueEl.className = 'text-2xl font-bold text-slate-800 dark:text-white';
        valueEl.textContent = value;

        const changeEl = document.createElement('p');
        changeEl.className = 'text-xs text-slate-500 dark:text-slate-400 mt-1';
        changeEl.textContent = change;

        textContainer.appendChild(titleEl);
        textContainer.appendChild(valueEl);
        textContainer.appendChild(changeEl);
        
        card.appendChild(iconContainer);
        card.appendChild(textContainer);

        return card;
    }

    async function fetchAndDisplayAnalytics() {
        if (!loadingIndicator || !errorContainer || !errorMessage || !contentContainer) return;

        loadingIndicator.classList.remove('hidden');
        errorContainer.classList.add('hidden');

        try {
            const response = await fetch('/api/analytics');
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Network response was not ok: ${response.status} ${errorText}`);
            }
            const data = await response.json();

            if (data) {
                contentContainer.innerHTML = '';
                
                const icons = {
                    impressions: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>`,
                    conversions: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`,
                    bounceRate: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"></path></svg>`,
                    sessionDuration: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`,
                    geo: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9V3m0 18a9 9 0 00-9-9m9 9h-9"></path></svg>`,
                    device: `<svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>`
                };

                const impressionsCard = createCard('Total Impressions', data.performance.totalImpressions, 'All-time', icons.impressions, 'bg-blue-500');
                const conversionsCard = createCard('Total Conversions', data.performance.totalConversions, 'All-time', icons.conversions, 'bg-green-500');
                const bounceRateCard = createCard('Bounce Rate', `${data.engagement.bounceRate.toFixed(1)}%`, 'Lower is better', icons.bounceRate, 'bg-red-500');
                const avgSessionDurationCard = createCard('Avg. Session', `${data.performance.avgTimeOnPage.toFixed(1)}s`, 'Higher is better', icons.sessionDuration, 'bg-yellow-500');
                const topCountryCard = createCard('Top Country', data.geographic.topCountry, `${data.geographic.countryCount} countries`, icons.geo, 'bg-purple-500');
                const topDeviceCard = createCard('Top Device', data.device.topDevice, `${data.device.mobilePercentage.toFixed(1)}% mobile`, icons.device, 'bg-indigo-500');
                
                contentContainer.appendChild(impressionsCard);
                contentContainer.appendChild(conversionsCard);
                contentContainer.appendChild(bounceRateCard);
                contentContainer.appendChild(avgSessionDurationCard);
                contentContainer.appendChild(topCountryCard);
                contentContainer.appendChild(topDeviceCard);
            }

            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            if (contentContainer) {
                contentContainer.classList.remove('hidden');
                contentContainer.classList.add('grid', 'grid-cols-1', 'md:grid-cols-2', 'lg:grid-cols-3', 'gap-6');
            }

        } catch (err) {
            console.error('Failed to fetch analytics data:', err);
            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            if (errorContainer) errorContainer.classList.remove('hidden');
            if (errorMessage) errorMessage.textContent = err instanceof Error ? err.message : 'An unknown error occurred.';
        }
    }
});
</script> 