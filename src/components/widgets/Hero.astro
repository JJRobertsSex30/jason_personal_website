---
// src/components/widgets/Hero.astro
import { Image } from 'astro:assets';
import heroBgImage from '~/assets/images/jj.jpg';

export interface Props {
  image?: {
    src: any;
    alt: string;
  };
}

const { image = { src: heroBgImage, alt: 'Default alt text' } } = Astro.props;
---

<section class="relative overflow-hidden py-24 md:py-32">
  {/* Background Image */}
  <Image
    src={image.src}
    alt={image.alt}
    width={1920}
    height={1080}
    format="webp"
    quality={75}
    loading="eager"
    class="absolute inset-0 w-full h-full object-cover -z-20"
  />

  {/* Dark Overlay */}
  <div class="absolute inset-0 w-full h-full bg-gray-900 opacity-60 -z-10"></div>

  {/* Content Container */}
  <div class="container mx-auto px-4 relative z-10 text-center">
    <div class="max-w-3xl mx-auto">
      <h1 id="hero-headline" class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight drop-shadow-md min-h-[4rem]">
        <!-- Content will be populated by PostHog -->
      </h1>
      <p id="hero-subheadline" class="text-lg text-gray-200 mb-8 drop-shadow-sm min-h-[2rem]">
        <!-- Content will be populated by PostHog -->
      </p>
      
      <div id="content-loading" class="text-gray-300 mb-4">
        Loading...
      </div>
      
      <form 
        id="hero-page-form" 
        class="flex flex-col sm:flex-row gap-4 justify-center max-w-xl mx-auto"
        style="display: none;"
      >
        <input type="hidden" name="ab_test_variant" id="ab-test-variant" />
        <input type="hidden" name="signup_source" value="hero" />
        
        <label for="hero-email-bg" class="sr-only">Email address</label>
        <input
          type="email" 
          id="hero-email-bg"
          name="email"
          placeholder="your.email@example.com"
          required
          class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white/90 dark:bg-gray-800/90 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
        />
        <button
          type="submit"
          class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
        >
          Get Started Now
        </button>
      </form>
      <p id="hero-page-form-message" class="text-sm text-gray-300 mt-4 drop-shadow-sm"></p>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Hero component mounted, initializing...');
    
    // Default content (fallback)
    const defaultContent = {
      'control': {
        headline: "Unlock Your Potential with AI",
        subheadline: "Join our newsletter to get the latest AI insights and tips delivered straight to your inbox."
      },
      'variation-b': {
        headline: "New Way to Transform Your Love Life",
        subheadline: "Experience relationships like never before with our proven approach. Sign up now to get started on your journey to better connections."
      }
    };

    async function updateContentFromPostHog() {
      console.group('Updating content from PostHog');
      
      try {
        // Get the variant and payload
        const variant = window.posthog.getFeatureFlag('hero-section-headline-test');
        const payload = window.posthog.getFeatureFlagPayload 
          ? await window.posthog.getFeatureFlagPayload('hero-section-headline-test')
          : null;
        
        console.log('PostHog variant:', variant);
        console.log('PostHog payload:', payload);
        
        const content = payload || defaultContent[variant] || defaultContent.control;
        console.log('Content to apply:', content);
        
        const headline = document.getElementById('hero-headline');
        const subheadline = document.getElementById('hero-subheadline');
        const loading = document.getElementById('content-loading');
        const form = document.getElementById('hero-page-form');
        const variantInput = document.getElementById('ab-test-variant');
        
        if (headline && content.headline) {
          console.log('Updating headline to:', content.headline);
          headline.textContent = content.headline;
        }
        
        if (subheadline && content.subheadline) {
          console.log('Updating subheadline to:', content.subheadline);
          subheadline.textContent = content.subheadline;
        }
        
        if (variantInput && variant) {
          console.log('Updating variant input to:', variant);
          variantInput.value = variant;
        }
        
        if (loading) {
          console.log('Hiding loading element');
          loading.style.display = 'none';
        }
        
        if (form) {
          console.log('Showing form');
          form.style.display = 'flex';
        }
        
      } catch (error) {
        console.error('Error updating content from PostHog:', error);
        // Fallback to showing the form even if there's an error
        const loading = document.getElementById('content-loading');
        const form = document.getElementById('hero-page-form');
        if (loading) loading.style.display = 'none';
        if (form) form.style.display = 'flex';
      }
      
      console.groupEnd();
    }

    // Initialize with default content first
    console.log('Initializing with default content');
    updateContentFromPostHog();
    
    // Function to check if PostHog is ready
    function checkPostHogReady() {
      if (window.posthog && typeof window.posthog.getFeatureFlag === 'function') {
        console.log('PostHog is ready');
        updateContentFromPostHog();
        return true;
      }
      return false;
    }

    // Check if PostHog is already loaded
    if (!checkPostHogReady()) {
      // If not, wait for the ready event
      console.log('Waiting for PostHog to be ready...');
      window.addEventListener('posthog:ready', function onReady() {
        console.log('PostHog ready event received');
        updateContentFromPostHog();
        window.removeEventListener('posthog:ready', onReady);
      });
    }

    // Add form submission handler
    const form = document.getElementById('hero-page-form');
    if (form) {
      form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const emailInput = form.querySelector('input[type="email"]');
        const messageElement = document.getElementById('hero-page-form-message');
        const submitButton = form.querySelector('button[type="submit"]');
        
        if (!emailInput || !messageElement || !submitButton) return;
        
        const email = emailInput.value.trim();
        
        // Basic validation
        if (!email || !email.includes('@')) {
          messageElement.textContent = 'Please enter a valid email address.';
          messageElement.style.color = 'red';
          return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        messageElement.textContent = 'Subscribing...';
        messageElement.style.color = 'inherit';
        
        try {
          const formData = new FormData(form);
          const response = await fetch('/api/subscribe', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (response.ok) {
            messageElement.textContent = 'Thank you for subscribing! Please check your email to confirm.';
            messageElement.style.color = 'green';
            form.reset();
            
            // Track successful subscription in PostHog
            if (window.posthog) {
              const variant = window.posthog.getFeatureFlag('hero-section-headline-test') || 'control';
              window.posthog.capture('newsletter_subscribed', {
                email: email,
                variant: variant,
                source: 'hero'
              });
            }
          } else {
            throw new Error(result.message || 'Subscription failed');
          }
        } catch (error) {
          console.error('Subscription error:', error);
          messageElement.textContent = error.message || 'Failed to subscribe. Please try again.';
          messageElement.style.color = 'red';
        } finally {
          submitButton.disabled = false;
        }
      });
    }
  });
</script>
