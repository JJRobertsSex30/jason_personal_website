---
// src/components/widgets/Hero.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import heroBgImage from '~/assets/images/jj2.png'; // Default image if none provided

export interface Props {
  headline?: string;
  subheadline?: string;
  image?: {
    src: ImageMetadata; // Expect pre-processed ImageMetadata from Astro assets
    alt: string;
  };
  abTestVariantKey?: string; // This prop will receive the VARIANT'S ID (UUID)
  experimentName?: string;   // This prop will receive the textual name of the experiment
  experimentIdUUID?: string; // <-- ADDED: To receive the Experiment's UUID
}

const { 
  headline = "Default Headline: Discover Your Path",
  subheadline = "Unlock insights and start your journey with our expert guidance. Enter your email to begin.",
  image = { src: heroBgImage, alt: 'Inspirational image for hero section' },
  abTestVariantKey = 'default_variant_id_from_hero', // Default for the variant ID
  experimentName = 'default_experiment_name_from_hero_component',  // More specific default
  experimentIdUUID = 'default_experiment_id_uuid_from_hero' // <-- ADDED
} = Astro.props;

// --- Enhanced SSR Logging for Props ---
console.log(`[Hero SSR] Raw Astro.props.headline: "${Astro.props.headline}"`);
console.log(`[Hero SSR] Raw Astro.props.experimentName: "${Astro.props.experimentName}"`);
console.log(`[Hero SSR] Raw Astro.props.abTestVariantKey: "${Astro.props.abTestVariantKey}"`);
console.log(`[Hero SSR] Raw Astro.props.experimentIdUUID: "${Astro.props.experimentIdUUID}"`); // <-- ADDED

console.log(`[Hero SSR] Destructured values: headline="${headline ? headline.substring(0,30) + '...' : 'N/A'}", experimentName="${experimentName}", abTestVariantKey (variantId)="${abTestVariantKey}", experimentIdUUID="${experimentIdUUID}"`); // <-- MODIFIED
// --- End Enhanced SSR Logging ---
---

<section class="py-16 md:py-24 bg-slate-50 dark:bg-slate-800/30">
  <div class="container mx-auto px-4">
    <div class="grid md:grid-cols-2 gap-8 lg:gap-12 items-center">
      
      <div class="text-left">
        {headline && <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight" set:html={headline} />}
        {subheadline && <p class="text-lg text-gray-700 dark:text-gray-300 mb-8" set:html={subheadline} />}
        
        <form 
          id="hero-custom-ab-form" 
          class="flex flex-col sm:flex-row gap-4 max-w-md"
          aria-labelledby="hero-custom-ab-form-title"
        >
          <span id="hero-custom-ab-form-title" class="sr-only">Sign up for updates</span>
          <input type="hidden" name="ab_test_variant_id" value={abTestVariantKey} />
          <input type="hidden" name="ab_test_experiment_name" value={experimentName} />
          <input type="hidden" name="signup_source" value="hero-custom-ab" />
          <input type="hidden" name="ab_user_identifier" id="ab-user-identifier-input" value="" />
          
          <label for="hero-email-bg-custom-ab" class="sr-only">Email address</label>
          <input
            type="email" 
            id="hero-email-bg-custom-ab"
            name="email"
            placeholder="your.email@example.com"
            required
            autocomplete="email"
            class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
          />
          <button
            type="submit"
            class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
          >
            Get Started Now
          </button>
        </form>
        <p id="hero-custom-ab-form-message" class="text-sm mt-4 min-h-[1.25em]" aria-live="polite"></p>
      </div>

      <div class="mt-8 md:mt-0 flex justify-center md:justify-end">
        {image && image.src && (
          <Image
            src={image.src}
            alt={image.alt || 'Hero section image'}
            width={500} 
            height={500} 
            densities={[1, 1.5, 2]}
            format="webp"
            quality={80}
            class="rounded-lg shadow-xl mx-auto w-full max-w-sm md:max-w-md object-cover aspect-square"
          />
        )}
      </div>

    </div>
  </div>
</section>

<script define:vars={{ 
  clientVariantIdFromProps: abTestVariantKey, 
  clientExperimentNameFromProps: experimentName, // This uses the destructured 'experimentName' from frontmatter
  clientExperimentIdUUIDFromProps: experimentIdUUID // <-- ADDED
}}>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[Hero Client - Simplified] DOMContentLoaded. Props:', { clientVariantIdFromProps, clientExperimentNameFromProps, clientExperimentIdUUIDFromProps });
    const form = document.getElementById('hero-custom-ab-form');
    const messageElement = document.getElementById('hero-custom-ab-form-message');

    if (!form || !messageElement) {
      console.error('[Hero Client - Simplified] Form or message element not found.');
      return;
    }
    
    // Ensure ab_user_identifier is set
    function ensureAbUserIdentifier() {
      let userId = localStorage.getItem('ab_user_identifier');
      if (!userId) {
        userId = crypto.randomUUID();
        localStorage.setItem('ab_user_identifier', userId);
        console.log('[Hero Client - Simplified] New ab_user_identifier generated and stored:', userId);
      }
      const hiddenInput = form.querySelector('input[name="ab_user_identifier"]');
      if (hiddenInput) {
        hiddenInput.value = userId;
        console.log('[Hero Client - Simplified] ab_user_identifier set in form field:', userId);
      }
    }
    ensureAbUserIdentifier();

    // Ensure session_identifier is set
    function ensureSessionIdentifier() {
      let sessionId = sessionStorage.getItem('ab_session_identifier'); // Use sessionStorage for session-specific ID
      if (!sessionId) {
        sessionId = crypto.randomUUID();
        sessionStorage.setItem('ab_session_identifier', sessionId);
        console.log('[Hero Client - Simplified] New session_identifier generated and stored:', sessionId);
      }
      // Add a hidden input for session_identifier if it doesn't exist, or update existing one
      let sessionInput = form.querySelector('input[name="session_identifier"]');
      if (!sessionInput) {
        sessionInput = document.createElement('input');
        sessionInput.type = 'hidden';
        sessionInput.name = 'session_identifier';
        form.appendChild(sessionInput);
      }
      sessionInput.value = sessionId;
      console.log('[Hero Client - Simplified] session_identifier set in form field:', sessionId);
    }
    ensureSessionIdentifier();

    form.addEventListener('submit', async function(event) {
      event.preventDefault();
      console.log('[Hero Client - Simplified] Form submitted.');
      messageElement.textContent = 'Subscribing...';
      messageElement.className = 'text-sm mt-4 text-gray-700 dark:text-gray-300 min-h-[1.25em]';
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) submitButton.disabled = true;

      try {
        const formData = new FormData(form); // FormData will now pick up session_identifier
        
        // Add exposure_timestamp if available
        if (clientExperimentIdUUIDFromProps && clientExperimentIdUUIDFromProps !== 'default_experiment_id_uuid_from_hero') {
          const exposureTimestampKey = `ab_first_exposure_time_${clientExperimentIdUUIDFromProps}`;
          const storedExposureTimestamp = localStorage.getItem(exposureTimestampKey);
          if (storedExposureTimestamp) {
            formData.append('original_exposure_timestamp', storedExposureTimestamp);
            console.log(`[Hero Client - Simplified] Appended original_exposure_timestamp (${storedExposureTimestamp}) from localStorage for key: ${exposureTimestampKey}`);
          } else {
            console.warn(`[Hero Client - Simplified] No original_exposure_timestamp found in localStorage for key: ${exposureTimestampKey}. time_to_convert will likely be null.`);
          }
        } else {
          console.warn('[Hero Client - Simplified] clientExperimentIdUUIDFromProps is not valid. Cannot retrieve original_exposure_timestamp. time_to_convert will likely be null.');
        }

        // Add page_url_at_submission
        formData.append('page_url_at_submission', window.location.href);

        const response = await fetch('/api/subscribe', {
          method: 'POST',
          body: formData
        });
        const result = await response.json();
        if (response.ok && result.success) {
          messageElement.textContent = result.message || 'Thank you for subscribing! Please check your email to confirm.';
          messageElement.className = 'text-sm mt-4 text-green-600 dark:text-green-500 min-h-[1.25em]';
        } else {
          messageElement.textContent = result.message || 'Subscription failed. Please try again.';
          messageElement.className = 'text-sm mt-4 text-red-600 dark:text-red-500 min-h-[1.25em]';
        }
      } catch (e) {
        console.error('[Hero Client - Simplified] Error:', e);
        messageElement.textContent = 'An unexpected error occurred. Please try again.';
        messageElement.className = 'text-sm mt-4 text-red-600 dark:text-red-500 min-h-[1.25em]';
      } finally {
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Get Started Now';
        }
      }
    });
  });
</script>
