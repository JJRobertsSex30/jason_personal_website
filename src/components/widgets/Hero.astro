---
// src/components/widgets/Hero.astro
import { Image } from 'astro:assets';

// VERIFY THIS PATH AND FILENAME MATCH YOUR ACTUAL IMAGE FILE
import heroBgImage from '~/assets/images/jj.jpg';

// Define overlay color and opacity here for easy modification
const overlayColor = 'bg-gray-900';
const overlayOpacity = 'opacity-60';

// Define props interface
export interface Props {
  title?: string;
  subtitle?: string;
  actions?: Array<{
    variant?: string;
    text: string;
    href: string;
    icon?: string;
  }>;
  image?: {
    src: any;
    alt: string;
  };
  abTestVariantKey?: string;
}

const {
  title = "Default Title",
  subtitle = "Default subtitle text",
  actions = [],
  image = { src: heroBgImage, alt: 'Default alt text' },
  abTestVariantKey = 'control'
} = Astro.props;
---

<section class="relative overflow-hidden py-24 md:py-32">
  {/* Background Image */}
  <Image
    src={image.src}
    alt={image.alt}
    width={1920}
    height={1080}
    format="webp"
    quality={75}
    loading="eager"
    class="absolute inset-0 w-full h-full object-cover -z-20"
  />

  {/* Dark Overlay */}
  <div class={`absolute inset-0 w-full h-full ${overlayColor} ${overlayOpacity} -z-10`}></div>

  {/* Content Container */}
  <div class="container mx-auto px-4 relative z-10 text-center">
    {/* Headline & Form */}
    <div class="max-w-3xl mx-auto">
      <h1 id="hero-headline" class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight drop-shadow-md" set:html={title}></h1>
      <p id="hero-subheadline" class="text-lg text-gray-200 mb-8 drop-shadow-sm" set:html={subtitle}></p>
      
      {/* Basic Form */}
      <form 
        id="hero-page-form" 
        class="flex flex-col sm:flex-row gap-4 justify-center max-w-xl mx-auto"
      >
        <input type="hidden" name="ab_test_variant" id="ab-test-variant" value={abTestVariantKey} />
        <input type="hidden" name="signup_source" value="hero" />
        
        <label for="hero-email-bg" class="sr-only">Email address</label>
        <input
          type="email"
          id="hero-email-bg"
          name="email"
          placeholder="your.email@example.com"
          required
          class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white/90 dark:bg-gray-800/90 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
        />
        <button
          type="submit"
          class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
        >
          Get Started Now
        </button>
      </form>
      {/* Added message area */}
      <p id="hero-page-form-message" class="text-sm text-gray-300 mt-4 drop-shadow-sm"></p>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('hero-page-form');
    const messageElement = document.getElementById('hero-page-form-message');
    const emailInput = document.getElementById('hero-email-bg');
    const abTestVariantInput = document.getElementById('ab-test-variant');
    
    // Wait for PostHog to be ready before doing anything
    function waitForPostHog() {
      return new Promise((resolve) => {
        if (window.posthog && window.posthog.__loaded) {
          resolve(window.posthog);
        } else {
          window.addEventListener('posthog:ready', () => {
            resolve(window.posthog);
          }, { once: true });
        }
      });
    }
    
    // Initialize PostHog and update content
    waitForPostHog().then(posthog => {
      // Wait for feature flags to be loaded
      posthog.onFeatureFlags(function() {
        updateContent();
      });
      
      // Also update immediately in case flags are already loaded
      updateContent();
    });
    
    function updateContent() {
      if (!window.posthog) return;
      
      // Get the feature flag value
      const variant = window.posthog.getFeatureFlag('hero-messaging-ab-test') || 'control';
      
      // Update the hidden input with the variant
      if (abTestVariantInput) {
        abTestVariantInput.value = variant;
      }
      
      // Update the headline and subheadline based on the variant
      const headlineElement = document.getElementById('hero-headline');
      const subheadlineElement = document.getElementById('hero-subheadline');
      
      if (variant === 'variant1' && headlineElement && subheadlineElement) {
        headlineElement.innerHTML = "New Way to Transform Your Love Life <br class=\"block sm:hidden\"/> <span class=\"text-brand-green\">Try It Free Today.</span>";
        subheadlineElement.innerHTML = "Experience relationships like never before with our proven approach. Sign up now to get started on your journey to better connections.";
      }
    }
    
    // Form submission handler
    if (form) {
      form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        if (!messageElement || !emailInput) {
          console.error('Form elements not found');
          return;
        }
        
        messageElement.textContent = 'Processing...';
        messageElement.style.color = 'gray';
        
        if (emailInput.checkValidity()) {
          const formData = new FormData(form);
          
          try {
            const response = await fetch('/api/subscribe', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            
            if (response.ok) {
              messageElement.textContent = 'Thank you! Please check your email to confirm.';
              messageElement.style.color = 'green';
              form.reset();
              
              // Track conversion in PostHog - wait for it to be ready first
              waitForPostHog().then(posthog => {
                posthog.capture('email_signup', {
                  $set: {
                    email: emailInput.value,
                    ab_test_variant: abTestVariantInput ? abTestVariantInput.value : 'unknown',
                    signup_source: 'hero'
                  }
                });
              });
            } else {
              messageElement.textContent = result.message || 'An error occurred. Please try again.';
              messageElement.style.color = 'red';
            }
          } catch (error) {
            console.error('Error:', error);
            messageElement.textContent = 'An error occurred. Please try again.';
            messageElement.style.color = 'red';
          }
        } else {
          messageElement.textContent = 'Please enter a valid email address.';
          messageElement.style.color = 'red';
        }
      });
    }
  });
</script>
