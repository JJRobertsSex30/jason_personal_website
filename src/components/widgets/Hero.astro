---
// src/components/widgets/Hero.astro
import { Image } from 'astro:assets';
import heroBgImage from '~/assets/images/jj.jpg';
import { Picture } from 'astro:assets';
import type { Hero as Props } from '~/types';

export interface Props {
  image?: {
    src: import('astro:assets').ImageMetadata;
    alt: string;
  };
  headline?: string;
  subheadline?: string;
}

const { 
  image = { src: heroBgImage, alt: 'Default alt text' },
  headline = "Transform Your Love Life - Break Free From Painful Patterns",
  subheadline = "Discover the powerful insights that help you create deeply fulfilling relationships built on freedom, honesty, and mutual reward. Get your free chapters now."
} = Astro.props;

<section class="relative overflow-hidden py-24 md:py-32">
  {/* Background Image */}
  <Image
    src={image.src}
    alt={image.alt}
    width={1920}
    height={1080}
    format="webp"
    quality={75}
    loading="eager"
    class="absolute inset-0 w-full h-full object-cover -z-20"
  />

  {/* Dark Overlay */}
  <div class="absolute inset-0 w-full h-full bg-gray-900 opacity-60 -z-10"></div>

  {/* Content Container */}
  <div class="container mx-auto px-4 relative z-10 text-center">
    <div class="max-w-3xl mx-auto">
      <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight drop-shadow-md">
        {headline}
      </h1>
      <p class="text-lg text-gray-200 mb-8 drop-shadow-sm">
        {subheadline}
      </p>
      
      <form 
        id="hero-page-form" 
        class="flex flex-col sm:flex-row gap-4 justify-center max-w-xl mx-auto"
      >
        <input type="hidden" name="ab_test_variant" value="control" />
        <input type="hidden" name="signup_source" value="hero" />
        <input type="hidden" name="ab_user_identifier" id="ab-user-identifier-input" value="" />
        
        <label for="hero-email-bg" class="sr-only">Email address</label>
        <input
          type="email" 
          id="hero-email-bg"
          name="email"
          placeholder="your.email@example.com"
          required
          class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white/90 dark:bg-gray-800/90 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
        />
        <button
          type="submit"
          class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
        >
          Get Started Now
        </button>
      </form>
      <p id="hero-page-form-message" class="text-sm text-gray-300 mt-4 drop-shadow-sm"></p>
    </div>
  </div>
</section>

<script is:inline>
  // Import email validation service
  import('/src/lib/emailValidationService.js').then(({ EmailValidationService }) => {
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Hero component mounted, initializing...');
      
      // Get ab_user_identifier for consistent tracking
      function getClientUserIdentifier() {
        let userId = localStorage.getItem('ab_user_identifier');
        if (!userId) {
          userId = crypto.randomUUID();
          localStorage.setItem('ab_user_identifier', userId);
          console.log('[Hero] New ab_user_identifier generated:', userId);
        }
        return userId;
      }
      
      // Populate ab_user_identifier in form
      const abUserIdentifierInput = document.getElementById('ab-user-identifier-input');
      if (abUserIdentifierInput) {
        const userIdentifier = getClientUserIdentifier();
        abUserIdentifierInput.value = userIdentifier;
        console.log('[Hero] Set ab_user_identifier in form:', userIdentifier);
      }

      // Form submission handler
      const form = document.getElementById('hero-page-form');
      if (form) {
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          
          const emailInput = form.querySelector('input[type="email"]');
          const messageElement = document.getElementById('hero-page-form-message');
          const submitButton = form.querySelector('button[type="submit"]');
          
          if (!emailInput || !messageElement || !submitButton) return;
          
          const email = emailInput.value.trim();
          
          if (!email) {
            messageElement.textContent = 'Please enter your email address.';
            messageElement.style.color = 'red';
            return;
          }
          
          // Validate email using our service
          const validationResult = EmailValidationService.validateEmail(email);
          
          if (!validationResult.isValid) {
            const errorMessage = EmailValidationService.getDisplayMessage(validationResult);
            messageElement.textContent = errorMessage;
            messageElement.style.color = 'red';
            return;
          }
          
          submitButton.disabled = true;
          messageElement.textContent = 'Subscribing...';
          messageElement.style.color = 'inherit';
          
          try {
            const formData = new FormData(form);
            const response = await fetch('/api/subscribe', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            console.log('Subscribe response:', { status: response.status, ok: response.ok, result });
            
            if (response.ok && response.status === 200) {
              messageElement.textContent = result.message || 'Thank you for subscribing! Please check your email to confirm.';
              messageElement.style.color = 'green';
              form.reset();
              
              // Track conversion in database
              if (typeof window.trackConversion === 'function') {
                try {
                  const conversionResult = await window.trackConversion(
                    'control',
                    email,
                    'hero_form_submission',
                    {
                      source: 'hero-static',
                      experiment_context: 'hero-section-static'
                    }
                  );
                  console.log('[Hero] Database conversion tracking result:', conversionResult);
                } catch (conversionError) {
                  console.error('[Hero] Error tracking conversion in database:', conversionError);
                }
              }
              
            } else {
              console.error('Subscribe error response:', { status: response.status, result });
              messageElement.textContent = result.message || 'Subscription failed. Please try again.';
              messageElement.style.color = 'red';
            }
          } catch (error) {
            console.error('Subscription error:', error);
            messageElement.textContent = 'Failed to subscribe. Please try again.';
            messageElement.style.color = 'red';
          } finally {
            submitButton.disabled = false;
          }
        });
      }
    });
  }).catch(error => {
    console.error('Error loading email validation service:', error);
    // Fallback behavior without email validation
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Hero component mounted with fallback validation...');
      
      function getClientUserIdentifier() {
        let userId = localStorage.getItem('ab_user_identifier');
        if (!userId) {
          userId = crypto.randomUUID();
          localStorage.setItem('ab_user_identifier', userId);
          console.log('[Hero] New ab_user_identifier generated:', userId);
        }
        return userId;
      }
      
      const abUserIdentifierInput = document.getElementById('ab-user-identifier-input');
      if (abUserIdentifierInput) {
        const userIdentifier = getClientUserIdentifier();
        abUserIdentifierInput.value = userIdentifier;
        console.log('[Hero] Set ab_user_identifier in form:', userIdentifier);
      }

      const form = document.getElementById('hero-page-form');
      if (form) {
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          
          const emailInput = form.querySelector('input[type="email"]');
          const messageElement = document.getElementById('hero-page-form-message');
          const submitButton = form.querySelector('button[type="submit"]');
          
          if (!emailInput || !messageElement || !submitButton) return;
          
          const email = emailInput.value.trim();
          
          if (!email || !email.includes('@')) {
            messageElement.textContent = 'Please enter a valid email address.';
            messageElement.style.color = 'red';
            return;
          }
          
          submitButton.disabled = true;
          messageElement.textContent = 'Subscribing...';
          messageElement.style.color = 'inherit';
          
          try {
            const formData = new FormData(form);
            const response = await fetch('/api/subscribe', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            console.log('Subscribe response:', { status: response.status, ok: response.ok, result });
            
            if (response.ok && response.status === 200) {
              messageElement.textContent = result.message || 'Thank you for subscribing! Please check your email to confirm.';
              messageElement.style.color = 'green';
              form.reset();
              
              if (typeof window.trackConversion === 'function') {
                try {
                  const conversionResult = await window.trackConversion(
                    'control',
                    email,
                    'hero_form_submission',
                    {
                      source: 'hero-static',
                      experiment_context: 'hero-section-static'
                    }
                  );
                  console.log('[Hero] Database conversion tracking result:', conversionResult);
                } catch (conversionError) {
                  console.error('[Hero] Error tracking conversion in database:', conversionError);
                }
              }
              
            } else {
              console.error('Subscribe error response:', { status: response.status, result });
              messageElement.textContent = result.message || 'Subscription failed. Please try again.';
              messageElement.style.color = 'red';
            }
          } catch (error) {
            console.error('Subscription error:', error);
            messageElement.textContent = 'Failed to subscribe. Please try again.';
            messageElement.style.color = 'red';
          } finally {
            submitButton.disabled = false;
          }
        });
      }
    });
  });
</script>
