---
// Component for the User Journey Tab on the Dashboard
---
<div id="user-journey-panel" role="tabpanel" class="tab-panel pt-6">
  <div class="mb-6">
    <h2 class="text-2xl font-bold text-slate-800 dark:text-white mb-2">User Journey Analytics</h2>
    <p class="text-slate-600 dark:text-slate-400">Comprehensive analysis of user sessions, engagement patterns, bounce rates, and device performance impact.</p>
  </div>

  <div id="user-journey-loading" class="text-center py-8">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    <p class="mt-2 text-slate-600 dark:text-slate-400">Loading user journey data...</p>
  </div>

  <div id="user-journey-error" class="hidden text-center p-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800/50 rounded-lg">
    <p class="font-semibold text-red-700 dark:text-red-300">Error Loading Data</p>
    <p id="user-journey-error-message" class="text-sm text-red-600 dark:text-red-400 mt-1"></p>
  </div>

  <div id="user-journey-content" class="hidden space-y-8">
    <!-- Session Flow Analysis -->
    <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
      <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Session Flow Analysis</h3>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div class="text-center">
          <div class="text-2xl font-bold text-blue-600" id="session-count">-</div>
          <div class="text-sm text-slate-600 dark:text-slate-400">Total Sessions</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-green-600" id="avg-session-duration">-</div>
          <div class="text-sm text-slate-600 dark:text-slate-400">Avg Duration (s)</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-600" id="avg-pages-per-session">-</div>
          <div class="text-sm text-slate-600 dark:text-slate-400">Pages/Session</div>
        </div>
        <div class="text-center">
          <div class="text-2xl font-bold text-orange-600" id="returning-user-rate">-</div>
          <div class="text-sm text-slate-600 dark:text-slate-400">Returning Users %</div>
        </div>
      </div>
    </div>

    <!-- Engagement & Bounce Rate -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Engagement Metrics -->
        <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
          <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Engagement Metrics</h3>
          <div class="grid grid-cols-2 gap-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600" id="avg-time-on-page-journey">-</div>
              <div class="text-sm text-slate-600 dark:text-slate-400">Avg Time on Page (s)</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600" id="avg-scroll-depth-journey">-</div>
              <div class="text-sm text-slate-600 dark:text-slate-400">Avg Scroll %</div>
            </div>
          </div>
        </div>
        <!-- Bounce Rate Analysis -->
        <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
          <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Bounce Rate Analysis</h3>
          <div class="grid grid-cols-2 gap-4">
            <div class="text-center">
              <div class="text-3xl font-bold text-red-600" id="overall-bounce-rate">-</div>
              <div class="text-sm text-slate-600 dark:text-slate-400">Overall Bounce Rate</div>
            </div>
             <div>
              <h4 class="font-semibold text-slate-700 dark:text-slate-300 mb-2 text-sm">By Device</h4>
              <div id="bounce-rate-by-device" class="space-y-1"></div>
            </div>
          </div>
        </div>
    </div>


    <!-- Device & Connection Impact -->
    <div class="bg-white dark:bg-slate-800 rounded-xl p-6 shadow-lg">
      <h3 class="text-xl font-bold text-slate-800 dark:text-white mb-4">Device Performance</h3>
        <div class="overflow-x-auto">
            <table class="w-full text-sm">
              <thead>
                <tr class="border-b border-slate-200 dark:border-slate-700">
                  <th class="text-left py-2 text-slate-700 dark:text-slate-300">Device</th>
                  <th class="text-right py-2 text-slate-700 dark:text-slate-300">Sessions</th>
                  <th class="text-right py-2 text-slate-700 dark:text-slate-300">Load Time (s)</th>
                  <th class="text-right py-2 text-slate-700 dark:text-slate-300">Conv %</th>
                </tr>
              </thead>
              <tbody id="device-performance-table">
                <!-- Dynamic content -->
              </tbody>
            </table>
        </div>
    </div>
  </div>

</div>

<script>
document.addEventListener('astro:page-load', () => {
    const journeyPanel = document.getElementById('user-journey-panel');
    if (!journeyPanel) return;

    // Cache DOM elements
    const elements = {
        loading: document.getElementById('user-journey-loading'),
        error: document.getElementById('user-journey-error'),
        errorMessage: document.getElementById('user-journey-error-message'),
        content: document.getElementById('user-journey-content'),
        sessionCount: document.getElementById('session-count'),
        avgSessionDuration: document.getElementById('avg-session-duration'),
        avgPagesPerSession: document.getElementById('avg-pages-per-session'),
        returningUserRate: document.getElementById('returning-user-rate'),
        avgTimeOnPage: document.getElementById('avg-time-on-page-journey'),
        avgScrollDepth: document.getElementById('avg-scroll-depth-journey'),
        overallBounceRate: document.getElementById('overall-bounce-rate'),
        bounceRateByDevice: document.getElementById('bounce-rate-by-device'),
        devicePerformanceTable: document.getElementById('device-performance-table'),
    };

    let hasLoaded = false;

    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                if ((mutation.target as HTMLElement).classList.contains('is-active') && !hasLoaded) {
                    loadJourneyStats();
                }
            }
        }
    });

    if (journeyPanel.classList.contains('is-active')) {
        loadJourneyStats();
    } else {
        observer.observe(journeyPanel, { attributes: true });
    }
    
    function setElementText(element, text) {
        if (element) {
            element.textContent = text;
        }
    }

    async function loadJourneyStats() {
        if (hasLoaded) return;
        hasLoaded = true;
        observer.disconnect();

        elements.loading?.classList.remove('hidden');
        elements.error?.classList.add('hidden');
        elements.content?.classList.add('hidden');

        try {
            const response = await fetch('/api/user-journey-stats');
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `API Error: ${response.status}`);
            }
            const data = await response.json();

            // Populate Session Flow
            setElementText(elements.sessionCount, data.sessionFlowAnalysis.sessionCount.toLocaleString());
            setElementText(elements.avgSessionDuration, `${data.sessionFlowAnalysis.averageSessionDuration}s`);
            setElementText(elements.avgPagesPerSession, data.sessionFlowAnalysis.averagePagesPerSession.toFixed(1));
            setElementText(elements.returningUserRate, `${data.sessionFlowAnalysis.returningUserRate}%`);
            
            // Populate Engagement
            setElementText(elements.avgTimeOnPage, `${data.engagementMetrics.averageTimeOnPage}s`);
            setElementText(elements.avgScrollDepth, `${data.engagementMetrics.averageScrollDepth.toFixed(1)}%`);

            // Populate Bounce Rate
            setElementText(elements.overallBounceRate, `${data.bounceRateAnalysis.overallBounceRate.toFixed(1)}%`);
            if (elements.bounceRateByDevice) {
                elements.bounceRateByDevice.innerHTML = data.bounceRateAnalysis.bounceRateFactors.deviceType
                    .map(d => `<div class="text-xs flex justify-between"><span>${d.device}:</span> <span class="font-semibold">${d.bounceRate.toFixed(1)}%</span></div>`)
                    .join('');
            }
            
            // Populate Device Performance
            if (elements.devicePerformanceTable) {
                elements.devicePerformanceTable.innerHTML = data.deviceConnectionImpact.performanceByDevice
                    .map(d => `
                        <tr class="border-b border-slate-100 dark:border-slate-700 text-sm">
                            <td class="py-2">${d.deviceType}</td>
                            <td class="text-right py-2">${d.sessions.toLocaleString()}</td>
                            <td class="text-right py-2">${d.avgLoadTime}</td>
                            <td class="text-right py-2">${d.conversionRate.toFixed(1)}%</td>
                        </tr>
                    `).join('');
            }


            elements.content?.classList.remove('hidden');
        } catch (err) {
            if(elements.error) elements.error.classList.remove('hidden');
            if(elements.errorMessage) elements.errorMessage.textContent = err instanceof Error ? err.message : 'An unknown error occurred.';
        } finally {
            if(elements.loading) elements.loading.classList.add('hidden');
        }
    }
});
</script> 