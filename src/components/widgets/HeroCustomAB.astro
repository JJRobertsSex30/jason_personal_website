---
// src/components/widgets/HeroCustomAB.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import heroBgImage from '~/assets/images/jj2.png'; // This will be used as a regular image, not background

export interface Props {
  headline?: string;
  subheadline?: string;
  image?: {
    src: ImageMetadata;
    alt: string;
  };
  abTestVariantKey?: string; 
  experimentName?: string;
}

const { 
  headline = "Default Headline for Custom A/B Test", 
  subheadline = "Default subheadline for custom A/B test.", 
  image = { src: heroBgImage, alt: 'JJ Roberts working' }, // Updated default alt
  abTestVariantKey = 'control',
  experimentName
} = Astro.props;
---

<section class="py-16 md:py-24 bg-slate-50 dark:bg-slate-800/30">
  <div class="container mx-auto px-4">
    <div class="grid md:grid-cols-2 gap-8 lg:gap-12 items-center">
      
      <!-- Left Column: Text Content & Form -->
      <div class="text-left">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight" set:html={headline} />
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-8" set:html={subheadline} />
        
        <form 
          id="hero-custom-ab-form" 
          class="flex flex-col sm:flex-row gap-4 max-w-md"
        >
          <input type="hidden" name="ab_test_variant" id="ab-test-variant" value={abTestVariantKey} />
          <input type="hidden" name="signup_source" value="hero-custom-ab" />
          
          <label for="hero-email-bg-custom-ab" class="sr-only">Email address</label>
          <input
            type="email" 
            id="hero-email-bg-custom-ab"
            name="email"
            placeholder="your.email@example.com"
            required
            class="w-full sm:w-auto flex-grow px-4 py-3 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-orange-500 focus:outline-none placeholder-gray-500 dark:placeholder-gray-400"
          />
          <button
            type="submit"
            class="px-8 py-3 bg-orange-500 hover:bg-orange-600 text-white text-lg font-semibold rounded-full shadow-md transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
          >
            Get Started Now
          </button>
        </form>
        <p id="hero-custom-ab-form-message" class="text-sm mt-4"></p>
      </div>

      <!-- Right Column: Image -->
      <div class="mt-8 md:mt-0">
        <Image
          src={image.src}
          alt={image.alt}
          width={768} 
          height={768} 
          format="webp"
          quality={80}
          class="rounded-lg shadow-xl mx-auto w-full max-w-md md:max-w-full object-cover aspect-square md:aspect-auto"
        />
      </div>

    </div>
  </div>
</section>

<script define:vars={{ variantKey: abTestVariantKey, experimentName: experimentName }}>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('HeroCustomAB component mounted, variantKey:', variantKey, 'Experiment Name:', experimentName);
    
    const form = document.getElementById('hero-custom-ab-form');
    if (form) {
      form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const emailInput = form.querySelector('input[type="email"]');
        const messageElement = document.getElementById('hero-custom-ab-form-message');
        const submitButton = form.querySelector('button[type="submit"]');
        
        if (!(emailInput instanceof HTMLInputElement) || !(messageElement instanceof HTMLElement) || !(submitButton instanceof HTMLButtonElement)) {
            console.error("HeroCustomAB: Essential form elements not found or are of incorrect type.");
            if(messageElement) {
                messageElement.textContent = "Error: Could not process form. Please try again later.";
                messageElement.classList.remove('text-green-600', 'dark:text-green-500', 'text-gray-700', 'dark:text-gray-300');
                messageElement.classList.add('text-red-600', 'dark:text-red-500');
            }
            return;
        }
        
        const email = emailInput.value.trim();
        
        if (!email || !email.includes('@')) {
          messageElement.textContent = 'Please enter a valid email address.';
          messageElement.classList.remove('text-green-600', 'dark:text-green-500', 'text-gray-700', 'dark:text-gray-300');
          messageElement.classList.add('text-red-600', 'dark:text-red-500');
          return;
        }
        
        submitButton.disabled = true;
        messageElement.textContent = 'Subscribing...';
        messageElement.classList.remove('text-red-600', 'dark:text-red-500', 'text-green-600', 'dark:text-green-500', 'text-orange-600', 'dark:text-orange-500');
        messageElement.classList.add('text-gray-700', 'dark:text-gray-300');
        
        try {
          const formData = new FormData(form);
          const response = await fetch('/api/subscribe', { 
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          let conversionDisplayMessage = '';
          
          if (response.ok) {
            // Default success message from subscription API
            conversionDisplayMessage = 'Thank you for subscribing! Please check your email to confirm.'; 
            messageElement.classList.remove('text-red-600', 'dark:text-red-500', 'text-gray-700', 'dark:text-gray-300', 'text-orange-600', 'dark:text-orange-500');
            messageElement.classList.add('text-green-600', 'dark:text-green-500');
            form.reset();
            
            if (typeof window.trackConversion === 'function') {
              console.log(`HeroCustomAB: Attempting to track conversion. Experiment: '${experimentName}', Variant: '${variantKey}', Email: '${email}'`);
              const abResult = await window.trackConversion(experimentName, variantKey, email, { 
                source: 'hero-custom-ab', 
                type: 'form_submission' 
              });
              console.log(`HeroCustomAB: A/B Test Conversion track result:`, abResult);
              
              if (abResult.status === 'DUPLICATE') {
                console.warn('A/B Test: Duplicate conversion detected for email:', email);
                conversionDisplayMessage = abResult.message; // Update the message
                // Adjust styling for duplicate message
                messageElement.classList.remove('text-green-600', 'dark:text-green-500', 'text-red-600', 'dark:text-red-500', 'text-gray-700', 'dark:text-gray-300');
                messageElement.classList.add('text-orange-600', 'dark:text-orange-500'); 
              } else if (abResult.status === 'ERROR') {
                console.error('A/B Test: Error tracking conversion:', abResult.message);
                // Optional: append to the existing message or change it entirely if the A/B error is critical
                // For now, we'll just log the error, the primary message reflects the /api/subscribe status.
                // If you wanted to show the A/B error:
                // conversionDisplayMessage = `Subscription succeeded, but A/B tracking failed: ${abResult.message}`;
                // messageElement.classList.remove('text-green-600', 'dark:text-green-500');
                // messageElement.classList.add('text-red-600', 'dark:text-red-500');
              }
            } else {
              console.warn('HeroCustomAB: window.trackConversion function not found.');
            }

          } else {
            // Error from subscription API
            conversionDisplayMessage = result.message || 'Subscription failed';
            messageElement.classList.remove('text-green-600', 'dark:text-green-500', 'text-gray-700', 'dark:text-gray-300', 'text-orange-600', 'dark:text-orange-500');
            messageElement.classList.add('text-red-600', 'dark:text-red-500');
          }
          messageElement.textContent = conversionDisplayMessage;

        } catch (error) {
          console.error('Subscription or A/B tracking error:', error);
          messageElement.textContent = (error instanceof Error ? error.message : 'An unexpected error occurred.') || 'Failed to subscribe. Please try again.';
          messageElement.classList.remove('text-green-600', 'dark:text-green-500', 'text-gray-700', 'dark:text-gray-300', 'text-orange-600', 'dark:text-orange-500');
          messageElement.classList.add('text-red-600', 'dark:text-red-500');
        } finally {
          submitButton.disabled = false;
        }
      });
    }
  });
</script> 